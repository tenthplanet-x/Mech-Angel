	////////////////////////////////////////////////
	//由Perl脚本自动生成的Lua绑定代码，请勿手动修改！//
	////////////////////////////////////////////////
	///////////////////////////////////////////////
	////////LC_LogicObject Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_LogicObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_LogicObject");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_LogicObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_LogicObject* h = (GameLogic::LC_LogicObject*) binder.CheckUserType(1, "LC_LogicObject");
		binder.CheckUserType(1, "LC_LogicObject");
		return 0;
	}
	static int bnd_LC_LogicObject_GetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* pkAPI = (GameLogic::LC_LogicObject*)binder.CheckUserType(1, "LC_LogicObject");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_LogicObject::GetID, L, 2);
		return 1;
	}
	static int bnd_LC_LogicObject_GetMapLogicID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* pkAPI = (GameLogic::LC_LogicObject*)binder.CheckUserType(1, "LC_LogicObject");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_LogicObject::GetMapLogicID, L, 2);
		return 1;
	}
	static int bnd_LC_LogicObject_GetMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* pkAPI = (GameLogic::LC_LogicObject*)binder.CheckUserType(1, "LC_LogicObject");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_LogicObject::GetMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_LogicObject_GetMapLogicType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* pkAPI = (GameLogic::LC_LogicObject*)binder.CheckUserType(1, "LC_LogicObject");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_LogicObject::GetMapLogicType, L, 2);
		return 1;
	}
	static int bnd_LC_LogicObject_GetCurrentLocationPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_LogicObject* pkAPI = (GameLogic::LC_LogicObject*)binder.CheckUserType(1, "LC_LogicObject");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_LogicObject::GetCurrentLocationPtr, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_LogicObject[] = {
	{"Create", bnd_LuaCreate_LC_LogicObject},
	{"GetID", bnd_LC_LogicObject_GetID},
	{"GetMapLogicID", bnd_LC_LogicObject_GetMapLogicID},
	{"GetMapResID", bnd_LC_LogicObject_GetMapResID},
	{"GetMapLogicType", bnd_LC_LogicObject_GetMapLogicType},
	{"GetCurrentLocationPtr", bnd_LC_LogicObject_GetCurrentLocationPtr},
	{NULL, NULL}
	};
	static int luaopen_LC_LogicObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_LogicObject", 0, lib_LC_LogicObject, bnd_LuaDestroy_LC_LogicObject);
		return 1;
	}
	///////////////////////////////////////////////
	////////UT_Vec2Int Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_UT_Vec2Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec2Int* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "UT_Vec2Int");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_UT_Vec2Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Utility::UT_Vec2Int* h = (Utility::UT_Vec2Int*) binder.CheckUserType(1, "UT_Vec2Int");
		binder.CheckUserType(1, "UT_Vec2Int");
		return 0;
	}
	static int bnd_UT_Vec2Int_Setx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec2Int* pkAPI = (Utility::UT_Vec2Int*)binder.CheckUserType(1, "UT_Vec2Int");
		Utility::LuaSetProperty(pkAPI->x, L, 2);
		return 0;
	}
	static int bnd_UT_Vec2Int_Getx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec2Int* pkAPI = (Utility::UT_Vec2Int*)binder.CheckUserType(1, "UT_Vec2Int");
		Utility::LuaPushValue(L, pkAPI->x);
		return 1;
	}
	static int bnd_UT_Vec2Int_Sety(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec2Int* pkAPI = (Utility::UT_Vec2Int*)binder.CheckUserType(1, "UT_Vec2Int");
		Utility::LuaSetProperty(pkAPI->y, L, 2);
		return 0;
	}
	static int bnd_UT_Vec2Int_Gety(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec2Int* pkAPI = (Utility::UT_Vec2Int*)binder.CheckUserType(1, "UT_Vec2Int");
		Utility::LuaPushValue(L, pkAPI->y);
		return 1;
	}
	static const luaL_reg lib_UT_Vec2Int[] = {
	{"Create", bnd_LuaCreate_UT_Vec2Int},
	{"Getx", bnd_UT_Vec2Int_Getx},
	{"Setx", bnd_UT_Vec2Int_Setx},
	{"Gety", bnd_UT_Vec2Int_Gety},
	{"Sety", bnd_UT_Vec2Int_Sety},
	{NULL, NULL}
	};
	static int luaopen_UT_Vec2Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("UT_Vec2Int", 0, lib_UT_Vec2Int, bnd_LuaDestroy_UT_Vec2Int);
		return 1;
	}
	///////////////////////////////////////////////
	////////UT_Vec3Int Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_UT_Vec3Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "UT_Vec3Int");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_UT_Vec3Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Utility::UT_Vec3Int* h = (Utility::UT_Vec3Int*) binder.CheckUserType(1, "UT_Vec3Int");
		binder.CheckUserType(1, "UT_Vec3Int");
		return 0;
	}
	static int bnd_UT_Vec3Int_Setx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaSetProperty(pkAPI->x, L, 2);
		return 0;
	}
	static int bnd_UT_Vec3Int_Getx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaPushValue(L, pkAPI->x);
		return 1;
	}
	static int bnd_UT_Vec3Int_Sety(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaSetProperty(pkAPI->y, L, 2);
		return 0;
	}
	static int bnd_UT_Vec3Int_Gety(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaPushValue(L, pkAPI->y);
		return 1;
	}
	static int bnd_UT_Vec3Int_Setz(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaSetProperty(pkAPI->z, L, 2);
		return 0;
	}
	static int bnd_UT_Vec3Int_Getz(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec3Int* pkAPI = (Utility::UT_Vec3Int*)binder.CheckUserType(1, "UT_Vec3Int");
		Utility::LuaPushValue(L, pkAPI->z);
		return 1;
	}
	static const luaL_reg lib_UT_Vec3Int[] = {
	{"Create", bnd_LuaCreate_UT_Vec3Int},
	{"Getx", bnd_UT_Vec3Int_Getx},
	{"Setx", bnd_UT_Vec3Int_Setx},
	{"Gety", bnd_UT_Vec3Int_Gety},
	{"Sety", bnd_UT_Vec3Int_Sety},
	{"Getz", bnd_UT_Vec3Int_Getz},
	{"Setz", bnd_UT_Vec3Int_Setz},
	{NULL, NULL}
	};
	static int luaopen_UT_Vec3Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("UT_Vec3Int", 0, lib_UT_Vec3Int, bnd_LuaDestroy_UT_Vec3Int);
		return 1;
	}
	///////////////////////////////////////////////
	////////UT_Vec4Int Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_UT_Vec4Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "UT_Vec4Int");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_UT_Vec4Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Utility::UT_Vec4Int* h = (Utility::UT_Vec4Int*) binder.CheckUserType(1, "UT_Vec4Int");
		binder.CheckUserType(1, "UT_Vec4Int");
		return 0;
	}
	static int bnd_UT_Vec4Int_SetParam1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaSetProperty(pkAPI->Param1, L, 2);
		return 0;
	}
	static int bnd_UT_Vec4Int_GetParam1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaPushValue(L, pkAPI->Param1);
		return 1;
	}
	static int bnd_UT_Vec4Int_SetParam2 (lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaSetProperty(pkAPI->Param2 , L, 2);
		return 0;
	}
	static int bnd_UT_Vec4Int_GetParam2 (lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaPushValue(L, pkAPI->Param2 );
		return 1;
	}
	static int bnd_UT_Vec4Int_SetParam3(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaSetProperty(pkAPI->Param3, L, 2);
		return 0;
	}
	static int bnd_UT_Vec4Int_GetParam3(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaPushValue(L, pkAPI->Param3);
		return 1;
	}
	static int bnd_UT_Vec4Int_SetParam4 (lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaSetProperty(pkAPI->Param4 , L, 2);
		return 0;
	}
	static int bnd_UT_Vec4Int_GetParam4 (lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_Vec4Int* pkAPI = (Utility::UT_Vec4Int*)binder.CheckUserType(1, "UT_Vec4Int");
		Utility::LuaPushValue(L, pkAPI->Param4 );
		return 1;
	}
	static const luaL_reg lib_UT_Vec4Int[] = {
	{"Create", bnd_LuaCreate_UT_Vec4Int},
	{"GetParam1", bnd_UT_Vec4Int_GetParam1},
	{"SetParam1", bnd_UT_Vec4Int_SetParam1},
	{"GetParam2 ", bnd_UT_Vec4Int_GetParam2 },
	{"SetParam2 ", bnd_UT_Vec4Int_SetParam2 },
	{"GetParam3", bnd_UT_Vec4Int_GetParam3},
	{"SetParam3", bnd_UT_Vec4Int_SetParam3},
	{"GetParam4 ", bnd_UT_Vec4Int_GetParam4 },
	{"SetParam4 ", bnd_UT_Vec4Int_SetParam4 },
	{NULL, NULL}
	};
	static int luaopen_UT_Vec4Int(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("UT_Vec4Int", 0, lib_UT_Vec4Int, bnd_LuaDestroy_UT_Vec4Int);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_Attacker Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_Attacker(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Attacker* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_Attacker");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_Attacker(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_Attacker* h = (GameLogic::LC_Attacker*) binder.CheckUserType(1, "LC_Attacker");
		binder.CheckUserType(1, "LC_Attacker");
		return 0;
	}
	static const luaL_reg lib_LC_Attacker[] = {
	{"Create", bnd_LuaCreate_LC_Attacker},
	{NULL, NULL}
	};
	static int luaopen_LC_Attacker(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_Attacker", "LC_LogicObject", lib_LC_Attacker, bnd_LuaDestroy_LC_Attacker);
		return 1;
	}
	///////////////////////////////////////////////
	////////SK_SkillEvent Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_SK_SkillEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::SK_SkillEvent* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "SK_SkillEvent");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_SK_SkillEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Skill::SK_SkillEvent* h = (Skill::SK_SkillEvent*) binder.CheckUserType(1, "SK_SkillEvent");
		binder.CheckUserType(1, "SK_SkillEvent");
		return 0;
	}
	static const luaL_reg lib_SK_SkillEvent[] = {
	{"Create", bnd_LuaCreate_SK_SkillEvent},
	{NULL, NULL}
	};
	static int luaopen_SK_SkillEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("SK_SkillEvent", 0, lib_SK_SkillEvent, bnd_LuaDestroy_SK_SkillEvent);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorBase* h = (GameLogic::LC_ActorBase*) binder.CheckUserType(1, "LC_ActorBase");
		binder.CheckUserType(1, "LC_ActorBase");
		return 0;
	}
	static int bnd_LC_ActorBase_GetRiderCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetRiderCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetCharMood(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetCharMood, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetCharTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetCharTitle, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetMaxLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetEXP, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetHP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetHP, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetMP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetMP, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetDead, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetDeadTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetDeadTime, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_IsSkillCast(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::IsSkillCast, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_IsSkillCastInterrupt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::IsSkillCastInterrupt, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetSkillCastTotalTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetSkillCastTotalTime, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetSkillCastElapseTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetSkillCastElapseTime, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetSkillCastName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetSkillCastName, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetStateMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetStateMap, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_IsSkillStateExist(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::IsSkillStateExist, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetAttributeMap, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_PendingSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::PendingSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetCurrentBandWeapon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetCurrentBandWeapon, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_SetLockedTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::SetLockedTargetID, L, 2);
		return 0;
	}		
	static int bnd_LC_ActorBase_GetShapeShiftCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetShapeShiftCharTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_GetWeaponAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::GetWeaponAttribute, L, 2);
		return 1;
	}
	static int bnd_LC_ActorBase_StopMove(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorBase* pkAPI = (GameLogic::LC_ActorBase*)binder.CheckUserType(1, "LC_ActorBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorBase::StopMove, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ActorBase[] = {
	{"Create", bnd_LuaCreate_LC_ActorBase},
	{"GetRiderCharType", bnd_LC_ActorBase_GetRiderCharType},
	{"GetCharName", bnd_LC_ActorBase_GetCharName},
	{"GetCharMood", bnd_LC_ActorBase_GetCharMood},
	{"GetCharTitle", bnd_LC_ActorBase_GetCharTitle},
	{"GetDirtyFlagRevisionID", bnd_LC_ActorBase_GetDirtyFlagRevisionID},
	{"GetCharType", bnd_LC_ActorBase_GetCharType},
	{"GetLevel", bnd_LC_ActorBase_GetLevel},
	{"GetMaxLevel", bnd_LC_ActorBase_GetMaxLevel},
	{"GetEXP", bnd_LC_ActorBase_GetEXP},
	{"GetHP", bnd_LC_ActorBase_GetHP},
	{"GetMP", bnd_LC_ActorBase_GetMP},
	{"GetDead", bnd_LC_ActorBase_GetDead},
	{"GetDeadTime", bnd_LC_ActorBase_GetDeadTime},
	{"IsSkillCast", bnd_LC_ActorBase_IsSkillCast},
	{"IsSkillCastInterrupt", bnd_LC_ActorBase_IsSkillCastInterrupt},
	{"GetSkillCastTotalTime", bnd_LC_ActorBase_GetSkillCastTotalTime},
	{"GetSkillCastElapseTime", bnd_LC_ActorBase_GetSkillCastElapseTime},
	{"GetSkillCastName", bnd_LC_ActorBase_GetSkillCastName},
	{"GetStateMap", bnd_LC_ActorBase_GetStateMap},
	{"IsSkillStateExist", bnd_LC_ActorBase_IsSkillStateExist},
	{"GetAttributeMap", bnd_LC_ActorBase_GetAttributeMap},
	{"PendingSkill", bnd_LC_ActorBase_PendingSkill},
	{"GetCurrentBandWeapon", bnd_LC_ActorBase_GetCurrentBandWeapon},
	{"SetLockedTargetID", bnd_LC_ActorBase_SetLockedTargetID},
	{"GetShapeShiftCharTypeID", bnd_LC_ActorBase_GetShapeShiftCharTypeID},
	{"GetWeaponAttribute", bnd_LC_ActorBase_GetWeaponAttribute},
	{"StopMove", bnd_LC_ActorBase_StopMove},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorBase", "LC_Attacker", lib_LC_ActorBase, bnd_LuaDestroy_LC_ActorBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PlayerBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PlayerBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PlayerBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PlayerBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_PlayerBase* h = (GameLogic::LC_PlayerBase*) binder.CheckUserType(1, "LC_PlayerBase");
		binder.CheckUserType(1, "LC_PlayerBase");
		return 0;
	}
	static int bnd_LC_PlayerBase_GetNPCFunctionType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetNPCFunctionType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_SetNPCFunctionType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::SetNPCFunctionType, L, 2);
		return 0;
	}		
	static int bnd_LC_PlayerBase_GetCombateScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCombateScore, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPackAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPackAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetLockedNpcID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetLockedNpcID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPlayerGroup, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPlayerGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPlayerGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetbLoadFromSocietyFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetbLoadFromSocietyFlag, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGuildRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGuildRank, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPlayerGroupCheifFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPlayerGroupCheifFlag, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPKRecorder(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPKRecorder, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPKState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPKState, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTradeManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTradeManager, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTitleNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTitleNum, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTitle, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCurrentTitleType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCurrentTitleType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTutorialAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTutorialAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetShortcutKeyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetShortcutKeyAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_IsCashEnoughForSkillUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::IsCashEnoughForSkillUpgrade, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_IsCashEnough(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::IsCashEnough, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetArenaAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetArenaAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetActorTotalHookTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetActorTotalHookTime, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetActorCurrentHookTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetActorCurrentHookTime, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetActorHookEfficiency(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetActorHookEfficiency, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetActorCurrentHookTotalTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetActorCurrentHookTotalTime, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetVigor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetVigor, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCurrentFightState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCurrentFightState, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetBowAmount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetBowAmount, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_IsCimeliaEnabled(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::IsCimeliaEnabled, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCimeliaTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCimeliaTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGuildMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGuildMoney, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCouragePoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCouragePoint, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetBowLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetBowLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetVIPAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetVIPAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetSignInAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetSignInAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetMiniSignInAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetMiniSignInAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetRaidAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetRaidAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetPromoterAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetPromoterAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetOpenAbilityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetOpenAbilityAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetSubordinateAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetSubordinateAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetBoneSoulAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetBoneSoulAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetMeltAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetMeltAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetStarsRuneAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetStarsRuneAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_SetAIControl(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::SetAIControl, L, 2);
		return 0;
	}		
	static int bnd_LC_PlayerBase_GetAIControl(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetAIControl, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGreatKungFuAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGreatKungFuAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCrossRealmTeamAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCrossRealmTeamAssert, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_IsGuildAutoAdd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::IsGuildAutoAdd, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_IsExistGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::IsExistGuild, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCommonStatAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCommonStatAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTreasureChestsAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTreasureChestsAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetServerID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetCimeliaMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetCimeliaMaxLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_CheckUseItemInPackByItemType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::CheckUseItemInPackByItemType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetJumpDodgePoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetJumpDodgePoint, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetTotalScore, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetInstanceUniqueID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetInstanceUniqueID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetFashionBagAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetFashionBagAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetIsShowFashion(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetIsShowFashion, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetSpecialCimeliaCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetSpecialCimeliaCharTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGMPriority(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGMPriority, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_ReqItemInPackageOperation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::ReqItemInPackageOperation, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetSubordinateStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetSubordinateStage, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetBuddyStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetBuddyStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetSkillActivateAll(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetSkillActivateAll, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetAllEquipReinforceLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetAllEquipReinforceLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerBase_GetGMLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerBase* pkAPI = (GameLogic::LC_PlayerBase*)binder.CheckUserType(1, "LC_PlayerBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerBase::GetGMLevel, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PlayerBase[] = {
	{"Create", bnd_LuaCreate_LC_PlayerBase},
	{"GetNPCFunctionType", bnd_LC_PlayerBase_GetNPCFunctionType},
	{"SetNPCFunctionType", bnd_LC_PlayerBase_SetNPCFunctionType},
	{"GetCombateScore", bnd_LC_PlayerBase_GetCombateScore},
	{"GetPackAsset", bnd_LC_PlayerBase_GetPackAsset},
	{"GetLockedNpcID", bnd_LC_PlayerBase_GetLockedNpcID},
	{"GetPlayerGroup", bnd_LC_PlayerBase_GetPlayerGroup},
	{"GetPlayerGroupID", bnd_LC_PlayerBase_GetPlayerGroupID},
	{"GetGuildID", bnd_LC_PlayerBase_GetGuildID},
	{"GetbLoadFromSocietyFlag", bnd_LC_PlayerBase_GetbLoadFromSocietyFlag},
	{"GetGuildRank", bnd_LC_PlayerBase_GetGuildRank},
	{"GetGuildName", bnd_LC_PlayerBase_GetGuildName},
	{"GetPlayerGroupCheifFlag", bnd_LC_PlayerBase_GetPlayerGroupCheifFlag},
	{"GetPKRecorder", bnd_LC_PlayerBase_GetPKRecorder},
	{"GetPKState", bnd_LC_PlayerBase_GetPKState},
	{"GetTradeManager", bnd_LC_PlayerBase_GetTradeManager},
	{"GetTitleNum", bnd_LC_PlayerBase_GetTitleNum},
	{"GetTitle", bnd_LC_PlayerBase_GetTitle},
	{"GetCurrentTitleType", bnd_LC_PlayerBase_GetCurrentTitleType},
	{"GetTutorialAsset", bnd_LC_PlayerBase_GetTutorialAsset},
	{"GetShortcutKeyAsset", bnd_LC_PlayerBase_GetShortcutKeyAsset},
	{"IsCashEnoughForSkillUpgrade", bnd_LC_PlayerBase_IsCashEnoughForSkillUpgrade},
	{"IsCashEnough", bnd_LC_PlayerBase_IsCashEnough},
	{"GetArenaAsset", bnd_LC_PlayerBase_GetArenaAsset},
	{"GetActorTotalHookTime", bnd_LC_PlayerBase_GetActorTotalHookTime},
	{"GetActorCurrentHookTime", bnd_LC_PlayerBase_GetActorCurrentHookTime},
	{"GetActorHookEfficiency", bnd_LC_PlayerBase_GetActorHookEfficiency},
	{"GetActorCurrentHookTotalTime", bnd_LC_PlayerBase_GetActorCurrentHookTotalTime},
	{"GetVigor", bnd_LC_PlayerBase_GetVigor},
	{"GetCurrentFightState", bnd_LC_PlayerBase_GetCurrentFightState},
	{"GetBowAmount", bnd_LC_PlayerBase_GetBowAmount},
	{"IsCimeliaEnabled", bnd_LC_PlayerBase_IsCimeliaEnabled},
	{"GetCimeliaTimeStamp", bnd_LC_PlayerBase_GetCimeliaTimeStamp},
	{"GetGuildMoney", bnd_LC_PlayerBase_GetGuildMoney},
	{"GetCouragePoint", bnd_LC_PlayerBase_GetCouragePoint},
	{"GetBowLevel", bnd_LC_PlayerBase_GetBowLevel},
	{"GetVIPAsset", bnd_LC_PlayerBase_GetVIPAsset},
	{"GetSignInAsset", bnd_LC_PlayerBase_GetSignInAsset},
	{"GetMiniSignInAsset", bnd_LC_PlayerBase_GetMiniSignInAsset},
	{"GetRaidAsset", bnd_LC_PlayerBase_GetRaidAsset},
	{"GetPromoterAsset", bnd_LC_PlayerBase_GetPromoterAsset},
	{"GetOpenAbilityAsset", bnd_LC_PlayerBase_GetOpenAbilityAsset},
	{"GetSubordinateAsset", bnd_LC_PlayerBase_GetSubordinateAsset},
	{"GetBoneSoulAsset", bnd_LC_PlayerBase_GetBoneSoulAsset},
	{"GetMeltAsset", bnd_LC_PlayerBase_GetMeltAsset},
	{"GetStarsRuneAsset", bnd_LC_PlayerBase_GetStarsRuneAsset},
	{"SetAIControl", bnd_LC_PlayerBase_SetAIControl},
	{"GetAIControl", bnd_LC_PlayerBase_GetAIControl},
	{"GetGreatKungFuAsset", bnd_LC_PlayerBase_GetGreatKungFuAsset},
	{"GetCrossRealmTeamAssert", bnd_LC_PlayerBase_GetCrossRealmTeamAssert},
	{"IsGuildAutoAdd", bnd_LC_PlayerBase_IsGuildAutoAdd},
	{"IsExistGuild", bnd_LC_PlayerBase_IsExistGuild},
	{"GetCommonStatAsset", bnd_LC_PlayerBase_GetCommonStatAsset},
	{"GetTreasureChestsAsset", bnd_LC_PlayerBase_GetTreasureChestsAsset},
	{"GetServerID", bnd_LC_PlayerBase_GetServerID},
	{"GetCimeliaMaxLevel", bnd_LC_PlayerBase_GetCimeliaMaxLevel},
	{"CheckUseItemInPackByItemType", bnd_LC_PlayerBase_CheckUseItemInPackByItemType},
	{"GetJumpDodgePoint", bnd_LC_PlayerBase_GetJumpDodgePoint},
	{"GetTotalScore", bnd_LC_PlayerBase_GetTotalScore},
	{"GetInstanceUniqueID", bnd_LC_PlayerBase_GetInstanceUniqueID},
	{"GetFashionBagAsset", bnd_LC_PlayerBase_GetFashionBagAsset},
	{"GetIsShowFashion", bnd_LC_PlayerBase_GetIsShowFashion},
	{"GetSpecialCimeliaCharTypeID", bnd_LC_PlayerBase_GetSpecialCimeliaCharTypeID},
	{"GetGMPriority", bnd_LC_PlayerBase_GetGMPriority},
	{"ReqItemInPackageOperation", bnd_LC_PlayerBase_ReqItemInPackageOperation},
	{"GetSubordinateStage", bnd_LC_PlayerBase_GetSubordinateStage},
	{"GetBuddyStarLevel", bnd_LC_PlayerBase_GetBuddyStarLevel},
	{"GetSkillActivateAll", bnd_LC_PlayerBase_GetSkillActivateAll},
	{"GetAllEquipReinforceLevel", bnd_LC_PlayerBase_GetAllEquipReinforceLevel},
	{"GetGMLevel", bnd_LC_PlayerBase_GetGMLevel},
	{NULL, NULL}
	};
	static int luaopen_LC_PlayerBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PlayerBase", "LC_ActorBase", lib_LC_PlayerBase, bnd_LuaDestroy_LC_PlayerBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientNetPlayer Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientNetPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientNetPlayer");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientNetPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientNetPlayer* h = (LC_ClientNetPlayer*) binder.CheckUserType(1, "LC_ClientNetPlayer");
		binder.CheckUserType(1, "LC_ClientNetPlayer");
		return 0;
	}
	static int bnd_LC_ClientNetPlayer_GetCurrentEquipItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCurrentEquipItem, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetGroupNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetGroupNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetPlatformVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetPlatformVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_IsPlatformYearVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::IsPlatformYearVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_IsPlatformVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::IsPlatformVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_IsPlatformHighVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::IsPlatformHighVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_IsMainNetPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::IsMainNetPlayer, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderCombate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderCombate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderMainID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderMainID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderUID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderUID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetRuneNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetRuneNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetRuneLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetRuneLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetEquipBuddyLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetEquipBuddyLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderPictureID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderPictureID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNetPlayer_GetCommanderHeadFrameID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNetPlayer* pkAPI = (LC_ClientNetPlayer*)binder.CheckUserType(1, "LC_ClientNetPlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientNetPlayer::GetCommanderHeadFrameID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientNetPlayer[] = {
	{"Create", bnd_LuaCreate_LC_ClientNetPlayer},
	{"GetCurrentEquipItem", bnd_LC_ClientNetPlayer_GetCurrentEquipItem},
	{"GetGroupNum", bnd_LC_ClientNetPlayer_GetGroupNum},
	{"GetPlatformVipLevel", bnd_LC_ClientNetPlayer_GetPlatformVipLevel},
	{"IsPlatformYearVip", bnd_LC_ClientNetPlayer_IsPlatformYearVip},
	{"IsPlatformVip", bnd_LC_ClientNetPlayer_IsPlatformVip},
	{"IsPlatformHighVip", bnd_LC_ClientNetPlayer_IsPlatformHighVip},
	{"GetCharName", bnd_LC_ClientNetPlayer_GetCharName},
	{"IsMainNetPlayer", bnd_LC_ClientNetPlayer_IsMainNetPlayer},
	{"GetCommanderName", bnd_LC_ClientNetPlayer_GetCommanderName},
	{"GetCommanderGuildName", bnd_LC_ClientNetPlayer_GetCommanderGuildName},
	{"GetCommanderLevel", bnd_LC_ClientNetPlayer_GetCommanderLevel},
	{"GetCommanderCombate", bnd_LC_ClientNetPlayer_GetCommanderCombate},
	{"GetCommanderMainID", bnd_LC_ClientNetPlayer_GetCommanderMainID},
	{"GetCommanderUID", bnd_LC_ClientNetPlayer_GetCommanderUID},
	{"GetRuneNum", bnd_LC_ClientNetPlayer_GetRuneNum},
	{"GetRuneLevel", bnd_LC_ClientNetPlayer_GetRuneLevel},
	{"GetEquipBuddyLevel", bnd_LC_ClientNetPlayer_GetEquipBuddyLevel},
	{"GetCommanderPictureID", bnd_LC_ClientNetPlayer_GetCommanderPictureID},
	{"GetCommanderHeadFrameID", bnd_LC_ClientNetPlayer_GetCommanderHeadFrameID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientNetPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientNetPlayer", "LC_PlayerBase", lib_LC_ClientNetPlayer, bnd_LuaDestroy_LC_ClientNetPlayer);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_NPCBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_NPCBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_NPCBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_NPCBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_NPCBase* h = (GameLogic::LC_NPCBase*) binder.CheckUserType(1, "LC_NPCBase");
		binder.CheckUserType(1, "LC_NPCBase");
		return 0;
	}
	static const luaL_reg lib_LC_NPCBase[] = {
	{"Create", bnd_LuaCreate_LC_NPCBase},
	{NULL, NULL}
	};
	static int luaopen_LC_NPCBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_NPCBase", "LC_ActorBase", lib_LC_NPCBase, bnd_LuaDestroy_LC_NPCBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientNPC Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientNPC");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientNPC* h = (LC_ClientNPC*) binder.CheckUserType(1, "LC_ClientNPC");
		binder.CheckUserType(1, "LC_ClientNPC");
		return 0;
	}
	static int bnd_LC_ClientNPC_LoadNPCFuncData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::LoadNPCFuncData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientNPC_ClearNPCFuncData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::ClearNPCFuncData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientNPC_GetNPCFuncDataCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCFuncDataCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetNPCFuncDataType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCFuncDataType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetNPCFuncDataID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCFuncDataID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetNPCFuncDataState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCFuncDataState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetNPCFuncIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCFuncIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetNPCUpgradeDes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetNPCUpgradeDes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_SetOwnerShip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::SetOwnerShip, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientNPC_GetOwnerShip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetOwnerShip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetConversationCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetConversationCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetConversationID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetConversationID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetBossShield(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetBossShield, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetBossMaxShield(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetBossMaxShield, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_SetBossShield(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::SetBossShield, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientNPC_SetBossMaxShield(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::SetBossMaxShield, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientNPC_GetHitPlayerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetHitPlayerName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetHitPlayerGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetHitPlayerGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientNPC_GetHitPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientNPC* pkAPI = (LC_ClientNPC*)binder.CheckUserType(1, "LC_ClientNPC");
		Utility::LuaCall(*pkAPI, &LC_ClientNPC::GetHitPlayerID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientNPC[] = {
	{"Create", bnd_LuaCreate_LC_ClientNPC},
	{"LoadNPCFuncData", bnd_LC_ClientNPC_LoadNPCFuncData},
	{"ClearNPCFuncData", bnd_LC_ClientNPC_ClearNPCFuncData},
	{"GetNPCFuncDataCount", bnd_LC_ClientNPC_GetNPCFuncDataCount},
	{"GetNPCFuncDataType", bnd_LC_ClientNPC_GetNPCFuncDataType},
	{"GetNPCFuncDataID", bnd_LC_ClientNPC_GetNPCFuncDataID},
	{"GetNPCFuncDataState", bnd_LC_ClientNPC_GetNPCFuncDataState},
	{"GetCharType", bnd_LC_ClientNPC_GetCharType},
	{"GetNPCFuncIndex", bnd_LC_ClientNPC_GetNPCFuncIndex},
	{"GetNPCUpgradeDes", bnd_LC_ClientNPC_GetNPCUpgradeDes},
	{"SetOwnerShip", bnd_LC_ClientNPC_SetOwnerShip},
	{"GetOwnerShip", bnd_LC_ClientNPC_GetOwnerShip},
	{"GetConversationCount", bnd_LC_ClientNPC_GetConversationCount},
	{"GetConversationID", bnd_LC_ClientNPC_GetConversationID},
	{"GetBossShield", bnd_LC_ClientNPC_GetBossShield},
	{"GetBossMaxShield", bnd_LC_ClientNPC_GetBossMaxShield},
	{"SetBossShield", bnd_LC_ClientNPC_SetBossShield},
	{"SetBossMaxShield", bnd_LC_ClientNPC_SetBossMaxShield},
	{"GetHitPlayerName", bnd_LC_ClientNPC_GetHitPlayerName},
	{"GetHitPlayerGuildID", bnd_LC_ClientNPC_GetHitPlayerGuildID},
	{"GetHitPlayerID", bnd_LC_ClientNPC_GetHitPlayerID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientNPC", "LC_NPCBase", lib_LC_ClientNPC, bnd_LuaDestroy_LC_ClientNPC);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGamePlayer Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGamePlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGamePlayer");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGamePlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGamePlayer* h = (LC_ClientGamePlayer*) binder.CheckUserType(1, "LC_ClientGamePlayer");
		binder.CheckUserType(1, "LC_ClientGamePlayer");
		return 0;
	}
	static int bnd_LC_ClientGamePlayer_GetMovePath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMovePath, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFlopManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFlopManager, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ShowMessage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ShowMessage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_WatchTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::WatchTarget, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetWatchTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetWatchTargetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetPreLockedTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPreLockedTargetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetUserID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUserID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetClientTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetClientTaskMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestUseItemInPackByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUseItemInPackByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestUsePatchItemInPackByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUsePatchItemInPackByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_MoveItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::MoveItemInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestMergeItemsInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestMergeItemsInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestTidyItemsInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTidyItemsInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestDestroyItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestDestroyItemInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestBuyGoodsFromNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuyGoodsFromNPC, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestPutIntoWarehouse(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestPutIntoWarehouse, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTakeOutFromWarehouse(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTakeOutFromWarehouse, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTakeOutFromTreasureBag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTakeOutFromTreasureBag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDecompositionSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDecompositionSetting, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkillBookAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillBookAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_PendingSkillInSkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PendingSkillInSkillAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckPendingSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckPendingSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckPendingSkillEx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckPendingSkillEx, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_WaitPendingSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::WaitPendingSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_WaitPendingSkillSuccess(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::WaitPendingSkillSuccess, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RecordLastSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RecordLastSkillID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqAcceptTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqAcceptTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqFinishTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqFinishTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqCancelTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqCancelTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeChapterReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeChapterReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeReachReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeReachReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ObtainRewardFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ObtainRewardFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetUnBindCashString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUnBindCashString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYuanBaoString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYuanBaoString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCouragePTString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCouragePTString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetJusticePTString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetJusticePTString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaPTString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaPTString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMonopolyPTString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMonopolyPTString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneCreamString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneCreamString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStarSoulString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStarSoulString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStarMoneyString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStarMoneyString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyExpMoneyString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyExpMoneyString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCourageString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCourageString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEnergyString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEnergyString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTrialString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTrialString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMagicCubeString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMagicCubeString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetActiveMeritString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveMeritString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRewardMedalString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRewardMedalString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyMeritString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyMeritString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildMeritString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildMeritString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetChapterHonourString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetChapterHonourString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBossJPString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBossJPString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetAccountPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAccountPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkinPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkinPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijituxiScoreString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijituxiScoreString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEntrustTaskPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEntrustTaskPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVehiclePointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVehiclePointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetPetPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPetPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBackWingPointString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBackWingPointString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaHonorPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaHonorPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLastSkyArenaPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLastSkyArenaPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetLastSkyArenaPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetLastSkyArenaPoint, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSkyArenaSeason(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaSeason, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaCloseTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaCloseTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaNxtTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaNxtTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuessGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuessGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetSkyArenaBattleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetSkyArenaBattleInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetActiveTimeShopInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveTimeShopInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_UpdateEntrustTaskState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::UpdateEntrustTaskState, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestCreatePlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestCreatePlayerGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestExitPlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestExitPlayerGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestJoinPlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestJoinPlayerGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestReliveLeaveTranscription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestReliveLeaveTranscription, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfrimGroupJoin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfrimGroupJoin, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfrimGroupJoinByPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfrimGroupJoinByPlayerID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestKickPlayerFromGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestKickPlayerFromGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestDismissPlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestDismissPlayerGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestInvitePlayerToGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestInvitePlayerToGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfirmInviteToGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfirmInviteToGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfirmBeInviteToGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfirmBeInviteToGroup, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfirmBeInviteToGroupByGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfirmBeInviteToGroupByGroupID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAppointmentCheif(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAppointmentCheif, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestClearCandidateList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestClearCandidateList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestClearInviteGroupList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestClearInviteGroupList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBlockPlayerJoin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBlockPlayerJoin, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestModifyQuality(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestModifyQuality, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestForbidJoin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestForbidJoin, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetBotProfit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetBotProfit, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetVipNewBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetVipNewBonus, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSyncInviteGroupMemberList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSyncInviteGroupMemberList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTeamHintFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTeamHintFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetTeamHintFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetTeamHintFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestConfirmReplyTrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfirmReplyTrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAddItemToTradePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAddItemToTradePack, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestRemoveItemFormTradePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRemoveItemFormTradePack, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestLockTradeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLockTradeData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUnLockTradeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUnLockTradeData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestInterruptTrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestInterruptTrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUpdateTradeCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUpdateTradeCash, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestFinishTrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestFinishTrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDeCompositionEquips(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDeCompositionEquips, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestExecuteSkillScript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestExecuteSkillScript, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetLastTradeRequesterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLastTradeRequesterID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvitePlayerGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvitePlayerGroup, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvitePlayerGroupCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvitePlayerGroupCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetForbidJoinFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetForbidJoinFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestConfirmSkillRespawn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestConfirmSkillRespawn, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestModifyPKSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestModifyPKSetting, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestPKValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestPKValue, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetChatTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetChatTargetID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetChatTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetChatTargetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetChatTargetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetChatTargetName, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetChatTargetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetChatTargetName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetChatChannel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetChatChannel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBossFirstKillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBossFirstKillInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsServerBossFirstKillRecorded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsServerBossFirstKillRecorded, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBossFirstKillRewardPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBossFirstKillRewardPlayerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBossKilledBySelf(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBossKilledBySelf, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestDrawFirstKillReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestDrawFirstKillReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAutoDecompositionItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAutoDecompositionItem, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsBossFirstKillRecorded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBossFirstKillRecorded, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetChatChannel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetChatChannel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SendChatMsg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendChatMsg, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SendFriendChatMsg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendFriendChatMsg, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsChapterOver(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsChapterOver, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqBiographyReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBiographyReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeFirstChargeReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeFirstChargeReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetChannelLimitFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetChannelLimitFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ConfirmChannelLimitFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ConfirmChannelLimitFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetForbidPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetForbidPlayerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetForbidPlayerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetForbidPlayerName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsForbidPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsForbidPlayer, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestRemoveForbidPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRemoveForbidPlayer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCompeteRewardCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCompeteRewardCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSubRewardCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubRewardCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestAddForbidPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAddForbidPlayer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSkillUpGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSkillUpGrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestLearnControllerSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLearnControllerSkill, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAutoUpgradeSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAutoUpgradeSkill, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsInCrossRealMapTeam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsInCrossRealMapTeam, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsInSpecialRaidMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsInSpecialRaidMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestDeactiveSkillState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestDeactiveSkillState, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCurrentEquipItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentEquipItem, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetIsNeedLockTradeTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetIsNeedLockTradeTarget, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsCurrentInTheArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCurrentInTheArea, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestNocticeTaskEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestNocticeTaskEvent, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUseItemTriggerTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUseItemTriggerTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_AddTempFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddTempFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_AddFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_AddEnemy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddEnemy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_AddBlackList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddBlackList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_DeleteTempFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::DeleteTempFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_DeleteFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::DeleteFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_DeleteEnemy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::DeleteEnemy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_DeleteBlackList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::DeleteBlackList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqFriendStatus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqFriendStatus, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqRecommendFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRecommendFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqAddAllRecommendFriends(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqAddAllRecommendFriends, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqFriendDetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqFriendDetail, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqPlayerInfoNearBy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqPlayerInfoNearBy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_AddFiendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddFiendNick, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SupportFiendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SupportFiendNick, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetFriendNick, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_CopyName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CopyName, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_CopyToClipBoard(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CopyToClipBoard, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqBeAddFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBeAddFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ConfirmBeAddFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ConfirmBeAddFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSocietyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSocietyAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFriendMsgBroad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFriendMsgBroad, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetViewPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetViewPlayerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFriendNick, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetWorldLevelAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetWorldLevelAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSecretTreasureAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSecretTreasureAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_AccurateSearch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AccurateSearch, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_PrivateChatSearch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PrivateChatSearch, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqChangeSocietyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqChangeSocietyInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ResetDetailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ResetDetailInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqActiveBot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqActiveBot, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqUpgradBot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUpgradBot, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsBuddyUpgradGiftOver(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyUpgradGiftOver, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyUpgradGiftCurrentDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyUpgradGiftCurrentDay, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyUpgradGiftDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyUpgradGiftDay, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqActiveBuddyUpgradGift(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqActiveBuddyUpgradGift, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetBuddyUpgradGift(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetBuddyUpgradGift, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyChargeDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyChargeDay, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyChargeDayLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyChargeDayLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsGetDailyChargeNormalReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsGetDailyChargeNormalReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsGetAllDailyChargeReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsGetAllDailyChargeReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyChargeShopBuyCountBuyItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyChargeShopBuyCountBuyItemID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqDailyChargeTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDailyChargeTime, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDailyChargeFreeReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDailyChargeFreeReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDailyChargeBuyReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDailyChargeBuyReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqUpgradCollection(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUpgradCollection, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqUpgradCollectionSuit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUpgradCollectionSuit, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetArriveFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArriveFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_NotInSamePath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::NotInSamePath, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSearchPathMiniMapX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSearchPathMiniMapX, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSearchPathMiniMapY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSearchPathMiniMapY, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestLeaveTranscription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLeaveTranscription, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestLeaveArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLeaveArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTransportAreaTransfer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTransportAreaTransfer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTransfer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTransfer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTransferBattlePlaybackMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTransferBattlePlaybackMap, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCareerSelectionNPCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCareerSelectionNPCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_MoveToFixedPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::MoveToFixedPos, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCurrentMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentMapCategoryType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentMapCategoryType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsInTranscription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsInTranscription, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetACTSubInfoByRankType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetACTSubInfoByRankType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTranscriptionInfoManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTranscriptionInfoManager, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGameStoryManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGameStoryManager, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentPing(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentPing, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetServerTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetServerTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetServerTimeVal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetServerTimeVal, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentFPS(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentFPS, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RecordUIOperations(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RecordUIOperations, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestNPCOwnerShip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestNPCOwnerShip, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetWaitingShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetWaitingShortcutKey, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetWaitingshortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetWaitingshortcutKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetIsSaveShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetIsSaveShortcutKey, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetIsSaveShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetIsSaveShortcutKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSaveShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSaveShortcutKey, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_OnEnterPhaseMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::OnEnterPhaseMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_PathToPointLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PathToPointLocation, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetClientProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetClientProduction, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsNeedUnBindCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsNeedUnBindCash, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_StopCurrentNPCSound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::StopCurrentNPCSound, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetUnBindYuanBaoString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUnBindYuanBaoString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ExecuteNPCFuction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ExecuteNPCFuction, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestLeavePrison(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLeavePrison, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestReducePKValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestReducePKValue, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsBindCrashEnough(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBindCrashEnough, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SendRequestInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestRaidBossSpeciesRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestRaidBossSpeciesRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestPlayerBuddyRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestPlayerBuddyRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBuddyRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuddyRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestToyPetRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestToyPetRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSubRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSubRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestRankTopnPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRankTopnPlayerInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBuddyRankIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuddyRankIndex, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequsetArenaGiftState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequsetArenaGiftState, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequsetArenaRankList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequsetArenaRankList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestCommitAnswer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestCommitAnswer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestAnswerRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestAnswerRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestYiJiTuXiRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestYiJiTuXiRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRaidBossSpeciesRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossSpeciesRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidBossSpeciesMyDamageCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossSpeciesMyDamageCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidBossSpeciesMyRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossSpeciesMyRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetRaidBossSpeciesRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetRaidBossSpeciesRecord, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqRaidBossSpeciesDamageData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRaidBossSpeciesDamageData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqRaidBossSpeciesDamageDataDetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRaidBossSpeciesDamageDataDetail, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTestDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTestDataBase, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SendRequestInfoByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestInfoByType, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_EquipAdvanceReq(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::EquipAdvanceReq, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_CimeliaEquipAdvanceReq(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CimeliaEquipAdvanceReq, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestSameLocationDifLine(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestSameLocationDifLine, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestInfoByTypeWithStringPram(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestInfoByTypeWithStringPram, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendConfirmRequestInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendConfirmRequestInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SendRequestExpandWarehouse(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SendRequestExpandWarehouse, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetReducePkReqCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetReducePkReqCash, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTotalReforeLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTotalReforeLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetReucePkResultValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetReucePkResultValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckRecvLuckAward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckRecvLuckAward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestRecvLuckAward (lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRecvLuckAward , L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_StartFollowTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::StartFollowTarget, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_StopFollowTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::StopFollowTarget, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsHookArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsHookArea, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ResponseFromLuaAfterMapChanged(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ResponseFromLuaAfterMapChanged, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestGuildTransport(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGuildTransport, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ClickGuildTransportIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ClickGuildTransportIcon, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_QuickPick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::QuickPick, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_FastPick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::FastPick, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInFovNetPlayerIDs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInFovNetPlayerIDs, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CallFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CallFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqReturnToCity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqReturnToCity, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_DecompositionEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::DecompositionEquip, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestEnhanceEquipmentInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestEnhanceEquipmentInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_HasMapCategoryArrived(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::HasMapCategoryArrived, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestAutoUpgradeCimelia(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAutoUpgradeCimelia, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetIsAutoUpgradeCimelia(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetIsAutoUpgradeCimelia, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckUpgrade, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaNeedLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetItemListValueCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetItemListValueCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCanCostItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCanCostItemCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetItemSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetItemSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestUpgradeMiji(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUpgradeMiji, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUpgradeCimelia(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUpgradeCimelia, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestChangeTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestChangeTransform, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBless(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBless, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTransformCimelia(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTransformCimelia, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCurrentCimeliaRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentCimeliaRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentCimeliaAttriLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentCimeliaAttriLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaOriginCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaOriginCharTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaAttribute, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaAttributeList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaAttributeList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaAttributeByRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaAttributeByRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaUpgradeItemString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaUpgradeItemString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaDisPlayLevelInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaDisPlayLevelInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentVehicleSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentVehicleSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetIsAutoUpgradeSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetIsAutoUpgradeSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetNpcTalkUIPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNpcTalkUIPos, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestAgreeAddToEnermy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAgreeAddToEnermy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetAssistInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetAssistInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTransferToLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTransferToLocation, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestMemberAutoAdd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestMemberAutoAdd, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUnSocketItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUnSocketItemInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleDailyRanking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleDailyRanking, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleDailyRewardValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleDailyRewardValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleCurRanking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleCurRanking, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleTopRanking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleTopRanking, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleWinStreak(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleWinStreak, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleChallengeTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleChallengeTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleChallengeTimesStr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleChallengeTimesStr, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleLocalChallengedTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleLocalChallengedTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleBuyCountCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleBuyCountCost, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleDailyBuyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleDailyBuyCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLocalDailyChallengeMaxTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLocalDailyChallengeMaxTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetArenaBattleChallengeInfoAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetArenaBattleChallengeInfoAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CanAddGood(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CanAddGood, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLeftAddGoodCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLeftAddGoodCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestUnbinItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUnbinItemInPackage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestEnhanceEquipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestEnhanceEquipLevel, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestEnhanceEquipStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestEnhanceEquipStar, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestReinforceEquipSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestReinforceEquipSlot, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCommanderAllEquipCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderAllEquipCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEquipSlotLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEquipSlotLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEquipSlotStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEquipSlotStar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_PlayCommanderLevelupFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PlayCommanderLevelupFx, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_PlayTaskFinishFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PlayTaskFinishFx, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestFireTimer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestFireTimer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCommanderLotteryCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderLotteryCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderMaxRuneStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderMaxRuneStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderMaxRuneLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderMaxRuneLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetSingleCombatRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetSingleCombatRank, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSingleCombatRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSingleCombatRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetSingleCombatDamage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetSingleCombatDamage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSingleCombatDamage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSingleCombatDamage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidBossDropTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossDropTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqSetRedPointFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetRedPointFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRedPointFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRedPointFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidBossDropNextRevertTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossDropNextRevertTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidBossDropEndRevertTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidBossDropEndRevertTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetHookRespawnFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetHookRespawnFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetBuddyActivateScheme(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetBuddyActivateScheme, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetSpecialMapInitBuddyActivateScheme(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetSpecialMapInitBuddyActivateScheme, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqBattleRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBattleRecord, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqBattleRecordDetaiil(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBattleRecordDetaiil, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBattleRecordTotalNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBattleRecordTotalNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBattleRecordInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBattleRecordInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetPeakDuelBattleRecordInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPeakDuelBattleRecordInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsDetailNeedRequest(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsDetailNeedRequest, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddySchemeCidByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddySchemeCidByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsHooking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsHooking, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetHooking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetHooking, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ResetHooking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ResetHooking, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetHookingParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetHookingParam, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetHookingParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetHookingParam, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SynHookingSettingToServer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SynHookingSettingToServer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetRaidHookingFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetRaidHookingFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetPathtoTreasureFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetPathtoTreasureFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetPathtoTreasureFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPathtoTreasureFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetRaidStageHookAssist(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetRaidStageHookAssist, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTmpSummorPool(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTmpSummorPool, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetTmpSummorPool(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetTmpSummorPool, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTmpSummorCurCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTmpSummorCurCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetWildBossPageByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetWildBossPageByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGamestoryIDByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGamestoryIDByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ClearTmpSummorPool(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ClearTmpSummorPool, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestGetGiftDaily(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetGiftDaily, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestGetGfitOneOff(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetGfitOneOff, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSummoredPlayerData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSummoredPlayerData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSignInToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSignInToday, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestReSignIn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestReSignIn, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestGetSignInReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetSignInReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGameStoryIdByMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGameStoryIdByMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTeamMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTeamMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInviteTeamMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInviteTeamMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestVIPReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestVIPReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetFriendOffLineTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFriendOffLineTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetForbbidenKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetForbbidenKey, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetPVPTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPVPTargetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDaylyTaskKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDaylyTaskKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetDaylyTaskKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetDaylyTaskKillCount, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetPlayerDetailInfoByUserID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPlayerDetailInfoByUserID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestPlayerDetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestPlayerDetail, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildWarData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildWarData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetWorld2PtCurrentLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetWorld2PtCurrentLocation, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetReturnCityName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetReturnCityName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCanDrawRewardsNumberOfGuildWar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCanDrawRewardsNumberOfGuildWar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVIPFDepositDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVIPFDepositDataEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetInitAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetInitAttribute, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsDailyRechargeRewardedToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsDailyRechargeRewardedToday, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsRechargeToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsRechargeToday, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRegistTimeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRegistTimeInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRegDays(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRegDays, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyRechargeMaxNotDrawedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyRechargeMaxNotDrawedLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestRefineItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRefineItemInPackage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestApplyRefineItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestApplyRefineItem, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestModifyName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestModifyName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsRegistThisMonth(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsRegistThisMonth, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOpenAbilityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOpenAbilityManager, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestCommonReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestCommonReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestCommonBaseReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestCommonBaseReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestActivityCommonOp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestActivityCommonOp, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestActivityCommonOpEx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestActivityCommonOpEx, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestGetRankSubBInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetRankSubBInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUseActivationCode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUseActivationCode, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestShotActivityInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestShotActivityInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetStatRewardDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStatRewardDataEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestGetNearbyPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetNearbyPlayerInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetNearbyPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNearbyPlayerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RefreshShowEnemyPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RefreshShowEnemyPlayer, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsTeamMate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsTeamMate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RemoveEnemyPlayerByIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RemoveEnemyPlayerByIdx, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_AutoAttackTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AutoAttackTarget, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqMapNpcCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqMapNpcCount, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetNpcCountByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNpcCountByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsTaskFinished(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsTaskFinished, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsTaskCanFinish(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsTaskCanFinish, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetShowEnemyPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetShowEnemyPlayer, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestTreasureDerive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTreasureDerive, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestTreasureLog(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestTreasureLog, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSecretTreasure(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSecretTreasure, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSmelter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSmelter, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequeseStarRuneOperation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequeseStarRuneOperation, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsItemGem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsItemGem, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsEquipBetter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsEquipBetter, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestEnterCrossMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestEnterCrossMap, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildTransportStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildTransportStamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_AddToCanStartList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::AddToCanStartList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_CheckAddGood(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckAddGood, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCanGoodCountStr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCanGoodCountStr, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGameStoryScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGameStoryScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_PendingPathToLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall<LC_ClientGamePlayer, void, int, int , int, int, int>(*pkAPI, &LC_ClientGamePlayer::PendingPathToLocation, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGamePlayer_PendingPathToVal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PendingPathToVal, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBuyVigor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuyVigor, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRankByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRankByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetCrossRealMapTeamID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetCrossRealMapTeamID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetCrossRealTeamMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetCrossRealTeamMapID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCrossRealTeamMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCrossRealTeamMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsPurchaseBackOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsPurchaseBackOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommonStatCostMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommonStatCostMoney, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetUseSkillBookSlotIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUseSkillBookSlotIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkillBookCateGory2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillBookCateGory2, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestActiveSkillBook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestActiveSkillBook, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUnlockSkillBook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUnlockSkillBook, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestWearSkillBook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestWearSkillBook, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSkillBookSlotSkillBookId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillBookSlotSkillBookId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkillBookSlotActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillBookSlotActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFirstEmptySkillBookSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFirstEmptySkillBookSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_NeedRefreshTitleList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::NeedRefreshTitleList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestUseItemInPackByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUseItemInPackByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsFindingPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsFindingPath, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ClearPkDebuffID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ClearPkDebuffID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSubordinateAttrPlusValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubordinateAttrPlusValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSubordinateAttrPlusPercent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubordinateAttrPlusPercent, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_Reset2Guding(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::Reset2Guding, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_Enable2Guding(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::Enable2Guding, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_StartGuide(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::StartGuide, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetTutorialStop(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetTutorialStop, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetIsDoingOtherTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetIsDoingOtherTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetAutoTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAutoTaskType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetAutoTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetAutoTaskType, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRankInfoDataString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRankInfoDataString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetPendingObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetPendingObject, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsSafeArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsSafeArea, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetPlatformVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPlatformVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsPlatformYearVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsPlatformYearVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsPlatformVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsPlatformVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsPlatformHighVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsPlatformHighVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetPlatformFormatVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetPlatformFormatVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDailyCleanValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyCleanValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTimeStampFromCurrent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTimeStampFromCurrent, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvestmentPlanTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvestmentPlanTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvestmentPlanScheduleID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvestmentPlanScheduleID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEndOfDayTimeStampFromCurrent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEndOfDayTimeStampFromCurrent, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetIsCanStartTutorialFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetIsCanStartTutorialFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAlliance, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAlliance, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTalismanUpgradeNeeedLiveness(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTalismanUpgradeNeeedLiveness, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_StopGuide(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::StopGuide, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCimeliaAttribPlusInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaAttribPlusInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaTransformAttribInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaTransformAttribInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaDrugInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaDrugInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaTransformInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaTransformInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCimeliaNamePic(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaNamePic, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsTransformActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsTransformActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetServerOpenTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetServerOpenTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetServerConflateTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetServerConflateTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetastOffLineTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetastOffLineTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneBuddySlotOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneBuddySlotOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneSubSlotOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneSubSlotOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetAutoIntelligentTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetAutoIntelligentTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetAutoIntelligentTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAutoIntelligentTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLotteryConsumeUnbindyuanbao(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLotteryConsumeUnbindyuanbao, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetClientSoulRefineAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetClientSoulRefineAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CanCreateGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CanCreateGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqUseActivationCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUseActivationCount, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetUseActivationCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUseActivationCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetHolydeedUserCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetHolydeedUserCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvestmentTypeHasBuy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvestmentTypeHasBuy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestBuyInvesmentCard(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuyInvesmentCard, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestRefreshRewardTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRefreshRewardTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBuddyChainCid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyChainCid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyInChain(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyInChain, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsChainFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsChainFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqAddBuddyChain(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqAddBuddyChain, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDelBuddyChain(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDelBuddyChain, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetChainFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetChainFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAddInvesmentCardReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAddInvesmentCardReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetInvestmentFreeRewardReceive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvestmentFreeRewardReceive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetInvestmentHighRewardReceive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetInvestmentHighRewardReceive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetClientActivityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetClientActivityAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqPeakArenaAchieveInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqPeakArenaAchieveInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqPeakArenaLadderInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqPeakArenaLadderInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqDrawArenaSectionReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDrawArenaSectionReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetAcceptEntrustTasks(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAcceptEntrustTasks, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetAcceptEntrustTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAcceptEntrustTaskInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCanAcceptEntrustTasks(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCanAcceptEntrustTasks, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEntrustTaskRefreshNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEntrustTaskRefreshNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsRuneEntrusted(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsRuneEntrusted, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyEntrusted(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyEntrusted, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_HasHighStarLevelTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::HasHighStarLevelTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqRefreshEntrustTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRefreshEntrustTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqEntrustTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqEntrustTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeEntrustTaskReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeEntrustTaskReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqFinishEntrustTaskImmediately(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqFinishEntrustTaskImmediately, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetDailyActivityString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyActivityString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestGetDailyActivity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetDailyActivity, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetDailyActivity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDailyActivity, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSoulOperation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSoulOperation, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqActivateActiveBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqActivateActiveBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqActivateInactiveBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqActivateInactiveBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqUnlockBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUnlockBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqRespawnBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRespawnBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqDeactivateBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqDeactivateBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentActiveBuddyIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentActiveBuddyIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyActiveCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyActiveCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyInactiveCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyInactiveCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyInactiveUnlock(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyInactiveUnlock, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyUnlock(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyUnlock, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTotalBuddyNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTotalBuddyNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetAddEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAddEquipScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyAllEquipReinforceLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyAllEquipReinforceLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetActiveBuddyListSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveBuddyListSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddySkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddySkillAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyAttributeMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyAttributeAppendMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyAttributeAppendMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEXP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEquipSuitLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEquipSuitLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEquipScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEquipEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEquipEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsExistSubEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsExistSubEquip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyEquipEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyEquipEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderUID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderUID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTotalScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderAttributeMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderChainAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderChainAttributeMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderGetRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderGetRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderBaseAttributeScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderBaseAttributeScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderChainScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderChainScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTitleCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTitleCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOwnerCurrentMP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOwnerCurrentMP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOwnerMaxMP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOwnerMaxMP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOwnerTaskHonorPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOwnerTaskHonorPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOwnerMainTaskFinishCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOwnerMainTaskFinishCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqRefreshConvoy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRefreshConvoy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetEscortUsedCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEscortUsedCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRobbingUsedCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRobbingUsedCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEscortState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEscortState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqTakeEscortReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeEscortReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetEscortLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEscortLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_UpdateEscortLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::UpdateEscortLevel, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBiaocheState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBiaocheState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEscortTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEscortTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsGoodsEscortTaskProcessing(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsGoodsEscortTaskProcessing, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTitleFrameID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTitleFrameID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMainControllerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMainControllerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyActiveUpgradGift(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyActiveUpgradGift, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqUpgradeBuddyStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUpgradeBuddyStar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyUpgradeQuality(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyUpgradeQuality, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyUpgradeUnlockskill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyUpgradeUnlockskill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyEXP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSchemeCid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSchemeCid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSchemeSwitch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSchemeSwitch, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSchemeModify(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSchemeModify, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetRankTransferState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetRankTransferState, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUpgradeBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUpgradeBuddy, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBuddyCombateScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyCombateScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyEquipShowLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyEquipShowLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyShowRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyShowRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEquipReinforceLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEquipReinforceLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEquipRefineLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEquipRefineLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderEquipModingSpiritLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderEquipModingSpiritLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSetEquipShowLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetEquipShowLevel, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetCommanderEquipSuitLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetCommanderEquipSuitLevel, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSubModingSpirit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSubModingSpirit, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSubEquipMoldingAttribValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubEquipMoldingAttribValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSubEquipSuitMoldingAttribValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubEquipSuitMoldingAttribValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSubEquipSuitMoldingAttribPercent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSubEquipSuitMoldingAttribPercent, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentTransform, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyTransformActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyTransformActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTransformInvaildTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTransformInvaildTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetActiveBuddyAllScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveBuddyAllScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildRewardIsValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildRewardIsValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOpenBagRemainSeconds(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOpenBagRemainSeconds, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetUnlockSlotNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUnlockSlotNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetUnlockSlotInit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetUnlockSlotInit, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkillUnlockLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkillUnlockLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyInstance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyInstance, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRestSwapCoolDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRestSwapCoolDown, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRestRespawnCoolDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRestRespawnCoolDown, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMaxSwapCD(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMaxSwapCD, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsBuddyDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsBuddyDead, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsAllBuddyDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsAllBuddyDead, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyObjectID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyObjectID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyPlayerBasePtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyPlayerBasePtr, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckBuddyActivateSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckBuddyActivateSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestAchievementReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAchievementReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestAchievementPointReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestAchievementPointReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSevenDaysAchievementPointReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSevenDaysAchievementPointReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetAtvChargeRedPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetAtvChargeRedPoint, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetAtvChargeRedPointState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAtvChargeRedPointState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsFinishedAchievement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsFinishedAchievement, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestActiveStarVein(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestActiveStarVein, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestGetStarVeinGoalReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestGetStarVeinGoalReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetActiveStarVeinIds(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveStarVeinIds, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetActiveStarVeinGoalIds(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetActiveStarVeinGoalIds, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStarVeinScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStarVeinScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddySkillUsableCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddySkillUsableCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddySkillMaxUsableCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddySkillMaxUsableCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_PlayBossWarningFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PlayBossWarningFx, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestEquipRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestEquipRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetCimeliaGainNew(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetCimeliaGainNew, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCimeliaGainNew(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCimeliaGainNew, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestOnekeyEquipRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestOnekeyEquipRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestUnEquipRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestUnEquipRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestOnekeyUnEquipRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestOnekeyUnEquipRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestLevelUpRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestLevelUpRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestStarUpRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestStarUpRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestResetUpRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestResetUpRune, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestRuneReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestRuneReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRuneEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall<LC_ClientGamePlayer, LC_BackPackEntry*, int,int>(*pkAPI ,&LC_ClientGamePlayer::GetRuneEntry , L , 2);
		return 1;
	}		
	static int bnd_LC_ClientGamePlayer_GetRuneRewardDrawed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneRewardDrawed, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneRewardPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneRewardPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneRecordCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneRecordCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRuneBuddySlotDressState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRuneBuddySlotDressState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqTakeVipNewReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeVipNewReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVipNewLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVipNewLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTitleLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTitleLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTitleOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTitleOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSpecialTrainingLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSpecialTrainingLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSpecialTrainingMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSpecialTrainingMaxLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderTitleCurInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderTitleCurInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBattleTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleTaskInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBattleTaskTabNames(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleTaskTabNames, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsThemeACTRaidBossRewardToken(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsThemeACTRaidBossRewardToken, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqThemeACTRaidBossRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqThemeACTRaidBossRewardInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqThemeACTAutoExchange(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqThemeACTAutoExchange, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqThemeACTADAutoShow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqThemeACTADAutoShow, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsThemeACTRaidBossPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsThemeACTRaidBossPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqThemeACTRaidBossPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqThemeACTRaidBossPrompt, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsGuildBattleTaskRewardToken(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsGuildBattleTaskRewardToken, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsGuildBattleTaskPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsGuildBattleTaskPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetThemeActivityTasks(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetThemeActivityTasks, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsThemeActivityTasksPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsThemeActivityTasksPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetThemeActivityRaidTasksInfos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetThemeActivityRaidTasksInfos, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTotalVipNewBonusPercentIncrease(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTotalVipNewBonusPercentIncrease, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVipPriviligeAddTimesByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVipPriviligeAddTimesByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSpecialTrainingTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSpecialTrainingTaskInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqTakeSpecialTrainingReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeSpecialTrainingReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeCommanderTitleUpgradeReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeCommanderTitleUpgradeReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetRaidGloryTotalStarNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryTotalStarNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryPointRecoverNextTimestamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryPointRecoverNextTimestamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryPointRecoverEndTimestamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryPointRecoverEndTimestamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryChapterStarNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryChapterStarNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetQuickRaidGloryCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetQuickRaidGloryCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_HasNotTakeReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::HasNotTakeReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetYijiTuxiStageReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetYijiTuxiStageReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetYijiXunbaoStageReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetYijiXunbaoStageReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetToyIslandStageReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetToyIslandStageReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetRotaryTableReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetRotaryTableReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetRotaryTableAnimation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetRotaryTableAnimation, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetSubValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetSubValue, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBestGuildFinishedTaskNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBestGuildFinishedTaskNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetChargedToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetChargedToday, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkipAnimSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkipAnimSetting, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRotaryRewardIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRotaryRewardIdx, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRotaryRewardRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRotaryRewardRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRotaryRewardValidTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRotaryRewardValidTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRotaryEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRotaryEndTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiTuxiKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiTuxiKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiXunbaoKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiXunbaoKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetToyIslandKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetToyIslandKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiTuxiRewardStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiTuxiRewardStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiTuxiMaxStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiTuxiMaxStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiXunbaoRewardStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiXunbaoRewardStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetYijiXunbaoMaxStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetYijiXunbaoMaxStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetToyIslandRewardStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetToyIslandRewardStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetToyIslandMaxStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetToyIslandMaxStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryChapterRewardRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryChapterRewardRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryHighestMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryHighestMap, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqReceiveGloryDailyReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqReceiveGloryDailyReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGloryDailRewardDrawed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGloryDailRewardDrawed, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryCurDailyReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryCurDailyReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRaidGloryMyMissionIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRaidGloryMyMissionIdx, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqQuickRaidNew(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqQuickRaidNew, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetChapterRaidStarReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetChapterRaidStarReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsVipNewRewardToken(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsVipNewRewardToken, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVipNewTaskState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVipNewTaskState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsVipNewOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsVipNewOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_HasNottakenVipNewReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::HasNottakenVipNewReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSevenDaysActivityEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSevenDaysActivityEndTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSevenDaysRewardEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSevenDaysRewardEndTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOfferTaskRefreshTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOfferTaskRefreshTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOfferTaskAcceptTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOfferTaskAcceptTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFirstDayLoginRewardTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFirstDayLoginRewardTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCollectBossJPCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCollectBossJPCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderActiviteFrameCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderActiviteFrameCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetNewCommanderActiviteFrameCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNewCommanderActiviteFrameCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCommanderActiviteHeadCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCommanderActiviteHeadCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetNewCommanderActiviteHeadCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNewCommanderActiviteHeadCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCommanderFrameNew(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCommanderFrameNew, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCommanderFrameActivite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCommanderFrameActivite, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCommanderHeadNew(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCommanderHeadNew, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestSetCommanderFrameFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetCommanderFrameFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetCommanderHeadFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetCommanderHeadFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetCommanderFrame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetCommanderFrame, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetCommanderHead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetCommanderHead, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestBuddyCombatComposition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestBuddyCombatComposition, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RequestSetBuddyTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestSetBuddyTransform, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBuddyCombatCommanderScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyCombatCommanderScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyCombatChainScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyCombatChainScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuddyRuneSkillCombatScoreBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuddyRuneSkillCombatScoreBonus, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_RequestPlayerPKInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RequestPlayerPKInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCombatPKMyProgress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCombatPKMyProgress, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCombatCompareMyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCombatCompareMyInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCombatCompareOtherInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCombatCompareOtherInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqBuyRareSubDevaEyeTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBuyRareSubDevaEyeTransform, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_CheckRareSubState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckRareSubState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqBestGuildRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBestGuildRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBestGuildGoalRecordProgress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBestGuildGoalRecordProgress, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBestGuildGoalRecordPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBestGuildGoalRecordPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGuildBattleFightRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBattleFightRecord, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildBattleBeDefightedFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBattleBeDefightedFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqBestGuildFinishReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBestGuildFinishReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildBattleBossState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleBossState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBattleTowerState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleTowerState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBattleFortressState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleFortressState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBattleRoyalState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBattleRoyalState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGuildBattleTowerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBattleTowerInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildBattleDemageRankList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBattleDemageRankList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqReealtimeCombatRecorder(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqReealtimeCombatRecorder, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GuildBattlePathtoAction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GuildBattlePathtoAction, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_PendingPathAttack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::PendingPathAttack, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildRankChallenge(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildRankChallenge, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildFightRobScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildFightRobScore, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildFightRobScoreReceive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildFightRobScoreReceive, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildFightMemberUIDs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildFightMemberUIDs, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildFightPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildFightPlayerInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBestGuildMapBossInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBestGuildMapBossInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_BestGuildConvertWorldPosToMapPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::BestGuildConvertWorldPosToMapPos, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_BestGuildConvertMapPoTosWorldPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::BestGuildConvertMapPoTosWorldPos, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBestGuildPlayerLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBestGuildPlayerLocation, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqRaidBossPublicKillerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqRaidBossPublicKillerInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqTakeTaskExtraReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTakeTaskExtraReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTaskExtraReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTaskExtraReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRegularBossGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRegularBossGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRegularBossGroupCDTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRegularBossGroupCDTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBossKillerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBossKillerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentLineNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentLineNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFinishMainTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFinishMainTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCurrentSkillTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCurrentSkillTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetResourceRetrieve(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetResourceRetrieve, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqCmdEquipSuitCollectReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqCmdEquipSuitCollectReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCmdEquipSuitCollectState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectItemState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCmdEquipSuitCollectItemState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectRewardStateInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCmdEquipSuitCollectRewardStateInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCmdEquipSuitCollectLevelPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCmdEquipSuitCollectLevelPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCmdEquipSuitCollectPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCmdEquipSuitCollectPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqResourceRetrieveReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqResourceRetrieveReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetResourceRetrieveRecordInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetResourceRetrievePrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetResourceRetrievePrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordCommanderLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetResourceRetrieveRecordCommanderLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetResourceRetrieveRecordMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetFirstChargeTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetFirstChargeTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsFirstChargeRewardToken(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsFirstChargeRewardToken, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqVipQuickHook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqVipQuickHook, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetVipQuickHookReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVipQuickHookReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetVipQuickHookTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetVipQuickHookTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetDrawCumulateReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetDrawCumulateReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetNewAchievementStarNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNewAchievementStarNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetNewAchievementRewardCord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetNewAchievementRewardCord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqNewAchievementReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqNewAchievementReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSetGuildProfitHideName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetGuildProfitHideName, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetGuildProfitReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetGuildProfitReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetGuildProfitRewardOnKeyReceive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetGuildProfitRewardOnKeyReceive, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildProfitShowName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitShowName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildProfitLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildProfitLevelExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitLevelExp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildProfitCrystalLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitCrystalLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildProfitCrystalLevelExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitCrystalLevelExp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetGuildCrystalReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetGuildCrystalReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildProfitCrystalNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitCrystalNumber, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildProfitCrystalMinInvaildTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildProfitCrystalMinInvaildTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBossActivityState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBossActivityState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGuildBossActivityRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBossActivityRank, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGuildBossActivityQuit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBossActivityQuit, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildBossActivityPreMapFinish(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBossActivityPreMapFinish, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBossActivityOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBossActivityOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGuildBossActivityOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGuildBossActivityOpen, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildBossActivityRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBossActivityRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGuildBossActivityMyRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildBossActivityMyRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetTreasurePos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetTreasurePos, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTreasurePosInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTreasurePosInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_IsCanDigTreasure(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsCanDigTreasure, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_CheckTreasureEvents(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::CheckTreasureEvents, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGameRestartReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGameRestartReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqLotteryDraw(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqLotteryDraw, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqLotteryExtraReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqLotteryExtraReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqChargeProfitReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqChargeProfitReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqEquipCommanderEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqEquipCommanderEquip, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqCommanderEquipIntensify(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqCommanderEquipIntensify, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqCommanderEquipRefine(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqCommanderEquipRefine, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqCommanderEquipSoul(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqCommanderEquipSoul, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqUnEquipSubEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqUnEquipSubEquip, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqAddNoviceTutorial(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqAddNoviceTutorial, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTutorialProgress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTutorialProgress, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetBuyNoPayReturn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetBuyNoPayReturn, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqBuyNoPayItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBuyNoPayItem, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBuyNoPayResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuyNoPayResult, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetNoviceTutorialReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetNoviceTutorialReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_IsAchievedReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::IsAchievedReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqSkyArenaGradeAward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSkyArenaGradeAward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSkyArenaMyScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSkyArenaMyScore, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSkyArenaCheckBattleStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSkyArenaCheckBattleStage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_RewardIsAchieved(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::RewardIsAchieved, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaMaxPoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaMaxPoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaGroupStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaGroupStage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaMyGroupStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaMyGroupStage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaAgainstList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaAgainstList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaGroupStageEntryList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaGroupStageEntryList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetSeasonStartTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSeasonStartTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetCanEnterSummitArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetCanEnterSummitArena, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStageType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStageType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetShowTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetShowTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStageTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStageTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBattleTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBattleTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStageEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStageEndTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetStageSetTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetStageSetTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetBattleTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetBattleTime, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetShowTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetShowTime, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBattleTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBattleTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetShowTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetShowTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetOwnRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetOwnRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMyTopType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMyTopType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTotalGroupId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTotalGroupId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEveryGroupData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEveryGroupData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMyGroupData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMyGroupData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetEntryListData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetEntryListData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetAgainstData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetAgainstData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqBonFirePartyLeftBuyItemTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBonFirePartyLeftBuyItemTimes, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqBonFirePartyBuyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqBonFirePartyBuyInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetLeftTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLeftTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetBuyTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBuyTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetIsSwitich(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetIsSwitich, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetIsSwitich(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetIsSwitich, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqTranscribeFightByUID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqTranscribeFightByUID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqSetMapBossFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetMapBossFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetBossFlagList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetBossFlagList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetMapEnterRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetMapEnterRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqAddCanEnterMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqAddCanEnterMapID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGamestoryBatch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGamestoryBatch, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetPlayerSchemeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetPlayerSchemeData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetRankInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetSummitSingleData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetSummitSingleData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuessBaseData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuessBaseData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqSetSummitGuessInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSetSummitGuessInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetSummitSupportInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetSummitSupportInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuessLogDataByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuessLogDataByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLogSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLogSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetSummitWinner(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetSummitWinner, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_SetGuessLog(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetGuessLog, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqSummitArenaHonor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqSummitArenaHonor, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_ReqGetMyTopHonor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetMyTopHonor, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetTopPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTopPlayerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetLogMaxIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetLogMaxIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaSettleReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaSettleReward, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetSkyArenaSettleReportList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetSkyArenaSettleReportList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetZoneId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetZoneId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTopErr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTopErr, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_GetTopPlayersSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetTopPlayersSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_SetNotifyInGameFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::SetNotifyInGameFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGamePlayer_GetGuildDamageRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::GetGuildDamageRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGamePlayer_ReqGetGuildDamageRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGamePlayer* pkAPI = (LC_ClientGamePlayer*)binder.CheckUserType(1, "LC_ClientGamePlayer");
		Utility::LuaCall(*pkAPI, &LC_ClientGamePlayer::ReqGetGuildDamageRank, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ClientGamePlayer[] = {
	{"Create", bnd_LuaCreate_LC_ClientGamePlayer},
	{"GetMovePath", bnd_LC_ClientGamePlayer_GetMovePath},
	{"GetFlopManager", bnd_LC_ClientGamePlayer_GetFlopManager},
	{"ShowMessage", bnd_LC_ClientGamePlayer_ShowMessage},
	{"WatchTarget", bnd_LC_ClientGamePlayer_WatchTarget},
	{"GetWatchTargetID", bnd_LC_ClientGamePlayer_GetWatchTargetID},
	{"GetPreLockedTargetID", bnd_LC_ClientGamePlayer_GetPreLockedTargetID},
	{"GetUserID", bnd_LC_ClientGamePlayer_GetUserID},
	{"GetCharName", bnd_LC_ClientGamePlayer_GetCharName},
	{"GetClientTaskMap", bnd_LC_ClientGamePlayer_GetClientTaskMap},
	{"RequestUseItemInPackByIndex", bnd_LC_ClientGamePlayer_RequestUseItemInPackByIndex},
	{"RequestUsePatchItemInPackByIndex", bnd_LC_ClientGamePlayer_RequestUsePatchItemInPackByIndex},
	{"MoveItemInPackage", bnd_LC_ClientGamePlayer_MoveItemInPackage},
	{"RequestMergeItemsInPackage", bnd_LC_ClientGamePlayer_RequestMergeItemsInPackage},
	{"RequestTidyItemsInPackage", bnd_LC_ClientGamePlayer_RequestTidyItemsInPackage},
	{"RequestDestroyItemInPackage", bnd_LC_ClientGamePlayer_RequestDestroyItemInPackage},
	{"RequestBuyGoodsFromNPC", bnd_LC_ClientGamePlayer_RequestBuyGoodsFromNPC},
	{"RequestPutIntoWarehouse", bnd_LC_ClientGamePlayer_RequestPutIntoWarehouse},
	{"RequestTakeOutFromWarehouse", bnd_LC_ClientGamePlayer_RequestTakeOutFromWarehouse},
	{"RequestTakeOutFromTreasureBag", bnd_LC_ClientGamePlayer_RequestTakeOutFromTreasureBag},
	{"ReqDecompositionSetting", bnd_LC_ClientGamePlayer_ReqDecompositionSetting},
	{"GetSkillAsset", bnd_LC_ClientGamePlayer_GetSkillAsset},
	{"GetSkillBookAsset", bnd_LC_ClientGamePlayer_GetSkillBookAsset},
	{"PendingSkillInSkillAsset", bnd_LC_ClientGamePlayer_PendingSkillInSkillAsset},
	{"CheckPendingSkill", bnd_LC_ClientGamePlayer_CheckPendingSkill},
	{"CheckPendingSkillEx", bnd_LC_ClientGamePlayer_CheckPendingSkillEx},
	{"WaitPendingSkill", bnd_LC_ClientGamePlayer_WaitPendingSkill},
	{"WaitPendingSkillSuccess", bnd_LC_ClientGamePlayer_WaitPendingSkillSuccess},
	{"RecordLastSkillID", bnd_LC_ClientGamePlayer_RecordLastSkillID},
	{"ReqAcceptTask", bnd_LC_ClientGamePlayer_ReqAcceptTask},
	{"ReqFinishTask", bnd_LC_ClientGamePlayer_ReqFinishTask},
	{"ReqCancelTask", bnd_LC_ClientGamePlayer_ReqCancelTask},
	{"ReqTakeChapterReward", bnd_LC_ClientGamePlayer_ReqTakeChapterReward},
	{"ReqTakeReachReward", bnd_LC_ClientGamePlayer_ReqTakeReachReward},
	{"ObtainRewardFlag", bnd_LC_ClientGamePlayer_ObtainRewardFlag},
	{"GetUnBindCashString", bnd_LC_ClientGamePlayer_GetUnBindCashString},
	{"GetYuanBaoString", bnd_LC_ClientGamePlayer_GetYuanBaoString},
	{"GetCouragePTString", bnd_LC_ClientGamePlayer_GetCouragePTString},
	{"GetJusticePTString", bnd_LC_ClientGamePlayer_GetJusticePTString},
	{"GetArenaPTString", bnd_LC_ClientGamePlayer_GetArenaPTString},
	{"GetMonopolyPTString", bnd_LC_ClientGamePlayer_GetMonopolyPTString},
	{"GetRuneCreamString", bnd_LC_ClientGamePlayer_GetRuneCreamString},
	{"GetStarSoulString", bnd_LC_ClientGamePlayer_GetStarSoulString},
	{"GetStarMoneyString", bnd_LC_ClientGamePlayer_GetStarMoneyString},
	{"GetBuddyExpMoneyString", bnd_LC_ClientGamePlayer_GetBuddyExpMoneyString},
	{"GetCourageString", bnd_LC_ClientGamePlayer_GetCourageString},
	{"GetEnergyString", bnd_LC_ClientGamePlayer_GetEnergyString},
	{"GetTrialString", bnd_LC_ClientGamePlayer_GetTrialString},
	{"GetMagicCubeString", bnd_LC_ClientGamePlayer_GetMagicCubeString},
	{"GetActiveMeritString", bnd_LC_ClientGamePlayer_GetActiveMeritString},
	{"GetRewardMedalString", bnd_LC_ClientGamePlayer_GetRewardMedalString},
	{"GetDailyMeritString", bnd_LC_ClientGamePlayer_GetDailyMeritString},
	{"GetGuildMeritString", bnd_LC_ClientGamePlayer_GetGuildMeritString},
	{"GetChapterHonourString", bnd_LC_ClientGamePlayer_GetChapterHonourString},
	{"GetBossJPString", bnd_LC_ClientGamePlayer_GetBossJPString},
	{"GetAccountPointString", bnd_LC_ClientGamePlayer_GetAccountPointString},
	{"GetSkinPointString", bnd_LC_ClientGamePlayer_GetSkinPointString},
	{"GetRaidGloryPointString", bnd_LC_ClientGamePlayer_GetRaidGloryPointString},
	{"GetYijituxiScoreString", bnd_LC_ClientGamePlayer_GetYijituxiScoreString},
	{"GetEntrustTaskPointString", bnd_LC_ClientGamePlayer_GetEntrustTaskPointString},
	{"GetSkyArenaPointString", bnd_LC_ClientGamePlayer_GetSkyArenaPointString},
	{"GetVehiclePointString", bnd_LC_ClientGamePlayer_GetVehiclePointString},
	{"GetPetPointString", bnd_LC_ClientGamePlayer_GetPetPointString},
	{"GetBackWingPointString", bnd_LC_ClientGamePlayer_GetBackWingPointString},
	{"GetSkyArenaPoint", bnd_LC_ClientGamePlayer_GetSkyArenaPoint},
	{"GetSkyArenaHonorPoint", bnd_LC_ClientGamePlayer_GetSkyArenaHonorPoint},
	{"GetLastSkyArenaPoint", bnd_LC_ClientGamePlayer_GetLastSkyArenaPoint},
	{"SetLastSkyArenaPoint", bnd_LC_ClientGamePlayer_SetLastSkyArenaPoint},
	{"GetSkyArenaSeason", bnd_LC_ClientGamePlayer_GetSkyArenaSeason},
	{"GetSkyArenaCloseTime", bnd_LC_ClientGamePlayer_GetSkyArenaCloseTime},
	{"GetSkyArenaNxtTime", bnd_LC_ClientGamePlayer_GetSkyArenaNxtTime},
	{"GetGuessGroupID", bnd_LC_ClientGamePlayer_GetGuessGroupID},
	{"ReqGetSkyArenaBattleInfo", bnd_LC_ClientGamePlayer_ReqGetSkyArenaBattleInfo},
	{"GetActiveTimeShopInfo", bnd_LC_ClientGamePlayer_GetActiveTimeShopInfo},
	{"UpdateEntrustTaskState", bnd_LC_ClientGamePlayer_UpdateEntrustTaskState},
	{"RequestCreatePlayerGroup", bnd_LC_ClientGamePlayer_RequestCreatePlayerGroup},
	{"RequestExitPlayerGroup", bnd_LC_ClientGamePlayer_RequestExitPlayerGroup},
	{"RequestJoinPlayerGroup", bnd_LC_ClientGamePlayer_RequestJoinPlayerGroup},
	{"RequestReliveLeaveTranscription", bnd_LC_ClientGamePlayer_RequestReliveLeaveTranscription},
	{"RequestConfrimGroupJoin", bnd_LC_ClientGamePlayer_RequestConfrimGroupJoin},
	{"RequestConfrimGroupJoinByPlayerID", bnd_LC_ClientGamePlayer_RequestConfrimGroupJoinByPlayerID},
	{"RequestKickPlayerFromGroup", bnd_LC_ClientGamePlayer_RequestKickPlayerFromGroup},
	{"RequestDismissPlayerGroup", bnd_LC_ClientGamePlayer_RequestDismissPlayerGroup},
	{"RequestInvitePlayerToGroup", bnd_LC_ClientGamePlayer_RequestInvitePlayerToGroup},
	{"RequestConfirmInviteToGroup", bnd_LC_ClientGamePlayer_RequestConfirmInviteToGroup},
	{"RequestConfirmBeInviteToGroup", bnd_LC_ClientGamePlayer_RequestConfirmBeInviteToGroup},
	{"RequestConfirmBeInviteToGroupByGroupID", bnd_LC_ClientGamePlayer_RequestConfirmBeInviteToGroupByGroupID},
	{"RequestAppointmentCheif", bnd_LC_ClientGamePlayer_RequestAppointmentCheif},
	{"RequestClearCandidateList", bnd_LC_ClientGamePlayer_RequestClearCandidateList},
	{"RequestClearInviteGroupList", bnd_LC_ClientGamePlayer_RequestClearInviteGroupList},
	{"RequestBlockPlayerJoin", bnd_LC_ClientGamePlayer_RequestBlockPlayerJoin},
	{"RequestModifyQuality", bnd_LC_ClientGamePlayer_RequestModifyQuality},
	{"RequestForbidJoin", bnd_LC_ClientGamePlayer_RequestForbidJoin},
	{"ReqGetBotProfit", bnd_LC_ClientGamePlayer_ReqGetBotProfit},
	{"ReqGetVipNewBonus", bnd_LC_ClientGamePlayer_ReqGetVipNewBonus},
	{"RequestSyncInviteGroupMemberList", bnd_LC_ClientGamePlayer_RequestSyncInviteGroupMemberList},
	{"GetTeamHintFlag", bnd_LC_ClientGamePlayer_GetTeamHintFlag},
	{"SetTeamHintFlag", bnd_LC_ClientGamePlayer_SetTeamHintFlag},
	{"RequestTrade", bnd_LC_ClientGamePlayer_RequestTrade},
	{"RequestConfirmReplyTrade", bnd_LC_ClientGamePlayer_RequestConfirmReplyTrade},
	{"RequestAddItemToTradePack", bnd_LC_ClientGamePlayer_RequestAddItemToTradePack},
	{"RequestRemoveItemFormTradePack", bnd_LC_ClientGamePlayer_RequestRemoveItemFormTradePack},
	{"RequestLockTradeData", bnd_LC_ClientGamePlayer_RequestLockTradeData},
	{"RequestUnLockTradeData", bnd_LC_ClientGamePlayer_RequestUnLockTradeData},
	{"RequestInterruptTrade", bnd_LC_ClientGamePlayer_RequestInterruptTrade},
	{"RequestUpdateTradeCash", bnd_LC_ClientGamePlayer_RequestUpdateTradeCash},
	{"RequestFinishTrade", bnd_LC_ClientGamePlayer_RequestFinishTrade},
	{"ReqDeCompositionEquips", bnd_LC_ClientGamePlayer_ReqDeCompositionEquips},
	{"RequestExecuteSkillScript", bnd_LC_ClientGamePlayer_RequestExecuteSkillScript},
	{"GetLastTradeRequesterID", bnd_LC_ClientGamePlayer_GetLastTradeRequesterID},
	{"GetInvitePlayerGroup", bnd_LC_ClientGamePlayer_GetInvitePlayerGroup},
	{"GetInvitePlayerGroupCount", bnd_LC_ClientGamePlayer_GetInvitePlayerGroupCount},
	{"GetForbidJoinFlag", bnd_LC_ClientGamePlayer_GetForbidJoinFlag},
	{"RequestConfirmSkillRespawn", bnd_LC_ClientGamePlayer_RequestConfirmSkillRespawn},
	{"RequestModifyPKSetting", bnd_LC_ClientGamePlayer_RequestModifyPKSetting},
	{"RequestPKValue", bnd_LC_ClientGamePlayer_RequestPKValue},
	{"SetChatTargetID", bnd_LC_ClientGamePlayer_SetChatTargetID},
	{"GetChatTargetID", bnd_LC_ClientGamePlayer_GetChatTargetID},
	{"SetChatTargetName", bnd_LC_ClientGamePlayer_SetChatTargetName},
	{"GetChatTargetName", bnd_LC_ClientGamePlayer_GetChatTargetName},
	{"SetChatChannel", bnd_LC_ClientGamePlayer_SetChatChannel},
	{"GetBossFirstKillInfo", bnd_LC_ClientGamePlayer_GetBossFirstKillInfo},
	{"IsServerBossFirstKillRecorded", bnd_LC_ClientGamePlayer_IsServerBossFirstKillRecorded},
	{"GetBossFirstKillRewardPlayerInfo", bnd_LC_ClientGamePlayer_GetBossFirstKillRewardPlayerInfo},
	{"IsBossKilledBySelf", bnd_LC_ClientGamePlayer_IsBossKilledBySelf},
	{"RequestDrawFirstKillReward", bnd_LC_ClientGamePlayer_RequestDrawFirstKillReward},
	{"RequestAutoDecompositionItem", bnd_LC_ClientGamePlayer_RequestAutoDecompositionItem},
	{"IsBossFirstKillRecorded", bnd_LC_ClientGamePlayer_IsBossFirstKillRecorded},
	{"GetChatChannel", bnd_LC_ClientGamePlayer_GetChatChannel},
	{"SendChatMsg", bnd_LC_ClientGamePlayer_SendChatMsg},
	{"SendFriendChatMsg", bnd_LC_ClientGamePlayer_SendFriendChatMsg},
	{"IsChapterOver", bnd_LC_ClientGamePlayer_IsChapterOver},
	{"ReqBiographyReward", bnd_LC_ClientGamePlayer_ReqBiographyReward},
	{"ReqTakeFirstChargeReward", bnd_LC_ClientGamePlayer_ReqTakeFirstChargeReward},
	{"SetChannelLimitFlag", bnd_LC_ClientGamePlayer_SetChannelLimitFlag},
	{"ConfirmChannelLimitFlag", bnd_LC_ClientGamePlayer_ConfirmChannelLimitFlag},
	{"GetForbidPlayerID", bnd_LC_ClientGamePlayer_GetForbidPlayerID},
	{"GetForbidPlayerName", bnd_LC_ClientGamePlayer_GetForbidPlayerName},
	{"IsForbidPlayer", bnd_LC_ClientGamePlayer_IsForbidPlayer},
	{"RequestRemoveForbidPlayer", bnd_LC_ClientGamePlayer_RequestRemoveForbidPlayer},
	{"GetCompeteRewardCount", bnd_LC_ClientGamePlayer_GetCompeteRewardCount},
	{"GetSubRewardCount", bnd_LC_ClientGamePlayer_GetSubRewardCount},
	{"RequestAddForbidPlayer", bnd_LC_ClientGamePlayer_RequestAddForbidPlayer},
	{"RequestSkillUpGrade", bnd_LC_ClientGamePlayer_RequestSkillUpGrade},
	{"RequestLearnControllerSkill", bnd_LC_ClientGamePlayer_RequestLearnControllerSkill},
	{"RequestAutoUpgradeSkill", bnd_LC_ClientGamePlayer_RequestAutoUpgradeSkill},
	{"IsInCrossRealMapTeam", bnd_LC_ClientGamePlayer_IsInCrossRealMapTeam},
	{"IsInSpecialRaidMap", bnd_LC_ClientGamePlayer_IsInSpecialRaidMap},
	{"RequestDeactiveSkillState", bnd_LC_ClientGamePlayer_RequestDeactiveSkillState},
	{"GetCurrentEquipItem", bnd_LC_ClientGamePlayer_GetCurrentEquipItem},
	{"SetIsNeedLockTradeTarget", bnd_LC_ClientGamePlayer_SetIsNeedLockTradeTarget},
	{"IsCurrentInTheArea", bnd_LC_ClientGamePlayer_IsCurrentInTheArea},
	{"RequestNocticeTaskEvent", bnd_LC_ClientGamePlayer_RequestNocticeTaskEvent},
	{"RequestUseItemTriggerTask", bnd_LC_ClientGamePlayer_RequestUseItemTriggerTask},
	{"AddTempFriend", bnd_LC_ClientGamePlayer_AddTempFriend},
	{"AddFriend", bnd_LC_ClientGamePlayer_AddFriend},
	{"AddEnemy", bnd_LC_ClientGamePlayer_AddEnemy},
	{"AddBlackList", bnd_LC_ClientGamePlayer_AddBlackList},
	{"DeleteTempFriend", bnd_LC_ClientGamePlayer_DeleteTempFriend},
	{"DeleteFriend", bnd_LC_ClientGamePlayer_DeleteFriend},
	{"DeleteEnemy", bnd_LC_ClientGamePlayer_DeleteEnemy},
	{"DeleteBlackList", bnd_LC_ClientGamePlayer_DeleteBlackList},
	{"ReqFriendStatus", bnd_LC_ClientGamePlayer_ReqFriendStatus},
	{"ReqRecommendFriend", bnd_LC_ClientGamePlayer_ReqRecommendFriend},
	{"ReqAddAllRecommendFriends", bnd_LC_ClientGamePlayer_ReqAddAllRecommendFriends},
	{"ReqFriendDetail", bnd_LC_ClientGamePlayer_ReqFriendDetail},
	{"ReqPlayerInfoNearBy", bnd_LC_ClientGamePlayer_ReqPlayerInfoNearBy},
	{"AddFiendNick", bnd_LC_ClientGamePlayer_AddFiendNick},
	{"SupportFiendNick", bnd_LC_ClientGamePlayer_SupportFiendNick},
	{"ReqGetFriendNick", bnd_LC_ClientGamePlayer_ReqGetFriendNick},
	{"CopyName", bnd_LC_ClientGamePlayer_CopyName},
	{"CopyToClipBoard", bnd_LC_ClientGamePlayer_CopyToClipBoard},
	{"ReqBeAddFriend", bnd_LC_ClientGamePlayer_ReqBeAddFriend},
	{"ConfirmBeAddFriend", bnd_LC_ClientGamePlayer_ConfirmBeAddFriend},
	{"GetSocietyAsset", bnd_LC_ClientGamePlayer_GetSocietyAsset},
	{"GetFriendMsgBroad", bnd_LC_ClientGamePlayer_GetFriendMsgBroad},
	{"GetViewPlayerInfo", bnd_LC_ClientGamePlayer_GetViewPlayerInfo},
	{"GetFriendNick", bnd_LC_ClientGamePlayer_GetFriendNick},
	{"GetWorldLevelAsset", bnd_LC_ClientGamePlayer_GetWorldLevelAsset},
	{"GetSecretTreasureAsset", bnd_LC_ClientGamePlayer_GetSecretTreasureAsset},
	{"AccurateSearch", bnd_LC_ClientGamePlayer_AccurateSearch},
	{"PrivateChatSearch", bnd_LC_ClientGamePlayer_PrivateChatSearch},
	{"ReqChangeSocietyInfo", bnd_LC_ClientGamePlayer_ReqChangeSocietyInfo},
	{"ResetDetailInfo", bnd_LC_ClientGamePlayer_ResetDetailInfo},
	{"ReqActiveBot", bnd_LC_ClientGamePlayer_ReqActiveBot},
	{"ReqUpgradBot", bnd_LC_ClientGamePlayer_ReqUpgradBot},
	{"IsBuddyUpgradGiftOver", bnd_LC_ClientGamePlayer_IsBuddyUpgradGiftOver},
	{"GetBuddyUpgradGiftCurrentDay", bnd_LC_ClientGamePlayer_GetBuddyUpgradGiftCurrentDay},
	{"GetBuddyUpgradGiftDay", bnd_LC_ClientGamePlayer_GetBuddyUpgradGiftDay},
	{"ReqActiveBuddyUpgradGift", bnd_LC_ClientGamePlayer_ReqActiveBuddyUpgradGift},
	{"ReqGetBuddyUpgradGift", bnd_LC_ClientGamePlayer_ReqGetBuddyUpgradGift},
	{"GetDailyChargeDay", bnd_LC_ClientGamePlayer_GetDailyChargeDay},
	{"GetDailyChargeDayLeftTime", bnd_LC_ClientGamePlayer_GetDailyChargeDayLeftTime},
	{"IsGetDailyChargeNormalReward", bnd_LC_ClientGamePlayer_IsGetDailyChargeNormalReward},
	{"IsGetAllDailyChargeReward", bnd_LC_ClientGamePlayer_IsGetAllDailyChargeReward},
	{"GetDailyChargeShopBuyCountBuyItemID", bnd_LC_ClientGamePlayer_GetDailyChargeShopBuyCountBuyItemID},
	{"ReqDailyChargeTime", bnd_LC_ClientGamePlayer_ReqDailyChargeTime},
	{"ReqDailyChargeFreeReward", bnd_LC_ClientGamePlayer_ReqDailyChargeFreeReward},
	{"ReqDailyChargeBuyReward", bnd_LC_ClientGamePlayer_ReqDailyChargeBuyReward},
	{"ReqUpgradCollection", bnd_LC_ClientGamePlayer_ReqUpgradCollection},
	{"ReqUpgradCollectionSuit", bnd_LC_ClientGamePlayer_ReqUpgradCollectionSuit},
	{"GetArriveFlag", bnd_LC_ClientGamePlayer_GetArriveFlag},
	{"NotInSamePath", bnd_LC_ClientGamePlayer_NotInSamePath},
	{"GetSearchPathMiniMapX", bnd_LC_ClientGamePlayer_GetSearchPathMiniMapX},
	{"GetSearchPathMiniMapY", bnd_LC_ClientGamePlayer_GetSearchPathMiniMapY},
	{"RequestLeaveTranscription", bnd_LC_ClientGamePlayer_RequestLeaveTranscription},
	{"RequestLeaveArena", bnd_LC_ClientGamePlayer_RequestLeaveArena},
	{"RequestTransportAreaTransfer", bnd_LC_ClientGamePlayer_RequestTransportAreaTransfer},
	{"RequestTransfer", bnd_LC_ClientGamePlayer_RequestTransfer},
	{"RequestTransferBattlePlaybackMap", bnd_LC_ClientGamePlayer_RequestTransferBattlePlaybackMap},
	{"GetCareerSelectionNPCID", bnd_LC_ClientGamePlayer_GetCareerSelectionNPCID},
	{"MoveToFixedPos", bnd_LC_ClientGamePlayer_MoveToFixedPos},
	{"GetCurrentMapID", bnd_LC_ClientGamePlayer_GetCurrentMapID},
	{"GetCurrentMapCategoryType", bnd_LC_ClientGamePlayer_GetCurrentMapCategoryType},
	{"IsInTranscription", bnd_LC_ClientGamePlayer_IsInTranscription},
	{"GetACTSubInfoByRankType", bnd_LC_ClientGamePlayer_GetACTSubInfoByRankType},
	{"GetTranscriptionInfoManager", bnd_LC_ClientGamePlayer_GetTranscriptionInfoManager},
	{"GetGameStoryManager", bnd_LC_ClientGamePlayer_GetGameStoryManager},
	{"GetCurrentPing", bnd_LC_ClientGamePlayer_GetCurrentPing},
	{"GetServerTime", bnd_LC_ClientGamePlayer_GetServerTime},
	{"GetServerTimeVal", bnd_LC_ClientGamePlayer_GetServerTimeVal},
	{"GetCurrentFPS", bnd_LC_ClientGamePlayer_GetCurrentFPS},
	{"RecordUIOperations", bnd_LC_ClientGamePlayer_RecordUIOperations},
	{"RequestNPCOwnerShip", bnd_LC_ClientGamePlayer_RequestNPCOwnerShip},
	{"SetWaitingShortcutKey", bnd_LC_ClientGamePlayer_SetWaitingShortcutKey},
	{"GetWaitingshortcutKey", bnd_LC_ClientGamePlayer_GetWaitingshortcutKey},
	{"SetIsSaveShortcutKey", bnd_LC_ClientGamePlayer_SetIsSaveShortcutKey},
	{"GetIsSaveShortcutKey", bnd_LC_ClientGamePlayer_GetIsSaveShortcutKey},
	{"RequestSaveShortcutKey", bnd_LC_ClientGamePlayer_RequestSaveShortcutKey},
	{"OnEnterPhaseMap", bnd_LC_ClientGamePlayer_OnEnterPhaseMap},
	{"PathToPointLocation", bnd_LC_ClientGamePlayer_PathToPointLocation},
	{"GetClientProduction", bnd_LC_ClientGamePlayer_GetClientProduction},
	{"IsNeedUnBindCash", bnd_LC_ClientGamePlayer_IsNeedUnBindCash},
	{"StopCurrentNPCSound", bnd_LC_ClientGamePlayer_StopCurrentNPCSound},
	{"GetUnBindYuanBaoString", bnd_LC_ClientGamePlayer_GetUnBindYuanBaoString},
	{"ExecuteNPCFuction", bnd_LC_ClientGamePlayer_ExecuteNPCFuction},
	{"RequestLeavePrison", bnd_LC_ClientGamePlayer_RequestLeavePrison},
	{"RequestReducePKValue", bnd_LC_ClientGamePlayer_RequestReducePKValue},
	{"IsBindCrashEnough", bnd_LC_ClientGamePlayer_IsBindCrashEnough},
	{"SendRequestInfo", bnd_LC_ClientGamePlayer_SendRequestInfo},
	{"SendRequestRaidBossSpeciesRankInfo", bnd_LC_ClientGamePlayer_SendRequestRaidBossSpeciesRankInfo},
	{"RequestRankInfo", bnd_LC_ClientGamePlayer_RequestRankInfo},
	{"RequestPlayerBuddyRankInfo", bnd_LC_ClientGamePlayer_RequestPlayerBuddyRankInfo},
	{"RequestBuddyRankInfo", bnd_LC_ClientGamePlayer_RequestBuddyRankInfo},
	{"RequestToyPetRankInfo", bnd_LC_ClientGamePlayer_RequestToyPetRankInfo},
	{"RequestSubRankInfo", bnd_LC_ClientGamePlayer_RequestSubRankInfo},
	{"RequestRankTopnPlayerInfo", bnd_LC_ClientGamePlayer_RequestRankTopnPlayerInfo},
	{"RequestBuddyRankIndex", bnd_LC_ClientGamePlayer_RequestBuddyRankIndex},
	{"RequsetArenaGiftState", bnd_LC_ClientGamePlayer_RequsetArenaGiftState},
	{"RequsetArenaRankList", bnd_LC_ClientGamePlayer_RequsetArenaRankList},
	{"SendRequestCommitAnswer", bnd_LC_ClientGamePlayer_SendRequestCommitAnswer},
	{"SendRequestAnswerRankInfo", bnd_LC_ClientGamePlayer_SendRequestAnswerRankInfo},
	{"SendRequestYiJiTuXiRankInfo", bnd_LC_ClientGamePlayer_SendRequestYiJiTuXiRankInfo},
	{"GetRaidBossSpeciesRank", bnd_LC_ClientGamePlayer_GetRaidBossSpeciesRank},
	{"GetRaidBossSpeciesMyDamageCount", bnd_LC_ClientGamePlayer_GetRaidBossSpeciesMyDamageCount},
	{"GetRaidBossSpeciesMyRank", bnd_LC_ClientGamePlayer_GetRaidBossSpeciesMyRank},
	{"ReqGetRaidBossSpeciesRecord", bnd_LC_ClientGamePlayer_ReqGetRaidBossSpeciesRecord},
	{"ReqRaidBossSpeciesDamageData", bnd_LC_ClientGamePlayer_ReqRaidBossSpeciesDamageData},
	{"ReqRaidBossSpeciesDamageDataDetail", bnd_LC_ClientGamePlayer_ReqRaidBossSpeciesDamageDataDetail},
	{"GetTestDataBase", bnd_LC_ClientGamePlayer_GetTestDataBase},
	{"SendRequestInfoByType", bnd_LC_ClientGamePlayer_SendRequestInfoByType},
	{"EquipAdvanceReq", bnd_LC_ClientGamePlayer_EquipAdvanceReq},
	{"CimeliaEquipAdvanceReq", bnd_LC_ClientGamePlayer_CimeliaEquipAdvanceReq},
	{"SendRequestSameLocationDifLine", bnd_LC_ClientGamePlayer_SendRequestSameLocationDifLine},
	{"SendRequestInfoByTypeWithStringPram", bnd_LC_ClientGamePlayer_SendRequestInfoByTypeWithStringPram},
	{"SendConfirmRequestInfo", bnd_LC_ClientGamePlayer_SendConfirmRequestInfo},
	{"SendRequestExpandWarehouse", bnd_LC_ClientGamePlayer_SendRequestExpandWarehouse},
	{"GetReducePkReqCash", bnd_LC_ClientGamePlayer_GetReducePkReqCash},
	{"GetTotalReforeLevel", bnd_LC_ClientGamePlayer_GetTotalReforeLevel},
	{"GetReucePkResultValue", bnd_LC_ClientGamePlayer_GetReucePkResultValue},
	{"CheckRecvLuckAward", bnd_LC_ClientGamePlayer_CheckRecvLuckAward},
	{"RequestRecvLuckAward ", bnd_LC_ClientGamePlayer_RequestRecvLuckAward },
	{"StartFollowTarget", bnd_LC_ClientGamePlayer_StartFollowTarget},
	{"StopFollowTarget", bnd_LC_ClientGamePlayer_StopFollowTarget},
	{"IsHookArea", bnd_LC_ClientGamePlayer_IsHookArea},
	{"ResponseFromLuaAfterMapChanged", bnd_LC_ClientGamePlayer_ResponseFromLuaAfterMapChanged},
	{"RequestGuildTransport", bnd_LC_ClientGamePlayer_RequestGuildTransport},
	{"ClickGuildTransportIcon", bnd_LC_ClientGamePlayer_ClickGuildTransportIcon},
	{"QuickPick", bnd_LC_ClientGamePlayer_QuickPick},
	{"FastPick", bnd_LC_ClientGamePlayer_FastPick},
	{"GetInFovNetPlayerIDs", bnd_LC_ClientGamePlayer_GetInFovNetPlayerIDs},
	{"CallFriend", bnd_LC_ClientGamePlayer_CallFriend},
	{"ReqReturnToCity", bnd_LC_ClientGamePlayer_ReqReturnToCity},
	{"DecompositionEquip", bnd_LC_ClientGamePlayer_DecompositionEquip},
	{"RequestEnhanceEquipmentInPackage", bnd_LC_ClientGamePlayer_RequestEnhanceEquipmentInPackage},
	{"GetRaidScore", bnd_LC_ClientGamePlayer_GetRaidScore},
	{"GetRaidRecord", bnd_LC_ClientGamePlayer_GetRaidRecord},
	{"HasMapCategoryArrived", bnd_LC_ClientGamePlayer_HasMapCategoryArrived},
	{"RequestAutoUpgradeCimelia", bnd_LC_ClientGamePlayer_RequestAutoUpgradeCimelia},
	{"GetIsAutoUpgradeCimelia", bnd_LC_ClientGamePlayer_GetIsAutoUpgradeCimelia},
	{"CheckUpgrade", bnd_LC_ClientGamePlayer_CheckUpgrade},
	{"GetCimeliaNeedLevel", bnd_LC_ClientGamePlayer_GetCimeliaNeedLevel},
	{"GetItemListValueCount", bnd_LC_ClientGamePlayer_GetItemListValueCount},
	{"GetCanCostItemCount", bnd_LC_ClientGamePlayer_GetCanCostItemCount},
	{"GetItemSlot", bnd_LC_ClientGamePlayer_GetItemSlot},
	{"RequestUpgradeMiji", bnd_LC_ClientGamePlayer_RequestUpgradeMiji},
	{"RequestUpgradeCimelia", bnd_LC_ClientGamePlayer_RequestUpgradeCimelia},
	{"RequestChangeTransform", bnd_LC_ClientGamePlayer_RequestChangeTransform},
	{"RequestBless", bnd_LC_ClientGamePlayer_RequestBless},
	{"RequestTransformCimelia", bnd_LC_ClientGamePlayer_RequestTransformCimelia},
	{"GetCurrentCimeliaRank", bnd_LC_ClientGamePlayer_GetCurrentCimeliaRank},
	{"GetCurrentCimeliaAttriLevel", bnd_LC_ClientGamePlayer_GetCurrentCimeliaAttriLevel},
	{"GetCimeliaOriginCharTypeID", bnd_LC_ClientGamePlayer_GetCimeliaOriginCharTypeID},
	{"GetCimeliaAttribute", bnd_LC_ClientGamePlayer_GetCimeliaAttribute},
	{"GetCimeliaAttributeList", bnd_LC_ClientGamePlayer_GetCimeliaAttributeList},
	{"GetCimeliaAttributeByRank", bnd_LC_ClientGamePlayer_GetCimeliaAttributeByRank},
	{"GetCimeliaUpgradeItemString", bnd_LC_ClientGamePlayer_GetCimeliaUpgradeItemString},
	{"GetCimeliaName", bnd_LC_ClientGamePlayer_GetCimeliaName},
	{"GetCimeliaDisPlayLevelInfo", bnd_LC_ClientGamePlayer_GetCimeliaDisPlayLevelInfo},
	{"GetCurrentVehicleSkill", bnd_LC_ClientGamePlayer_GetCurrentVehicleSkill},
	{"GetIsAutoUpgradeSkill", bnd_LC_ClientGamePlayer_GetIsAutoUpgradeSkill},
	{"GetNpcTalkUIPos", bnd_LC_ClientGamePlayer_GetNpcTalkUIPos},
	{"RequestAgreeAddToEnermy", bnd_LC_ClientGamePlayer_RequestAgreeAddToEnermy},
	{"RequestSetAssistInfo", bnd_LC_ClientGamePlayer_RequestSetAssistInfo},
	{"RequestTransferToLocation", bnd_LC_ClientGamePlayer_RequestTransferToLocation},
	{"RequestMemberAutoAdd", bnd_LC_ClientGamePlayer_RequestMemberAutoAdd},
	{"RequestUnSocketItemInPackage", bnd_LC_ClientGamePlayer_RequestUnSocketItemInPackage},
	{"GetArenaBattleDailyRanking", bnd_LC_ClientGamePlayer_GetArenaBattleDailyRanking},
	{"GetArenaBattleDailyRewardValid", bnd_LC_ClientGamePlayer_GetArenaBattleDailyRewardValid},
	{"GetArenaBattleCurRanking", bnd_LC_ClientGamePlayer_GetArenaBattleCurRanking},
	{"GetArenaBattleTopRanking", bnd_LC_ClientGamePlayer_GetArenaBattleTopRanking},
	{"GetArenaBattleWinStreak", bnd_LC_ClientGamePlayer_GetArenaBattleWinStreak},
	{"GetArenaBattleChallengeTimes", bnd_LC_ClientGamePlayer_GetArenaBattleChallengeTimes},
	{"GetArenaBattleChallengeTimesStr", bnd_LC_ClientGamePlayer_GetArenaBattleChallengeTimesStr},
	{"GetArenaBattleLocalChallengedTime", bnd_LC_ClientGamePlayer_GetArenaBattleLocalChallengedTime},
	{"GetArenaBattleBuyCountCost", bnd_LC_ClientGamePlayer_GetArenaBattleBuyCountCost},
	{"GetArenaBattleDailyBuyCount", bnd_LC_ClientGamePlayer_GetArenaBattleDailyBuyCount},
	{"GetLocalDailyChallengeMaxTime", bnd_LC_ClientGamePlayer_GetLocalDailyChallengeMaxTime},
	{"GetArenaBattleChallengeInfoAsset", bnd_LC_ClientGamePlayer_GetArenaBattleChallengeInfoAsset},
	{"CanAddGood", bnd_LC_ClientGamePlayer_CanAddGood},
	{"GetLeftAddGoodCount", bnd_LC_ClientGamePlayer_GetLeftAddGoodCount},
	{"RequestUnbinItemInPackage", bnd_LC_ClientGamePlayer_RequestUnbinItemInPackage},
	{"RequestEnhanceEquipLevel", bnd_LC_ClientGamePlayer_RequestEnhanceEquipLevel},
	{"RequestEnhanceEquipStar", bnd_LC_ClientGamePlayer_RequestEnhanceEquipStar},
	{"RequestReinforceEquipSlot", bnd_LC_ClientGamePlayer_RequestReinforceEquipSlot},
	{"GetCommanderAllEquipCombatScore", bnd_LC_ClientGamePlayer_GetCommanderAllEquipCombatScore},
	{"GetEquipSlotLevel", bnd_LC_ClientGamePlayer_GetEquipSlotLevel},
	{"GetEquipSlotStar", bnd_LC_ClientGamePlayer_GetEquipSlotStar},
	{"PlayCommanderLevelupFx", bnd_LC_ClientGamePlayer_PlayCommanderLevelupFx},
	{"PlayTaskFinishFx", bnd_LC_ClientGamePlayer_PlayTaskFinishFx},
	{"RequestFireTimer", bnd_LC_ClientGamePlayer_RequestFireTimer},
	{"GetCommanderLotteryCount", bnd_LC_ClientGamePlayer_GetCommanderLotteryCount},
	{"GetCommanderMaxRuneStarLevel", bnd_LC_ClientGamePlayer_GetCommanderMaxRuneStarLevel},
	{"GetCommanderMaxRuneLevel", bnd_LC_ClientGamePlayer_GetCommanderMaxRuneLevel},
	{"SetSingleCombatRank", bnd_LC_ClientGamePlayer_SetSingleCombatRank},
	{"GetSingleCombatRank", bnd_LC_ClientGamePlayer_GetSingleCombatRank},
	{"SetSingleCombatDamage", bnd_LC_ClientGamePlayer_SetSingleCombatDamage},
	{"GetSingleCombatDamage", bnd_LC_ClientGamePlayer_GetSingleCombatDamage},
	{"GetRaidBossDropTimes", bnd_LC_ClientGamePlayer_GetRaidBossDropTimes},
	{"ReqSetRedPointFlag", bnd_LC_ClientGamePlayer_ReqSetRedPointFlag},
	{"GetRedPointFlag", bnd_LC_ClientGamePlayer_GetRedPointFlag},
	{"GetRaidBossDropNextRevertTime", bnd_LC_ClientGamePlayer_GetRaidBossDropNextRevertTime},
	{"GetRaidBossDropEndRevertTime", bnd_LC_ClientGamePlayer_GetRaidBossDropEndRevertTime},
	{"SetHookRespawnFlag", bnd_LC_ClientGamePlayer_SetHookRespawnFlag},
	{"ReqSetBuddyActivateScheme", bnd_LC_ClientGamePlayer_ReqSetBuddyActivateScheme},
	{"ReqSetSpecialMapInitBuddyActivateScheme", bnd_LC_ClientGamePlayer_ReqSetSpecialMapInitBuddyActivateScheme},
	{"ReqBattleRecord", bnd_LC_ClientGamePlayer_ReqBattleRecord},
	{"ReqBattleRecordDetaiil", bnd_LC_ClientGamePlayer_ReqBattleRecordDetaiil},
	{"GetBattleRecordTotalNum", bnd_LC_ClientGamePlayer_GetBattleRecordTotalNum},
	{"GetBattleRecordInfo", bnd_LC_ClientGamePlayer_GetBattleRecordInfo},
	{"GetPeakDuelBattleRecordInfo", bnd_LC_ClientGamePlayer_GetPeakDuelBattleRecordInfo},
	{"IsDetailNeedRequest", bnd_LC_ClientGamePlayer_IsDetailNeedRequest},
	{"GetBuddySchemeCidByIndex", bnd_LC_ClientGamePlayer_GetBuddySchemeCidByIndex},
	{"IsHooking", bnd_LC_ClientGamePlayer_IsHooking},
	{"SetHooking", bnd_LC_ClientGamePlayer_SetHooking},
	{"ResetHooking", bnd_LC_ClientGamePlayer_ResetHooking},
	{"SetHookingParam", bnd_LC_ClientGamePlayer_SetHookingParam},
	{"GetHookingParam", bnd_LC_ClientGamePlayer_GetHookingParam},
	{"SynHookingSettingToServer", bnd_LC_ClientGamePlayer_SynHookingSettingToServer},
	{"SetRaidHookingFlag", bnd_LC_ClientGamePlayer_SetRaidHookingFlag},
	{"SetPathtoTreasureFlag", bnd_LC_ClientGamePlayer_SetPathtoTreasureFlag},
	{"GetPathtoTreasureFlag", bnd_LC_ClientGamePlayer_GetPathtoTreasureFlag},
	{"SetRaidStageHookAssist", bnd_LC_ClientGamePlayer_SetRaidStageHookAssist},
	{"GetTmpSummorPool", bnd_LC_ClientGamePlayer_GetTmpSummorPool},
	{"SetTmpSummorPool", bnd_LC_ClientGamePlayer_SetTmpSummorPool},
	{"GetTmpSummorCurCount", bnd_LC_ClientGamePlayer_GetTmpSummorCurCount},
	{"GetWildBossPageByMapID", bnd_LC_ClientGamePlayer_GetWildBossPageByMapID},
	{"GetGamestoryIDByMapID", bnd_LC_ClientGamePlayer_GetGamestoryIDByMapID},
	{"ClearTmpSummorPool", bnd_LC_ClientGamePlayer_ClearTmpSummorPool},
	{"RequestGetGiftDaily", bnd_LC_ClientGamePlayer_RequestGetGiftDaily},
	{"RequestGetGfitOneOff", bnd_LC_ClientGamePlayer_RequestGetGfitOneOff},
	{"GetSummoredPlayerData", bnd_LC_ClientGamePlayer_GetSummoredPlayerData},
	{"RequestSignInToday", bnd_LC_ClientGamePlayer_RequestSignInToday},
	{"RequestReSignIn", bnd_LC_ClientGamePlayer_RequestReSignIn},
	{"RequestGetSignInReward", bnd_LC_ClientGamePlayer_RequestGetSignInReward},
	{"GetGameStoryIdByMapResID", bnd_LC_ClientGamePlayer_GetGameStoryIdByMapResID},
	{"GetTeamMapResID", bnd_LC_ClientGamePlayer_GetTeamMapResID},
	{"GetInviteTeamMapResID", bnd_LC_ClientGamePlayer_GetInviteTeamMapResID},
	{"RequestVIPReward", bnd_LC_ClientGamePlayer_RequestVIPReward},
	{"GetFriendOffLineTime", bnd_LC_ClientGamePlayer_GetFriendOffLineTime},
	{"SetForbbidenKey", bnd_LC_ClientGamePlayer_SetForbbidenKey},
	{"GetPVPTargetID", bnd_LC_ClientGamePlayer_GetPVPTargetID},
	{"GetDaylyTaskKillCount", bnd_LC_ClientGamePlayer_GetDaylyTaskKillCount},
	{"SetDaylyTaskKillCount", bnd_LC_ClientGamePlayer_SetDaylyTaskKillCount},
	{"GetPlayerDetailInfoByUserID", bnd_LC_ClientGamePlayer_GetPlayerDetailInfoByUserID},
	{"RequestPlayerDetail", bnd_LC_ClientGamePlayer_RequestPlayerDetail},
	{"GetGuildWarData", bnd_LC_ClientGamePlayer_GetGuildWarData},
	{"GetWorld2PtCurrentLocation", bnd_LC_ClientGamePlayer_GetWorld2PtCurrentLocation},
	{"GetReturnCityName", bnd_LC_ClientGamePlayer_GetReturnCityName},
	{"GetCanDrawRewardsNumberOfGuildWar", bnd_LC_ClientGamePlayer_GetCanDrawRewardsNumberOfGuildWar},
	{"GetVIPFDepositDataEntry", bnd_LC_ClientGamePlayer_GetVIPFDepositDataEntry},
	{"SetInitAttribute", bnd_LC_ClientGamePlayer_SetInitAttribute},
	{"IsDailyRechargeRewardedToday", bnd_LC_ClientGamePlayer_IsDailyRechargeRewardedToday},
	{"IsRechargeToday", bnd_LC_ClientGamePlayer_IsRechargeToday},
	{"GetRegistTimeInfo", bnd_LC_ClientGamePlayer_GetRegistTimeInfo},
	{"GetRegDays", bnd_LC_ClientGamePlayer_GetRegDays},
	{"GetDailyRechargeMaxNotDrawedLevel", bnd_LC_ClientGamePlayer_GetDailyRechargeMaxNotDrawedLevel},
	{"RequestRefineItemInPackage", bnd_LC_ClientGamePlayer_RequestRefineItemInPackage},
	{"RequestApplyRefineItem", bnd_LC_ClientGamePlayer_RequestApplyRefineItem},
	{"RequestModifyName", bnd_LC_ClientGamePlayer_RequestModifyName},
	{"IsRegistThisMonth", bnd_LC_ClientGamePlayer_IsRegistThisMonth},
	{"GetOpenAbilityManager", bnd_LC_ClientGamePlayer_GetOpenAbilityManager},
	{"RequestCommonReward", bnd_LC_ClientGamePlayer_RequestCommonReward},
	{"RequestCommonBaseReward", bnd_LC_ClientGamePlayer_RequestCommonBaseReward},
	{"RequestActivityCommonOp", bnd_LC_ClientGamePlayer_RequestActivityCommonOp},
	{"RequestActivityCommonOpEx", bnd_LC_ClientGamePlayer_RequestActivityCommonOpEx},
	{"RequestGetRankSubBInfo", bnd_LC_ClientGamePlayer_RequestGetRankSubBInfo},
	{"RequestUseActivationCode", bnd_LC_ClientGamePlayer_RequestUseActivationCode},
	{"RequestShotActivityInfo", bnd_LC_ClientGamePlayer_RequestShotActivityInfo},
	{"GetStatRewardDataEntry", bnd_LC_ClientGamePlayer_GetStatRewardDataEntry},
	{"RequestGetNearbyPlayerInfo", bnd_LC_ClientGamePlayer_RequestGetNearbyPlayerInfo},
	{"GetNearbyPlayerInfo", bnd_LC_ClientGamePlayer_GetNearbyPlayerInfo},
	{"RefreshShowEnemyPlayer", bnd_LC_ClientGamePlayer_RefreshShowEnemyPlayer},
	{"IsTeamMate", bnd_LC_ClientGamePlayer_IsTeamMate},
	{"RemoveEnemyPlayerByIdx", bnd_LC_ClientGamePlayer_RemoveEnemyPlayerByIdx},
	{"AutoAttackTarget", bnd_LC_ClientGamePlayer_AutoAttackTarget},
	{"ReqMapNpcCount", bnd_LC_ClientGamePlayer_ReqMapNpcCount},
	{"GetNpcCountByMapID", bnd_LC_ClientGamePlayer_GetNpcCountByMapID},
	{"IsTaskFinished", bnd_LC_ClientGamePlayer_IsTaskFinished},
	{"IsTaskCanFinish", bnd_LC_ClientGamePlayer_IsTaskCanFinish},
	{"GetShowEnemyPlayer", bnd_LC_ClientGamePlayer_GetShowEnemyPlayer},
	{"RequestTreasureDerive", bnd_LC_ClientGamePlayer_RequestTreasureDerive},
	{"RequestTreasureLog", bnd_LC_ClientGamePlayer_RequestTreasureLog},
	{"RequestSecretTreasure", bnd_LC_ClientGamePlayer_RequestSecretTreasure},
	{"RequestSmelter", bnd_LC_ClientGamePlayer_RequestSmelter},
	{"RequeseStarRuneOperation", bnd_LC_ClientGamePlayer_RequeseStarRuneOperation},
	{"IsItemGem", bnd_LC_ClientGamePlayer_IsItemGem},
	{"IsEquipBetter", bnd_LC_ClientGamePlayer_IsEquipBetter},
	{"RequestEnterCrossMap", bnd_LC_ClientGamePlayer_RequestEnterCrossMap},
	{"GetGuildTransportStamp", bnd_LC_ClientGamePlayer_GetGuildTransportStamp},
	{"AddToCanStartList", bnd_LC_ClientGamePlayer_AddToCanStartList},
	{"CheckAddGood", bnd_LC_ClientGamePlayer_CheckAddGood},
	{"GetCanGoodCountStr", bnd_LC_ClientGamePlayer_GetCanGoodCountStr},
	{"GetGameStoryScore", bnd_LC_ClientGamePlayer_GetGameStoryScore},
	{"PendingPathToLocation", bnd_LC_ClientGamePlayer_PendingPathToLocation},
	{"PendingPathToVal", bnd_LC_ClientGamePlayer_PendingPathToVal},
	{"RequestBuyVigor", bnd_LC_ClientGamePlayer_RequestBuyVigor},
	{"GetRankByType", bnd_LC_ClientGamePlayer_GetRankByType},
	{"SetCrossRealMapTeamID", bnd_LC_ClientGamePlayer_SetCrossRealMapTeamID},
	{"SetCrossRealTeamMapID", bnd_LC_ClientGamePlayer_SetCrossRealTeamMapID},
	{"GetCrossRealTeamMapID", bnd_LC_ClientGamePlayer_GetCrossRealTeamMapID},
	{"IsPurchaseBackOpen", bnd_LC_ClientGamePlayer_IsPurchaseBackOpen},
	{"GetCommonStatCostMoney", bnd_LC_ClientGamePlayer_GetCommonStatCostMoney},
	{"GetUseSkillBookSlotIndex", bnd_LC_ClientGamePlayer_GetUseSkillBookSlotIndex},
	{"GetSkillBookCateGory2", bnd_LC_ClientGamePlayer_GetSkillBookCateGory2},
	{"RequestActiveSkillBook", bnd_LC_ClientGamePlayer_RequestActiveSkillBook},
	{"RequestUnlockSkillBook", bnd_LC_ClientGamePlayer_RequestUnlockSkillBook},
	{"RequestWearSkillBook", bnd_LC_ClientGamePlayer_RequestWearSkillBook},
	{"GetSkillBookSlotSkillBookId", bnd_LC_ClientGamePlayer_GetSkillBookSlotSkillBookId},
	{"GetSkillBookSlotActive", bnd_LC_ClientGamePlayer_GetSkillBookSlotActive},
	{"GetFirstEmptySkillBookSlot", bnd_LC_ClientGamePlayer_GetFirstEmptySkillBookSlot},
	{"NeedRefreshTitleList", bnd_LC_ClientGamePlayer_NeedRefreshTitleList},
	{"RequestUseItemInPackByType", bnd_LC_ClientGamePlayer_RequestUseItemInPackByType},
	{"IsFindingPath", bnd_LC_ClientGamePlayer_IsFindingPath},
	{"ClearPkDebuffID", bnd_LC_ClientGamePlayer_ClearPkDebuffID},
	{"GetSubordinateAttrPlusValue", bnd_LC_ClientGamePlayer_GetSubordinateAttrPlusValue},
	{"GetSubordinateAttrPlusPercent", bnd_LC_ClientGamePlayer_GetSubordinateAttrPlusPercent},
	{"Reset2Guding", bnd_LC_ClientGamePlayer_Reset2Guding},
	{"Enable2Guding", bnd_LC_ClientGamePlayer_Enable2Guding},
	{"StartGuide", bnd_LC_ClientGamePlayer_StartGuide},
	{"SetTutorialStop", bnd_LC_ClientGamePlayer_SetTutorialStop},
	{"SetIsDoingOtherTask", bnd_LC_ClientGamePlayer_SetIsDoingOtherTask},
	{"GetAutoTaskType", bnd_LC_ClientGamePlayer_GetAutoTaskType},
	{"SetAutoTaskType", bnd_LC_ClientGamePlayer_SetAutoTaskType},
	{"GetRankInfoDataString", bnd_LC_ClientGamePlayer_GetRankInfoDataString},
	{"SetPendingObject", bnd_LC_ClientGamePlayer_SetPendingObject},
	{"IsSafeArea", bnd_LC_ClientGamePlayer_IsSafeArea},
	{"GetPlatformVipLevel", bnd_LC_ClientGamePlayer_GetPlatformVipLevel},
	{"IsPlatformYearVip", bnd_LC_ClientGamePlayer_IsPlatformYearVip},
	{"IsPlatformVip", bnd_LC_ClientGamePlayer_IsPlatformVip},
	{"IsPlatformHighVip", bnd_LC_ClientGamePlayer_IsPlatformHighVip},
	{"GetPlatformFormatVip", bnd_LC_ClientGamePlayer_GetPlatformFormatVip},
	{"GetDailyCleanValue", bnd_LC_ClientGamePlayer_GetDailyCleanValue},
	{"GetTimeStampFromCurrent", bnd_LC_ClientGamePlayer_GetTimeStampFromCurrent},
	{"GetInvestmentPlanTaskID", bnd_LC_ClientGamePlayer_GetInvestmentPlanTaskID},
	{"GetInvestmentPlanScheduleID", bnd_LC_ClientGamePlayer_GetInvestmentPlanScheduleID},
	{"GetEndOfDayTimeStampFromCurrent", bnd_LC_ClientGamePlayer_GetEndOfDayTimeStampFromCurrent},
	{"GetIsCanStartTutorialFlag", bnd_LC_ClientGamePlayer_GetIsCanStartTutorialFlag},
	{"GetAlliance", bnd_LC_ClientGamePlayer_GetAlliance},
	{"RequestAlliance", bnd_LC_ClientGamePlayer_RequestAlliance},
	{"GetTalismanUpgradeNeeedLiveness", bnd_LC_ClientGamePlayer_GetTalismanUpgradeNeeedLiveness},
	{"StopGuide", bnd_LC_ClientGamePlayer_StopGuide},
	{"GetCimeliaAttribPlusInfo", bnd_LC_ClientGamePlayer_GetCimeliaAttribPlusInfo},
	{"GetCimeliaTransformAttribInfo", bnd_LC_ClientGamePlayer_GetCimeliaTransformAttribInfo},
	{"GetCimeliaDrugInfo", bnd_LC_ClientGamePlayer_GetCimeliaDrugInfo},
	{"GetCimeliaTransformInfo", bnd_LC_ClientGamePlayer_GetCimeliaTransformInfo},
	{"GetCimeliaNamePic", bnd_LC_ClientGamePlayer_GetCimeliaNamePic},
	{"IsTransformActive", bnd_LC_ClientGamePlayer_IsTransformActive},
	{"GetServerOpenTime", bnd_LC_ClientGamePlayer_GetServerOpenTime},
	{"GetServerConflateTime", bnd_LC_ClientGamePlayer_GetServerConflateTime},
	{"GetastOffLineTime", bnd_LC_ClientGamePlayer_GetastOffLineTime},
	{"GetRuneBuddySlotOpen", bnd_LC_ClientGamePlayer_GetRuneBuddySlotOpen},
	{"GetRuneSubSlotOpen", bnd_LC_ClientGamePlayer_GetRuneSubSlotOpen},
	{"SetAutoIntelligentTask", bnd_LC_ClientGamePlayer_SetAutoIntelligentTask},
	{"GetAutoIntelligentTask", bnd_LC_ClientGamePlayer_GetAutoIntelligentTask},
	{"GetLotteryConsumeUnbindyuanbao", bnd_LC_ClientGamePlayer_GetLotteryConsumeUnbindyuanbao},
	{"GetClientSoulRefineAsset", bnd_LC_ClientGamePlayer_GetClientSoulRefineAsset},
	{"CanCreateGuild", bnd_LC_ClientGamePlayer_CanCreateGuild},
	{"ReqUseActivationCount", bnd_LC_ClientGamePlayer_ReqUseActivationCount},
	{"GetUseActivationCount", bnd_LC_ClientGamePlayer_GetUseActivationCount},
	{"GetHolydeedUserCount", bnd_LC_ClientGamePlayer_GetHolydeedUserCount},
	{"GetInvestmentTypeHasBuy", bnd_LC_ClientGamePlayer_GetInvestmentTypeHasBuy},
	{"RequestBuyInvesmentCard", bnd_LC_ClientGamePlayer_RequestBuyInvesmentCard},
	{"RequestRefreshRewardTask", bnd_LC_ClientGamePlayer_RequestRefreshRewardTask},
	{"GetBuddyChainCid", bnd_LC_ClientGamePlayer_GetBuddyChainCid},
	{"IsBuddyInChain", bnd_LC_ClientGamePlayer_IsBuddyInChain},
	{"IsChainFlag", bnd_LC_ClientGamePlayer_IsChainFlag},
	{"ReqAddBuddyChain", bnd_LC_ClientGamePlayer_ReqAddBuddyChain},
	{"ReqDelBuddyChain", bnd_LC_ClientGamePlayer_ReqDelBuddyChain},
	{"ReqSetChainFlag", bnd_LC_ClientGamePlayer_ReqSetChainFlag},
	{"RequestAddInvesmentCardReward", bnd_LC_ClientGamePlayer_RequestAddInvesmentCardReward},
	{"GetInvestmentFreeRewardReceive", bnd_LC_ClientGamePlayer_GetInvestmentFreeRewardReceive},
	{"GetInvestmentHighRewardReceive", bnd_LC_ClientGamePlayer_GetInvestmentHighRewardReceive},
	{"GetClientActivityAsset", bnd_LC_ClientGamePlayer_GetClientActivityAsset},
	{"ReqPeakArenaAchieveInfo", bnd_LC_ClientGamePlayer_ReqPeakArenaAchieveInfo},
	{"ReqPeakArenaLadderInfo", bnd_LC_ClientGamePlayer_ReqPeakArenaLadderInfo},
	{"ReqDrawArenaSectionReward", bnd_LC_ClientGamePlayer_ReqDrawArenaSectionReward},
	{"GetAcceptEntrustTasks", bnd_LC_ClientGamePlayer_GetAcceptEntrustTasks},
	{"GetAcceptEntrustTaskInfo", bnd_LC_ClientGamePlayer_GetAcceptEntrustTaskInfo},
	{"GetCanAcceptEntrustTasks", bnd_LC_ClientGamePlayer_GetCanAcceptEntrustTasks},
	{"GetEntrustTaskRefreshNum", bnd_LC_ClientGamePlayer_GetEntrustTaskRefreshNum},
	{"IsRuneEntrusted", bnd_LC_ClientGamePlayer_IsRuneEntrusted},
	{"IsBuddyEntrusted", bnd_LC_ClientGamePlayer_IsBuddyEntrusted},
	{"HasHighStarLevelTask", bnd_LC_ClientGamePlayer_HasHighStarLevelTask},
	{"ReqRefreshEntrustTask", bnd_LC_ClientGamePlayer_ReqRefreshEntrustTask},
	{"ReqEntrustTask", bnd_LC_ClientGamePlayer_ReqEntrustTask},
	{"ReqTakeEntrustTaskReward", bnd_LC_ClientGamePlayer_ReqTakeEntrustTaskReward},
	{"ReqFinishEntrustTaskImmediately", bnd_LC_ClientGamePlayer_ReqFinishEntrustTaskImmediately},
	{"GetDailyActivityString", bnd_LC_ClientGamePlayer_GetDailyActivityString},
	{"RequestGetDailyActivity", bnd_LC_ClientGamePlayer_RequestGetDailyActivity},
	{"GetDailyActivity", bnd_LC_ClientGamePlayer_GetDailyActivity},
	{"RequestSoulOperation", bnd_LC_ClientGamePlayer_RequestSoulOperation},
	{"ReqActivateActiveBuddy", bnd_LC_ClientGamePlayer_ReqActivateActiveBuddy},
	{"ReqActivateInactiveBuddy", bnd_LC_ClientGamePlayer_ReqActivateInactiveBuddy},
	{"ReqUnlockBuddy", bnd_LC_ClientGamePlayer_ReqUnlockBuddy},
	{"ReqRespawnBuddy", bnd_LC_ClientGamePlayer_ReqRespawnBuddy},
	{"ReqDeactivateBuddy", bnd_LC_ClientGamePlayer_ReqDeactivateBuddy},
	{"GetCurrentActiveBuddyIndex", bnd_LC_ClientGamePlayer_GetCurrentActiveBuddyIndex},
	{"GetBuddyActiveCID", bnd_LC_ClientGamePlayer_GetBuddyActiveCID},
	{"GetBuddyInactiveCID", bnd_LC_ClientGamePlayer_GetBuddyInactiveCID},
	{"GetBuddyInactiveUnlock", bnd_LC_ClientGamePlayer_GetBuddyInactiveUnlock},
	{"GetBuddyUnlock", bnd_LC_ClientGamePlayer_GetBuddyUnlock},
	{"GetBuddyIndex", bnd_LC_ClientGamePlayer_GetBuddyIndex},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientGamePlayer_GetDirtyFlagRevisionID},
	{"GetTotalBuddyNum", bnd_LC_ClientGamePlayer_GetTotalBuddyNum},
	{"GetAddEquipScore", bnd_LC_ClientGamePlayer_GetAddEquipScore},
	{"GetBuddyLevel", bnd_LC_ClientGamePlayer_GetBuddyLevel},
	{"GetBuddyAllEquipReinforceLevel", bnd_LC_ClientGamePlayer_GetBuddyAllEquipReinforceLevel},
	{"GetActiveBuddyListSize", bnd_LC_ClientGamePlayer_GetActiveBuddyListSize},
	{"GetBuddySkillAsset", bnd_LC_ClientGamePlayer_GetBuddySkillAsset},
	{"GetBuddyAttributeMap", bnd_LC_ClientGamePlayer_GetBuddyAttributeMap},
	{"GetBuddyAttributeAppendMap", bnd_LC_ClientGamePlayer_GetBuddyAttributeAppendMap},
	{"GetCommanderName", bnd_LC_ClientGamePlayer_GetCommanderName},
	{"GetCommanderLevel", bnd_LC_ClientGamePlayer_GetCommanderLevel},
	{"GetCommanderEXP", bnd_LC_ClientGamePlayer_GetCommanderEXP},
	{"GetCommanderEquipSuitLevel", bnd_LC_ClientGamePlayer_GetCommanderEquipSuitLevel},
	{"GetCommanderEquipScore", bnd_LC_ClientGamePlayer_GetCommanderEquipScore},
	{"GetEquipEntry", bnd_LC_ClientGamePlayer_GetEquipEntry},
	{"IsExistSubEquip", bnd_LC_ClientGamePlayer_IsExistSubEquip},
	{"GetBuddyEquipEntry", bnd_LC_ClientGamePlayer_GetBuddyEquipEntry},
	{"GetCommanderUID", bnd_LC_ClientGamePlayer_GetCommanderUID},
	{"GetCommanderTotalScore", bnd_LC_ClientGamePlayer_GetCommanderTotalScore},
	{"GetCommanderAttributeMap", bnd_LC_ClientGamePlayer_GetCommanderAttributeMap},
	{"GetCommanderChainAttributeMap", bnd_LC_ClientGamePlayer_GetCommanderChainAttributeMap},
	{"GetCommanderGetRevisionID", bnd_LC_ClientGamePlayer_GetCommanderGetRevisionID},
	{"GetCommanderBaseAttributeScore", bnd_LC_ClientGamePlayer_GetCommanderBaseAttributeScore},
	{"GetCommanderChainScore", bnd_LC_ClientGamePlayer_GetCommanderChainScore},
	{"GetCommanderTitleCombatScore", bnd_LC_ClientGamePlayer_GetCommanderTitleCombatScore},
	{"GetOwnerCurrentMP", bnd_LC_ClientGamePlayer_GetOwnerCurrentMP},
	{"GetOwnerMaxMP", bnd_LC_ClientGamePlayer_GetOwnerMaxMP},
	{"GetOwnerTaskHonorPoint", bnd_LC_ClientGamePlayer_GetOwnerTaskHonorPoint},
	{"GetOwnerMainTaskFinishCount", bnd_LC_ClientGamePlayer_GetOwnerMainTaskFinishCount},
	{"ReqRefreshConvoy", bnd_LC_ClientGamePlayer_ReqRefreshConvoy},
	{"GetEscortUsedCount", bnd_LC_ClientGamePlayer_GetEscortUsedCount},
	{"GetRobbingUsedCount", bnd_LC_ClientGamePlayer_GetRobbingUsedCount},
	{"GetEscortState", bnd_LC_ClientGamePlayer_GetEscortState},
	{"ReqTakeEscortReward", bnd_LC_ClientGamePlayer_ReqTakeEscortReward},
	{"GetEscortLevel", bnd_LC_ClientGamePlayer_GetEscortLevel},
	{"UpdateEscortLevel", bnd_LC_ClientGamePlayer_UpdateEscortLevel},
	{"GetBiaocheState", bnd_LC_ClientGamePlayer_GetBiaocheState},
	{"GetEscortTaskID", bnd_LC_ClientGamePlayer_GetEscortTaskID},
	{"IsGoodsEscortTaskProcessing", bnd_LC_ClientGamePlayer_IsGoodsEscortTaskProcessing},
	{"GetBornCharType", bnd_LC_ClientGamePlayer_GetBornCharType},
	{"GetCommanderTitleFrameID", bnd_LC_ClientGamePlayer_GetCommanderTitleFrameID},
	{"GetMainControllerID", bnd_LC_ClientGamePlayer_GetMainControllerID},
	{"GetBuddyStarLevel", bnd_LC_ClientGamePlayer_GetBuddyStarLevel},
	{"IsBuddyActiveUpgradGift", bnd_LC_ClientGamePlayer_IsBuddyActiveUpgradGift},
	{"ReqUpgradeBuddyStar", bnd_LC_ClientGamePlayer_ReqUpgradeBuddyStar},
	{"GetBuddyUpgradeQuality", bnd_LC_ClientGamePlayer_GetBuddyUpgradeQuality},
	{"GetBuddyUpgradeUnlockskill", bnd_LC_ClientGamePlayer_GetBuddyUpgradeUnlockskill},
	{"GetBuddyEXP", bnd_LC_ClientGamePlayer_GetBuddyEXP},
	{"GetSchemeCid", bnd_LC_ClientGamePlayer_GetSchemeCid},
	{"RequestSchemeSwitch", bnd_LC_ClientGamePlayer_RequestSchemeSwitch},
	{"RequestSchemeModify", bnd_LC_ClientGamePlayer_RequestSchemeModify},
	{"RequestSetRankTransferState", bnd_LC_ClientGamePlayer_RequestSetRankTransferState},
	{"RequestUpgradeBuddy", bnd_LC_ClientGamePlayer_RequestUpgradeBuddy},
	{"GetBuddyCombateScore", bnd_LC_ClientGamePlayer_GetBuddyCombateScore},
	{"GetBuddyEquipShowLevel", bnd_LC_ClientGamePlayer_GetBuddyEquipShowLevel},
	{"GetBuddyShowRank", bnd_LC_ClientGamePlayer_GetBuddyShowRank},
	{"GetCommanderEquipReinforceLevel", bnd_LC_ClientGamePlayer_GetCommanderEquipReinforceLevel},
	{"GetCommanderEquipRefineLevel", bnd_LC_ClientGamePlayer_GetCommanderEquipRefineLevel},
	{"GetCommanderEquipModingSpiritLevel", bnd_LC_ClientGamePlayer_GetCommanderEquipModingSpiritLevel},
	{"RequestSetEquipShowLevel", bnd_LC_ClientGamePlayer_RequestSetEquipShowLevel},
	{"RequestSetCommanderEquipSuitLevel", bnd_LC_ClientGamePlayer_RequestSetCommanderEquipSuitLevel},
	{"RequestSubModingSpirit", bnd_LC_ClientGamePlayer_RequestSubModingSpirit},
	{"GetSubEquipMoldingAttribValue", bnd_LC_ClientGamePlayer_GetSubEquipMoldingAttribValue},
	{"GetSubEquipSuitMoldingAttribValue", bnd_LC_ClientGamePlayer_GetSubEquipSuitMoldingAttribValue},
	{"GetSubEquipSuitMoldingAttribPercent", bnd_LC_ClientGamePlayer_GetSubEquipSuitMoldingAttribPercent},
	{"GetCurrentTransform", bnd_LC_ClientGamePlayer_GetCurrentTransform},
	{"IsBuddyTransformActive", bnd_LC_ClientGamePlayer_IsBuddyTransformActive},
	{"GetTransformInvaildTime", bnd_LC_ClientGamePlayer_GetTransformInvaildTime},
	{"GetActiveBuddyAllScore", bnd_LC_ClientGamePlayer_GetActiveBuddyAllScore},
	{"GetGuildRewardIsValid", bnd_LC_ClientGamePlayer_GetGuildRewardIsValid},
	{"GetOpenBagRemainSeconds", bnd_LC_ClientGamePlayer_GetOpenBagRemainSeconds},
	{"GetUnlockSlotNum", bnd_LC_ClientGamePlayer_GetUnlockSlotNum},
	{"GetUnlockSlotInit", bnd_LC_ClientGamePlayer_GetUnlockSlotInit},
	{"GetSkillUnlockLevel", bnd_LC_ClientGamePlayer_GetSkillUnlockLevel},
	{"IsBuddy", bnd_LC_ClientGamePlayer_IsBuddy},
	{"IsBuddyInstance", bnd_LC_ClientGamePlayer_IsBuddyInstance},
	{"GetRestSwapCoolDown", bnd_LC_ClientGamePlayer_GetRestSwapCoolDown},
	{"GetRestRespawnCoolDown", bnd_LC_ClientGamePlayer_GetRestRespawnCoolDown},
	{"GetMaxSwapCD", bnd_LC_ClientGamePlayer_GetMaxSwapCD},
	{"IsBuddyDead", bnd_LC_ClientGamePlayer_IsBuddyDead},
	{"IsAllBuddyDead", bnd_LC_ClientGamePlayer_IsAllBuddyDead},
	{"GetBuddyObjectID", bnd_LC_ClientGamePlayer_GetBuddyObjectID},
	{"GetBuddyPlayerBasePtr", bnd_LC_ClientGamePlayer_GetBuddyPlayerBasePtr},
	{"CheckBuddyActivateSkill", bnd_LC_ClientGamePlayer_CheckBuddyActivateSkill},
	{"RequestAchievementReward", bnd_LC_ClientGamePlayer_RequestAchievementReward},
	{"RequestAchievementPointReward", bnd_LC_ClientGamePlayer_RequestAchievementPointReward},
	{"RequestSevenDaysAchievementPointReward", bnd_LC_ClientGamePlayer_RequestSevenDaysAchievementPointReward},
	{"ReqSetAtvChargeRedPoint", bnd_LC_ClientGamePlayer_ReqSetAtvChargeRedPoint},
	{"GetAtvChargeRedPointState", bnd_LC_ClientGamePlayer_GetAtvChargeRedPointState},
	{"IsFinishedAchievement", bnd_LC_ClientGamePlayer_IsFinishedAchievement},
	{"RequestActiveStarVein", bnd_LC_ClientGamePlayer_RequestActiveStarVein},
	{"RequestGetStarVeinGoalReward", bnd_LC_ClientGamePlayer_RequestGetStarVeinGoalReward},
	{"GetActiveStarVeinIds", bnd_LC_ClientGamePlayer_GetActiveStarVeinIds},
	{"GetActiveStarVeinGoalIds", bnd_LC_ClientGamePlayer_GetActiveStarVeinGoalIds},
	{"GetStarVeinScore", bnd_LC_ClientGamePlayer_GetStarVeinScore},
	{"GetBuddySkillUsableCount", bnd_LC_ClientGamePlayer_GetBuddySkillUsableCount},
	{"GetBuddySkillMaxUsableCount", bnd_LC_ClientGamePlayer_GetBuddySkillMaxUsableCount},
	{"PlayBossWarningFx", bnd_LC_ClientGamePlayer_PlayBossWarningFx},
	{"RequestEquipRune", bnd_LC_ClientGamePlayer_RequestEquipRune},
	{"SetCimeliaGainNew", bnd_LC_ClientGamePlayer_SetCimeliaGainNew},
	{"GetCimeliaGainNew", bnd_LC_ClientGamePlayer_GetCimeliaGainNew},
	{"RequestOnekeyEquipRune", bnd_LC_ClientGamePlayer_RequestOnekeyEquipRune},
	{"RequestUnEquipRune", bnd_LC_ClientGamePlayer_RequestUnEquipRune},
	{"RequestOnekeyUnEquipRune", bnd_LC_ClientGamePlayer_RequestOnekeyUnEquipRune},
	{"RequestLevelUpRune", bnd_LC_ClientGamePlayer_RequestLevelUpRune},
	{"RequestStarUpRune", bnd_LC_ClientGamePlayer_RequestStarUpRune},
	{"RequestResetUpRune", bnd_LC_ClientGamePlayer_RequestResetUpRune},
	{"RequestRuneReward", bnd_LC_ClientGamePlayer_RequestRuneReward},
	{"GetRuneEntry", bnd_LC_ClientGamePlayer_GetRuneEntry},
	{"GetRuneRewardDrawed", bnd_LC_ClientGamePlayer_GetRuneRewardDrawed},
	{"GetRuneRecord", bnd_LC_ClientGamePlayer_GetRuneRecord},
	{"GetRuneRewardPrompt", bnd_LC_ClientGamePlayer_GetRuneRewardPrompt},
	{"GetRuneRecordCount", bnd_LC_ClientGamePlayer_GetRuneRecordCount},
	{"GetRuneBuddySlotDressState", bnd_LC_ClientGamePlayer_GetRuneBuddySlotDressState},
	{"ReqTakeVipNewReward", bnd_LC_ClientGamePlayer_ReqTakeVipNewReward},
	{"GetVipNewLevel", bnd_LC_ClientGamePlayer_GetVipNewLevel},
	{"GetCommanderTitleLevel", bnd_LC_ClientGamePlayer_GetCommanderTitleLevel},
	{"GetCommanderTitleOpen", bnd_LC_ClientGamePlayer_GetCommanderTitleOpen},
	{"GetSpecialTrainingLevel", bnd_LC_ClientGamePlayer_GetSpecialTrainingLevel},
	{"GetSpecialTrainingMaxLevel", bnd_LC_ClientGamePlayer_GetSpecialTrainingMaxLevel},
	{"GetCommanderTitleCurInfo", bnd_LC_ClientGamePlayer_GetCommanderTitleCurInfo},
	{"GetGuildBattleTaskInfo", bnd_LC_ClientGamePlayer_GetGuildBattleTaskInfo},
	{"GetGuildBattleTaskTabNames", bnd_LC_ClientGamePlayer_GetGuildBattleTaskTabNames},
	{"IsThemeACTRaidBossRewardToken", bnd_LC_ClientGamePlayer_IsThemeACTRaidBossRewardToken},
	{"ReqThemeACTRaidBossRewardInfo", bnd_LC_ClientGamePlayer_ReqThemeACTRaidBossRewardInfo},
	{"ReqThemeACTAutoExchange", bnd_LC_ClientGamePlayer_ReqThemeACTAutoExchange},
	{"ReqThemeACTADAutoShow", bnd_LC_ClientGamePlayer_ReqThemeACTADAutoShow},
	{"IsThemeACTRaidBossPrompt", bnd_LC_ClientGamePlayer_IsThemeACTRaidBossPrompt},
	{"ReqThemeACTRaidBossPrompt", bnd_LC_ClientGamePlayer_ReqThemeACTRaidBossPrompt},
	{"IsGuildBattleTaskRewardToken", bnd_LC_ClientGamePlayer_IsGuildBattleTaskRewardToken},
	{"IsGuildBattleTaskPrompt", bnd_LC_ClientGamePlayer_IsGuildBattleTaskPrompt},
	{"GetThemeActivityTasks", bnd_LC_ClientGamePlayer_GetThemeActivityTasks},
	{"IsThemeActivityTasksPrompt", bnd_LC_ClientGamePlayer_IsThemeActivityTasksPrompt},
	{"GetThemeActivityRaidTasksInfos", bnd_LC_ClientGamePlayer_GetThemeActivityRaidTasksInfos},
	{"GetTotalVipNewBonusPercentIncrease", bnd_LC_ClientGamePlayer_GetTotalVipNewBonusPercentIncrease},
	{"GetVipPriviligeAddTimesByType", bnd_LC_ClientGamePlayer_GetVipPriviligeAddTimesByType},
	{"GetSpecialTrainingTaskInfo", bnd_LC_ClientGamePlayer_GetSpecialTrainingTaskInfo},
	{"ReqTakeSpecialTrainingReward", bnd_LC_ClientGamePlayer_ReqTakeSpecialTrainingReward},
	{"ReqTakeCommanderTitleUpgradeReward", bnd_LC_ClientGamePlayer_ReqTakeCommanderTitleUpgradeReward},
	{"GetRaidGloryTotalStarNum", bnd_LC_ClientGamePlayer_GetRaidGloryTotalStarNum},
	{"GetRaidGloryPointRecoverNextTimestamp", bnd_LC_ClientGamePlayer_GetRaidGloryPointRecoverNextTimestamp},
	{"GetRaidGloryPointRecoverEndTimestamp", bnd_LC_ClientGamePlayer_GetRaidGloryPointRecoverEndTimestamp},
	{"GetRaidGloryChapterStarNum", bnd_LC_ClientGamePlayer_GetRaidGloryChapterStarNum},
	{"GetQuickRaidGloryCount", bnd_LC_ClientGamePlayer_GetQuickRaidGloryCount},
	{"HasNotTakeReward", bnd_LC_ClientGamePlayer_HasNotTakeReward},
	{"ReqGetYijiTuxiStageReward", bnd_LC_ClientGamePlayer_ReqGetYijiTuxiStageReward},
	{"ReqGetYijiXunbaoStageReward", bnd_LC_ClientGamePlayer_ReqGetYijiXunbaoStageReward},
	{"ReqGetToyIslandStageReward", bnd_LC_ClientGamePlayer_ReqGetToyIslandStageReward},
	{"ReqGetRotaryTableReward", bnd_LC_ClientGamePlayer_ReqGetRotaryTableReward},
	{"ReqSetRotaryTableAnimation", bnd_LC_ClientGamePlayer_ReqSetRotaryTableAnimation},
	{"ReqGetSubValue", bnd_LC_ClientGamePlayer_ReqGetSubValue},
	{"GetBestGuildFinishedTaskNum", bnd_LC_ClientGamePlayer_GetBestGuildFinishedTaskNum},
	{"GetChargedToday", bnd_LC_ClientGamePlayer_GetChargedToday},
	{"GetSkipAnimSetting", bnd_LC_ClientGamePlayer_GetSkipAnimSetting},
	{"GetRotaryRewardIdx", bnd_LC_ClientGamePlayer_GetRotaryRewardIdx},
	{"GetRotaryRewardRecord", bnd_LC_ClientGamePlayer_GetRotaryRewardRecord},
	{"GetRotaryRewardValidTimes", bnd_LC_ClientGamePlayer_GetRotaryRewardValidTimes},
	{"GetRotaryEndTime", bnd_LC_ClientGamePlayer_GetRotaryEndTime},
	{"GetYijiTuxiKillCount", bnd_LC_ClientGamePlayer_GetYijiTuxiKillCount},
	{"GetYijiXunbaoKillCount", bnd_LC_ClientGamePlayer_GetYijiXunbaoKillCount},
	{"GetToyIslandKillCount", bnd_LC_ClientGamePlayer_GetToyIslandKillCount},
	{"GetYijiTuxiRewardStage", bnd_LC_ClientGamePlayer_GetYijiTuxiRewardStage},
	{"GetYijiTuxiMaxStage", bnd_LC_ClientGamePlayer_GetYijiTuxiMaxStage},
	{"GetYijiXunbaoRewardStage", bnd_LC_ClientGamePlayer_GetYijiXunbaoRewardStage},
	{"GetYijiXunbaoMaxStage", bnd_LC_ClientGamePlayer_GetYijiXunbaoMaxStage},
	{"GetToyIslandRewardStage", bnd_LC_ClientGamePlayer_GetToyIslandRewardStage},
	{"GetToyIslandMaxStage", bnd_LC_ClientGamePlayer_GetToyIslandMaxStage},
	{"GetRaidGloryChapterRewardRecord", bnd_LC_ClientGamePlayer_GetRaidGloryChapterRewardRecord},
	{"GetRaidGloryHighestMap", bnd_LC_ClientGamePlayer_GetRaidGloryHighestMap},
	{"ReqReceiveGloryDailyReward", bnd_LC_ClientGamePlayer_ReqReceiveGloryDailyReward},
	{"GetGloryDailRewardDrawed", bnd_LC_ClientGamePlayer_GetGloryDailRewardDrawed},
	{"GetRaidGloryCurDailyReward", bnd_LC_ClientGamePlayer_GetRaidGloryCurDailyReward},
	{"GetRaidGloryMyMissionIdx", bnd_LC_ClientGamePlayer_GetRaidGloryMyMissionIdx},
	{"ReqQuickRaidNew", bnd_LC_ClientGamePlayer_ReqQuickRaidNew},
	{"ReqGetChapterRaidStarReward", bnd_LC_ClientGamePlayer_ReqGetChapterRaidStarReward},
	{"IsVipNewRewardToken", bnd_LC_ClientGamePlayer_IsVipNewRewardToken},
	{"GetVipNewTaskState", bnd_LC_ClientGamePlayer_GetVipNewTaskState},
	{"IsVipNewOpen", bnd_LC_ClientGamePlayer_IsVipNewOpen},
	{"HasNottakenVipNewReward", bnd_LC_ClientGamePlayer_HasNottakenVipNewReward},
	{"GetSevenDaysActivityEndTime", bnd_LC_ClientGamePlayer_GetSevenDaysActivityEndTime},
	{"GetSevenDaysRewardEndTime", bnd_LC_ClientGamePlayer_GetSevenDaysRewardEndTime},
	{"GetOfferTaskRefreshTimes", bnd_LC_ClientGamePlayer_GetOfferTaskRefreshTimes},
	{"GetOfferTaskAcceptTimes", bnd_LC_ClientGamePlayer_GetOfferTaskAcceptTimes},
	{"GetFirstDayLoginRewardTime", bnd_LC_ClientGamePlayer_GetFirstDayLoginRewardTime},
	{"GetCollectBossJPCount", bnd_LC_ClientGamePlayer_GetCollectBossJPCount},
	{"GetCommanderActiviteFrameCount", bnd_LC_ClientGamePlayer_GetCommanderActiviteFrameCount},
	{"GetNewCommanderActiviteFrameCount", bnd_LC_ClientGamePlayer_GetNewCommanderActiviteFrameCount},
	{"GetCommanderActiviteHeadCount", bnd_LC_ClientGamePlayer_GetCommanderActiviteHeadCount},
	{"GetNewCommanderActiviteHeadCount", bnd_LC_ClientGamePlayer_GetNewCommanderActiviteHeadCount},
	{"IsCommanderFrameNew", bnd_LC_ClientGamePlayer_IsCommanderFrameNew},
	{"IsCommanderFrameActivite", bnd_LC_ClientGamePlayer_IsCommanderFrameActivite},
	{"IsCommanderHeadNew", bnd_LC_ClientGamePlayer_IsCommanderHeadNew},
	{"RequestSetCommanderFrameFlag", bnd_LC_ClientGamePlayer_RequestSetCommanderFrameFlag},
	{"RequestSetCommanderHeadFlag", bnd_LC_ClientGamePlayer_RequestSetCommanderHeadFlag},
	{"RequestSetCommanderFrame", bnd_LC_ClientGamePlayer_RequestSetCommanderFrame},
	{"RequestSetCommanderHead", bnd_LC_ClientGamePlayer_RequestSetCommanderHead},
	{"RequestBuddyCombatComposition", bnd_LC_ClientGamePlayer_RequestBuddyCombatComposition},
	{"RequestSetBuddyTransform", bnd_LC_ClientGamePlayer_RequestSetBuddyTransform},
	{"GetBuddyCombatCommanderScore", bnd_LC_ClientGamePlayer_GetBuddyCombatCommanderScore},
	{"GetBuddyCombatChainScore", bnd_LC_ClientGamePlayer_GetBuddyCombatChainScore},
	{"GetBuddyRuneSkillCombatScoreBonus", bnd_LC_ClientGamePlayer_GetBuddyRuneSkillCombatScoreBonus},
	{"RequestPlayerPKInfo", bnd_LC_ClientGamePlayer_RequestPlayerPKInfo},
	{"GetCombatPKMyProgress", bnd_LC_ClientGamePlayer_GetCombatPKMyProgress},
	{"GetCombatCompareMyInfo", bnd_LC_ClientGamePlayer_GetCombatCompareMyInfo},
	{"GetCombatCompareOtherInfo", bnd_LC_ClientGamePlayer_GetCombatCompareOtherInfo},
	{"ReqBuyRareSubDevaEyeTransform", bnd_LC_ClientGamePlayer_ReqBuyRareSubDevaEyeTransform},
	{"CheckRareSubState", bnd_LC_ClientGamePlayer_CheckRareSubState},
	{"ReqBestGuildRankInfo", bnd_LC_ClientGamePlayer_ReqBestGuildRankInfo},
	{"GetBestGuildGoalRecordProgress", bnd_LC_ClientGamePlayer_GetBestGuildGoalRecordProgress},
	{"GetBestGuildGoalRecordPoint", bnd_LC_ClientGamePlayer_GetBestGuildGoalRecordPoint},
	{"ReqGuildBattleFightRecord", bnd_LC_ClientGamePlayer_ReqGuildBattleFightRecord},
	{"ReqGuildBattleBeDefightedFlag", bnd_LC_ClientGamePlayer_ReqGuildBattleBeDefightedFlag},
	{"ReqBestGuildFinishReward", bnd_LC_ClientGamePlayer_ReqBestGuildFinishReward},
	{"GetGuildBattleBossState", bnd_LC_ClientGamePlayer_GetGuildBattleBossState},
	{"GetGuildBattleTowerState", bnd_LC_ClientGamePlayer_GetGuildBattleTowerState},
	{"GetGuildBattleFortressState", bnd_LC_ClientGamePlayer_GetGuildBattleFortressState},
	{"GetGuildBattleRoyalState", bnd_LC_ClientGamePlayer_GetGuildBattleRoyalState},
	{"ReqGuildBattleTowerInfo", bnd_LC_ClientGamePlayer_ReqGuildBattleTowerInfo},
	{"ReqGuildBattleDemageRankList", bnd_LC_ClientGamePlayer_ReqGuildBattleDemageRankList},
	{"ReqReealtimeCombatRecorder", bnd_LC_ClientGamePlayer_ReqReealtimeCombatRecorder},
	{"GuildBattlePathtoAction", bnd_LC_ClientGamePlayer_GuildBattlePathtoAction},
	{"PendingPathAttack", bnd_LC_ClientGamePlayer_PendingPathAttack},
	{"ReqGuildRankChallenge", bnd_LC_ClientGamePlayer_ReqGuildRankChallenge},
	{"ReqGuildFightRobScore", bnd_LC_ClientGamePlayer_ReqGuildFightRobScore},
	{"ReqGuildFightRobScoreReceive", bnd_LC_ClientGamePlayer_ReqGuildFightRobScoreReceive},
	{"ReqGuildFightMemberUIDs", bnd_LC_ClientGamePlayer_ReqGuildFightMemberUIDs},
	{"ReqGuildFightPlayerInfo", bnd_LC_ClientGamePlayer_ReqGuildFightPlayerInfo},
	{"GetBestGuildMapBossInfo", bnd_LC_ClientGamePlayer_GetBestGuildMapBossInfo},
	{"BestGuildConvertWorldPosToMapPos", bnd_LC_ClientGamePlayer_BestGuildConvertWorldPosToMapPos},
	{"BestGuildConvertMapPoTosWorldPos", bnd_LC_ClientGamePlayer_BestGuildConvertMapPoTosWorldPos},
	{"GetBestGuildPlayerLocation", bnd_LC_ClientGamePlayer_GetBestGuildPlayerLocation},
	{"ReqRaidBossPublicKillerInfo", bnd_LC_ClientGamePlayer_ReqRaidBossPublicKillerInfo},
	{"ReqTakeTaskExtraReward", bnd_LC_ClientGamePlayer_ReqTakeTaskExtraReward},
	{"GetTaskExtraReward", bnd_LC_ClientGamePlayer_GetTaskExtraReward},
	{"GetRegularBossGroupID", bnd_LC_ClientGamePlayer_GetRegularBossGroupID},
	{"GetRegularBossGroupCDTime", bnd_LC_ClientGamePlayer_GetRegularBossGroupCDTime},
	{"GetBossKillerInfo", bnd_LC_ClientGamePlayer_GetBossKillerInfo},
	{"GetCurrentLineNum", bnd_LC_ClientGamePlayer_GetCurrentLineNum},
	{"GetFinishMainTaskID", bnd_LC_ClientGamePlayer_GetFinishMainTaskID},
	{"GetCurrentSkillTypeID", bnd_LC_ClientGamePlayer_GetCurrentSkillTypeID},
	{"GetResourceRetrieve", bnd_LC_ClientGamePlayer_GetResourceRetrieve},
	{"ReqCmdEquipSuitCollectReward", bnd_LC_ClientGamePlayer_ReqCmdEquipSuitCollectReward},
	{"GetCmdEquipSuitCollectState", bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectState},
	{"GetCmdEquipSuitCollectItemState", bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectItemState},
	{"GetCmdEquipSuitCollectRewardStateInfo", bnd_LC_ClientGamePlayer_GetCmdEquipSuitCollectRewardStateInfo},
	{"IsCmdEquipSuitCollectLevelPrompt", bnd_LC_ClientGamePlayer_IsCmdEquipSuitCollectLevelPrompt},
	{"IsCmdEquipSuitCollectPrompt", bnd_LC_ClientGamePlayer_IsCmdEquipSuitCollectPrompt},
	{"ReqResourceRetrieveReward", bnd_LC_ClientGamePlayer_ReqResourceRetrieveReward},
	{"GetResourceRetrieveRecordInfo", bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordInfo},
	{"GetResourceRetrievePrompt", bnd_LC_ClientGamePlayer_GetResourceRetrievePrompt},
	{"GetResourceRetrieveRecordCommanderLevel", bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordCommanderLevel},
	{"GetResourceRetrieveRecordMapID", bnd_LC_ClientGamePlayer_GetResourceRetrieveRecordMapID},
	{"GetFirstChargeTime", bnd_LC_ClientGamePlayer_GetFirstChargeTime},
	{"IsFirstChargeRewardToken", bnd_LC_ClientGamePlayer_IsFirstChargeRewardToken},
	{"ReqVipQuickHook", bnd_LC_ClientGamePlayer_ReqVipQuickHook},
	{"GetVipQuickHookReward", bnd_LC_ClientGamePlayer_GetVipQuickHookReward},
	{"GetVipQuickHookTime", bnd_LC_ClientGamePlayer_GetVipQuickHookTime},
	{"GetDrawCumulateReward", bnd_LC_ClientGamePlayer_GetDrawCumulateReward},
	{"GetNewAchievementStarNum", bnd_LC_ClientGamePlayer_GetNewAchievementStarNum},
	{"GetNewAchievementRewardCord", bnd_LC_ClientGamePlayer_GetNewAchievementRewardCord},
	{"ReqNewAchievementReward", bnd_LC_ClientGamePlayer_ReqNewAchievementReward},
	{"ReqSetGuildProfitHideName", bnd_LC_ClientGamePlayer_ReqSetGuildProfitHideName},
	{"ReqGetGuildProfitReward", bnd_LC_ClientGamePlayer_ReqGetGuildProfitReward},
	{"ReqGetGuildProfitRewardOnKeyReceive", bnd_LC_ClientGamePlayer_ReqGetGuildProfitRewardOnKeyReceive},
	{"GetGuildProfitShowName", bnd_LC_ClientGamePlayer_GetGuildProfitShowName},
	{"GetGuildProfitLevel", bnd_LC_ClientGamePlayer_GetGuildProfitLevel},
	{"GetGuildProfitLevelExp", bnd_LC_ClientGamePlayer_GetGuildProfitLevelExp},
	{"GetGuildProfitCrystalLevel", bnd_LC_ClientGamePlayer_GetGuildProfitCrystalLevel},
	{"GetGuildProfitCrystalLevelExp", bnd_LC_ClientGamePlayer_GetGuildProfitCrystalLevelExp},
	{"ReqGetGuildCrystalReward", bnd_LC_ClientGamePlayer_ReqGetGuildCrystalReward},
	{"GetGuildProfitCrystalNumber", bnd_LC_ClientGamePlayer_GetGuildProfitCrystalNumber},
	{"GetGuildProfitCrystalMinInvaildTime", bnd_LC_ClientGamePlayer_GetGuildProfitCrystalMinInvaildTime},
	{"GetGuildBossActivityState", bnd_LC_ClientGamePlayer_GetGuildBossActivityState},
	{"ReqGuildBossActivityRank", bnd_LC_ClientGamePlayer_ReqGuildBossActivityRank},
	{"ReqGuildBossActivityQuit", bnd_LC_ClientGamePlayer_ReqGuildBossActivityQuit},
	{"GetGuildBossActivityPreMapFinish", bnd_LC_ClientGamePlayer_GetGuildBossActivityPreMapFinish},
	{"GetGuildBossActivityOpen", bnd_LC_ClientGamePlayer_GetGuildBossActivityOpen},
	{"ReqGuildBossActivityOpen", bnd_LC_ClientGamePlayer_ReqGuildBossActivityOpen},
	{"GetGuildBossActivityRank", bnd_LC_ClientGamePlayer_GetGuildBossActivityRank},
	{"GetGuildBossActivityMyRank", bnd_LC_ClientGamePlayer_GetGuildBossActivityMyRank},
	{"ReqGetTreasurePos", bnd_LC_ClientGamePlayer_ReqGetTreasurePos},
	{"GetTreasurePosInfo", bnd_LC_ClientGamePlayer_GetTreasurePosInfo},
	{"IsCanDigTreasure", bnd_LC_ClientGamePlayer_IsCanDigTreasure},
	{"CheckTreasureEvents", bnd_LC_ClientGamePlayer_CheckTreasureEvents},
	{"ReqGameRestartReward", bnd_LC_ClientGamePlayer_ReqGameRestartReward},
	{"ReqLotteryDraw", bnd_LC_ClientGamePlayer_ReqLotteryDraw},
	{"ReqLotteryExtraReward", bnd_LC_ClientGamePlayer_ReqLotteryExtraReward},
	{"ReqChargeProfitReward", bnd_LC_ClientGamePlayer_ReqChargeProfitReward},
	{"ReqEquipCommanderEquip", bnd_LC_ClientGamePlayer_ReqEquipCommanderEquip},
	{"ReqCommanderEquipIntensify", bnd_LC_ClientGamePlayer_ReqCommanderEquipIntensify},
	{"ReqCommanderEquipRefine", bnd_LC_ClientGamePlayer_ReqCommanderEquipRefine},
	{"ReqCommanderEquipSoul", bnd_LC_ClientGamePlayer_ReqCommanderEquipSoul},
	{"ReqUnEquipSubEquip", bnd_LC_ClientGamePlayer_ReqUnEquipSubEquip},
	{"ReqAddNoviceTutorial", bnd_LC_ClientGamePlayer_ReqAddNoviceTutorial},
	{"GetTutorialProgress", bnd_LC_ClientGamePlayer_GetTutorialProgress},
	{"ReqGetBuyNoPayReturn", bnd_LC_ClientGamePlayer_ReqGetBuyNoPayReturn},
	{"ReqBuyNoPayItem", bnd_LC_ClientGamePlayer_ReqBuyNoPayItem},
	{"GetBuyNoPayResult", bnd_LC_ClientGamePlayer_GetBuyNoPayResult},
	{"ReqGetNoviceTutorialReward", bnd_LC_ClientGamePlayer_ReqGetNoviceTutorialReward},
	{"IsAchievedReward", bnd_LC_ClientGamePlayer_IsAchievedReward},
	{"GetGroupID", bnd_LC_ClientGamePlayer_GetGroupID},
	{"ReqSkyArenaGradeAward", bnd_LC_ClientGamePlayer_ReqSkyArenaGradeAward},
	{"ReqSkyArenaMyScore", bnd_LC_ClientGamePlayer_ReqSkyArenaMyScore},
	{"ReqSkyArenaCheckBattleStage", bnd_LC_ClientGamePlayer_ReqSkyArenaCheckBattleStage},
	{"RewardIsAchieved", bnd_LC_ClientGamePlayer_RewardIsAchieved},
	{"GetSkyArenaMaxPoint", bnd_LC_ClientGamePlayer_GetSkyArenaMaxPoint},
	{"ReqSummitArenaGroupStage", bnd_LC_ClientGamePlayer_ReqSummitArenaGroupStage},
	{"ReqSummitArenaMyGroupStage", bnd_LC_ClientGamePlayer_ReqSummitArenaMyGroupStage},
	{"ReqSummitArenaAgainstList", bnd_LC_ClientGamePlayer_ReqSummitArenaAgainstList},
	{"ReqSummitArenaInfo", bnd_LC_ClientGamePlayer_ReqSummitArenaInfo},
	{"ReqSummitArenaGroupStageEntryList", bnd_LC_ClientGamePlayer_ReqSummitArenaGroupStageEntryList},
	{"GetSeasonStartTime", bnd_LC_ClientGamePlayer_GetSeasonStartTime},
	{"GetCanEnterSummitArena", bnd_LC_ClientGamePlayer_GetCanEnterSummitArena},
	{"GetStageType", bnd_LC_ClientGamePlayer_GetStageType},
	{"GetShowTime", bnd_LC_ClientGamePlayer_GetShowTime},
	{"GetStageTime", bnd_LC_ClientGamePlayer_GetStageTime},
	{"GetBattleTime", bnd_LC_ClientGamePlayer_GetBattleTime},
	{"GetStageEndTime", bnd_LC_ClientGamePlayer_GetStageEndTime},
	{"GetStageSetTime", bnd_LC_ClientGamePlayer_GetStageSetTime},
	{"SetBattleTime", bnd_LC_ClientGamePlayer_SetBattleTime},
	{"SetShowTime", bnd_LC_ClientGamePlayer_SetShowTime},
	{"GetBattleTimeStamp", bnd_LC_ClientGamePlayer_GetBattleTimeStamp},
	{"GetShowTimeStamp", bnd_LC_ClientGamePlayer_GetShowTimeStamp},
	{"GetOwnRank", bnd_LC_ClientGamePlayer_GetOwnRank},
	{"GetMyTopType", bnd_LC_ClientGamePlayer_GetMyTopType},
	{"GetTotalGroupId", bnd_LC_ClientGamePlayer_GetTotalGroupId},
	{"GetEveryGroupData", bnd_LC_ClientGamePlayer_GetEveryGroupData},
	{"GetMyGroupData", bnd_LC_ClientGamePlayer_GetMyGroupData},
	{"GetEntryListData", bnd_LC_ClientGamePlayer_GetEntryListData},
	{"GetAgainstData", bnd_LC_ClientGamePlayer_GetAgainstData},
	{"ReqBonFirePartyLeftBuyItemTimes", bnd_LC_ClientGamePlayer_ReqBonFirePartyLeftBuyItemTimes},
	{"ReqBonFirePartyBuyInfo", bnd_LC_ClientGamePlayer_ReqBonFirePartyBuyInfo},
	{"GetLeftTimes", bnd_LC_ClientGamePlayer_GetLeftTimes},
	{"GetBuyTimes", bnd_LC_ClientGamePlayer_GetBuyTimes},
	{"GetRate", bnd_LC_ClientGamePlayer_GetRate},
	{"SetIsSwitich", bnd_LC_ClientGamePlayer_SetIsSwitich},
	{"GetIsSwitich", bnd_LC_ClientGamePlayer_GetIsSwitich},
	{"ReqTranscribeFightByUID", bnd_LC_ClientGamePlayer_ReqTranscribeFightByUID},
	{"ReqSetMapBossFlag", bnd_LC_ClientGamePlayer_ReqSetMapBossFlag},
	{"GetBossFlagList", bnd_LC_ClientGamePlayer_GetBossFlagList},
	{"GetMapEnterRecord", bnd_LC_ClientGamePlayer_GetMapEnterRecord},
	{"ReqAddCanEnterMapID", bnd_LC_ClientGamePlayer_ReqAddCanEnterMapID},
	{"ReqGamestoryBatch", bnd_LC_ClientGamePlayer_ReqGamestoryBatch},
	{"ReqGetPlayerSchemeData", bnd_LC_ClientGamePlayer_ReqGetPlayerSchemeData},
	{"ReqGetRankInfo", bnd_LC_ClientGamePlayer_ReqGetRankInfo},
	{"ReqGetSummitSingleData", bnd_LC_ClientGamePlayer_ReqGetSummitSingleData},
	{"GetGuessBaseData", bnd_LC_ClientGamePlayer_GetGuessBaseData},
	{"ReqSetSummitGuessInfo", bnd_LC_ClientGamePlayer_ReqSetSummitGuessInfo},
	{"ReqGetSummitSupportInfo", bnd_LC_ClientGamePlayer_ReqGetSummitSupportInfo},
	{"GetGuessLogDataByIndex", bnd_LC_ClientGamePlayer_GetGuessLogDataByIndex},
	{"GetLogSize", bnd_LC_ClientGamePlayer_GetLogSize},
	{"ReqGetSummitWinner", bnd_LC_ClientGamePlayer_ReqGetSummitWinner},
	{"SetGuessLog", bnd_LC_ClientGamePlayer_SetGuessLog},
	{"ReqSummitArenaHonor", bnd_LC_ClientGamePlayer_ReqSummitArenaHonor},
	{"ReqGetMyTopHonor", bnd_LC_ClientGamePlayer_ReqGetMyTopHonor},
	{"GetTopPlayerInfo", bnd_LC_ClientGamePlayer_GetTopPlayerInfo},
	{"GetLogMaxIndex", bnd_LC_ClientGamePlayer_GetLogMaxIndex},
	{"GetSkyArenaSettleReward", bnd_LC_ClientGamePlayer_GetSkyArenaSettleReward},
	{"GetSkyArenaSettleReportList", bnd_LC_ClientGamePlayer_GetSkyArenaSettleReportList},
	{"GetZoneId", bnd_LC_ClientGamePlayer_GetZoneId},
	{"GetTopErr", bnd_LC_ClientGamePlayer_GetTopErr},
	{"GetTopPlayersSize", bnd_LC_ClientGamePlayer_GetTopPlayersSize},
	{"SetNotifyInGameFlag", bnd_LC_ClientGamePlayer_SetNotifyInGameFlag},
	{"GetGuildDamageRank", bnd_LC_ClientGamePlayer_GetGuildDamageRank},
	{"ReqGetGuildDamageRank", bnd_LC_ClientGamePlayer_ReqGetGuildDamageRank},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGamePlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGamePlayer", "LC_PlayerBase", lib_LC_ClientGamePlayer, bnd_LuaDestroy_LC_ClientGamePlayer);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameStoryManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameStoryManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameStoryManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameStoryManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameStoryManager* h = (LC_ClientGameStoryManager*) binder.CheckUserType(1, "LC_ClientGameStoryManager");
		binder.CheckUserType(1, "LC_ClientGameStoryManager");
		return 0;
	}
	static int bnd_LC_ClientGameStoryManager_CheckGameStoryStartInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::CheckGameStoryStartInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetActiveGameStoryInfoByTrueID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetActiveGameStoryInfoByTrueID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryInfoCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryInfoCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryTimeSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryTimeSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryTimeSlotOnWeekday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryTimeSlotOnWeekday, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryMonsterState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryMonsterState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryMonsterTimestamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryMonsterTimestamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryTabType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryTabType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryTodayActiveStoryNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryTodayActiveStoryNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryTodayFinisnedStoryNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryTodayFinisnedStoryNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_UpdateGameStoryRaidPassed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::UpdateGameStoryRaidPassed, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGameStoryManager_GetActiveStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetActiveStoryID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_IsMapResIDInGameStory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::IsMapResIDInGameStory, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GameStoryCanJoin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GameStoryCanJoin, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_SetTargetPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::SetTargetPos, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGameStoryManager_GetVIPBuyTimesByStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetVIPBuyTimesByStoryID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetVIPTotalTimesByStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetVIPTotalTimesByStoryID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetVIPCostTimesByStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetVIPCostTimesByStoryID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_GetGameStoryIDBylMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::GetGameStoryIDBylMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameStoryManager_ResetNumberLimitRemainTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameStoryManager* pkAPI = (LC_ClientGameStoryManager*)binder.CheckUserType(1, "LC_ClientGameStoryManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGameStoryManager::ResetNumberLimitRemainTimes, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ClientGameStoryManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameStoryManager},
	{"CheckGameStoryStartInfo", bnd_LC_ClientGameStoryManager_CheckGameStoryStartInfo},
	{"GetGameStoryInfo", bnd_LC_ClientGameStoryManager_GetGameStoryInfo},
	{"GetGameStoryInfoByIndex", bnd_LC_ClientGameStoryManager_GetGameStoryInfoByIndex},
	{"GetActiveGameStoryInfoByTrueID", bnd_LC_ClientGameStoryManager_GetActiveGameStoryInfoByTrueID},
	{"GetGameStoryRevisionID", bnd_LC_ClientGameStoryManager_GetGameStoryRevisionID},
	{"GetGameStoryInfoCount", bnd_LC_ClientGameStoryManager_GetGameStoryInfoCount},
	{"GetGameStoryTimeSlot", bnd_LC_ClientGameStoryManager_GetGameStoryTimeSlot},
	{"GetGameStoryTimeSlotOnWeekday", bnd_LC_ClientGameStoryManager_GetGameStoryTimeSlotOnWeekday},
	{"GetGameStoryType", bnd_LC_ClientGameStoryManager_GetGameStoryType},
	{"GetGameStoryMonsterState", bnd_LC_ClientGameStoryManager_GetGameStoryMonsterState},
	{"GetGameStoryMonsterTimestamp", bnd_LC_ClientGameStoryManager_GetGameStoryMonsterTimestamp},
	{"GetGameStoryTabType", bnd_LC_ClientGameStoryManager_GetGameStoryTabType},
	{"GetGameStoryTodayActiveStoryNum", bnd_LC_ClientGameStoryManager_GetGameStoryTodayActiveStoryNum},
	{"GetGameStoryTodayFinisnedStoryNum", bnd_LC_ClientGameStoryManager_GetGameStoryTodayFinisnedStoryNum},
	{"UpdateGameStoryRaidPassed", bnd_LC_ClientGameStoryManager_UpdateGameStoryRaidPassed},
	{"GetActiveStoryID", bnd_LC_ClientGameStoryManager_GetActiveStoryID},
	{"IsMapResIDInGameStory", bnd_LC_ClientGameStoryManager_IsMapResIDInGameStory},
	{"GameStoryCanJoin", bnd_LC_ClientGameStoryManager_GameStoryCanJoin},
	{"SetTargetPos", bnd_LC_ClientGameStoryManager_SetTargetPos},
	{"GetVIPBuyTimesByStoryID", bnd_LC_ClientGameStoryManager_GetVIPBuyTimesByStoryID},
	{"GetVIPTotalTimesByStoryID", bnd_LC_ClientGameStoryManager_GetVIPTotalTimesByStoryID},
	{"GetVIPCostTimesByStoryID", bnd_LC_ClientGameStoryManager_GetVIPCostTimesByStoryID},
	{"GetGameStoryIDBylMapResID", bnd_LC_ClientGameStoryManager_GetGameStoryIDBylMapResID},
	{"ResetNumberLimitRemainTimes", bnd_LC_ClientGameStoryManager_ResetNumberLimitRemainTimes},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameStoryManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameStoryManager", 0, lib_LC_ClientGameStoryManager, bnd_LuaDestroy_LC_ClientGameStoryManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientOpenAbilityManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientOpenAbilityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientOpenAbilityManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientOpenAbilityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientOpenAbilityManager* h = (LC_ClientOpenAbilityManager*) binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		return 0;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetAttrNumberByOpenAbilityID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetAttrNumberByOpenAbilityID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityAttrSignInNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityAttrSignInNumber, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityEndTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityEndTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityDesp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityDesp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityDesp2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityDesp2, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOnLineTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityOnLineTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilitySkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilitySkillID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOpenLevelID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityOpenLevelID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityCombat(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityCombat, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetFirstColdDownTimeIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetFirstColdDownTimeIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityIndexByKeyType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityIndexByKeyType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetFirstCanOpenLevelIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetFirstCanOpenLevelIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOpenLevelCharLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientOpenAbilityManager* pkAPI = (LC_ClientOpenAbilityManager*)binder.CheckUserType(1, "LC_ClientOpenAbilityManager");
		Utility::LuaCall(*pkAPI, &LC_ClientOpenAbilityManager::GetOpenAbilityOpenLevelCharLevel, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientOpenAbilityManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientOpenAbilityManager},
	{"GetAttrNumberByOpenAbilityID", bnd_LC_ClientOpenAbilityManager_GetAttrNumberByOpenAbilityID},
	{"GetOpenAbilityAttrSignInNumber", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityAttrSignInNumber},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientOpenAbilityManager_GetDirtyFlagRevisionID},
	{"GetOpenAbilityEndTimeStamp", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityEndTimeStamp},
	{"GetOpenAbilityDesp", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityDesp},
	{"GetOpenAbilityDesp2", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityDesp2},
	{"GetOpenAbilityOnLineTime", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOnLineTime},
	{"GetOpenAbilityType", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityType},
	{"GetOpenAbilitySkillID", bnd_LC_ClientOpenAbilityManager_GetOpenAbilitySkillID},
	{"GetOpenAbilityOpenLevelID", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOpenLevelID},
	{"GetOpenAbilityCombat", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityCombat},
	{"GetFirstColdDownTimeIndex", bnd_LC_ClientOpenAbilityManager_GetFirstColdDownTimeIndex},
	{"GetOpenAbilityIndexByKeyType", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityIndexByKeyType},
	{"GetOpenAbilityState", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityState},
	{"GetFirstCanOpenLevelIndex", bnd_LC_ClientOpenAbilityManager_GetFirstCanOpenLevelIndex},
	{"GetOpenAbilityOpenLevelCharLevel", bnd_LC_ClientOpenAbilityManager_GetOpenAbilityOpenLevelCharLevel},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientOpenAbilityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientOpenAbilityManager", 0, lib_LC_ClientOpenAbilityManager, bnd_LuaDestroy_LC_ClientOpenAbilityManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientTranscriptionInfoManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientTranscriptionInfoManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientTranscriptionInfoManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientTranscriptionInfoManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientTranscriptionInfoManager* h = (LC_ClientTranscriptionInfoManager*) binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		return 0;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetTranscriptionParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetTranscriptionParam, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetTranscriptionRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetTranscriptionRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetTDNPCUpdataRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetTDNPCUpdataRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetNPCUpdataState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetNPCUpdataState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetNPCUpgradeDes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetNPCUpgradeDes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetNPCUpdataTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetNPCUpdataTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetNPCTipText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetNPCTipText, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetCampaignName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetCampaignName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetCampaignFininshCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetCampaignFininshCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetCampaignMaxFininshCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetCampaignMaxFininshCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetTodayCampaignID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetTodayCampaignID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBombInfoOfHolyTemple(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBombInfoOfHolyTemple, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleCurEnemyNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleCurEnemyNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMaxEnemyNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleMaxEnemyNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleCurStoneHp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleCurStoneHp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMaxStoneHp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleMaxStoneHp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBombState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBombState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMonsterNumRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleMonsterNumRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleHolyObjectHPRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleHolyObjectHPRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleHolyBombNumRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleHolyBombNumRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleLeftTimeRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleLeftTimeRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleTranscriptionState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTempleTranscriptionState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetHolyTmepleMapSkillCD(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetHolyTmepleMapSkillCD, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasureRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureMapName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasureMapName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasureLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasureMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasurePosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasurePosX, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasurePosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetSeekTreasurePosY, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBronzeManRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBronzeManRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBronzeManBatch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBronzeManBatch, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBronzeManTimeLeft(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBronzeManTimeLeft, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_GetBronzeManExperience(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::GetBronzeManExperience, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTranscriptionInfoManager_IsPlayerInProperPositionInSeekTreasureGameStory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTranscriptionInfoManager* pkAPI = (LC_ClientTranscriptionInfoManager*)binder.CheckUserType(1, "LC_ClientTranscriptionInfoManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTranscriptionInfoManager::IsPlayerInProperPositionInSeekTreasureGameStory, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientTranscriptionInfoManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientTranscriptionInfoManager},
	{"GetTranscriptionParam", bnd_LC_ClientTranscriptionInfoManager_GetTranscriptionParam},
	{"GetTranscriptionRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetTranscriptionRevisionID},
	{"GetTDNPCUpdataRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetTDNPCUpdataRevisionID},
	{"GetNPCUpdataState", bnd_LC_ClientTranscriptionInfoManager_GetNPCUpdataState},
	{"GetNPCUpgradeDes", bnd_LC_ClientTranscriptionInfoManager_GetNPCUpgradeDes},
	{"GetNPCUpdataTypeID", bnd_LC_ClientTranscriptionInfoManager_GetNPCUpdataTypeID},
	{"GetNPCTipText", bnd_LC_ClientTranscriptionInfoManager_GetNPCTipText},
	{"GetCampaignName", bnd_LC_ClientTranscriptionInfoManager_GetCampaignName},
	{"GetCampaignFininshCount", bnd_LC_ClientTranscriptionInfoManager_GetCampaignFininshCount},
	{"GetCampaignMaxFininshCount", bnd_LC_ClientTranscriptionInfoManager_GetCampaignMaxFininshCount},
	{"GetTodayCampaignID", bnd_LC_ClientTranscriptionInfoManager_GetTodayCampaignID},
	{"GetBombInfoOfHolyTemple", bnd_LC_ClientTranscriptionInfoManager_GetBombInfoOfHolyTemple},
	{"GetHolyTempleCurEnemyNum", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleCurEnemyNum},
	{"GetHolyTempleMaxEnemyNum", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMaxEnemyNum},
	{"GetHolyTempleCurStoneHp", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleCurStoneHp},
	{"GetHolyTempleMaxStoneHp", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMaxStoneHp},
	{"GetBombState", bnd_LC_ClientTranscriptionInfoManager_GetBombState},
	{"GetHolyTempleLeftTime", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleLeftTime},
	{"GetHolyTempleMonsterNumRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleMonsterNumRevisionID},
	{"GetHolyTempleHolyObjectHPRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleHolyObjectHPRevisionID},
	{"GetHolyTempleHolyBombNumRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleHolyBombNumRevisionID},
	{"GetHolyTempleLeftTimeRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleLeftTimeRevisionID},
	{"GetHolyTempleTranscriptionState", bnd_LC_ClientTranscriptionInfoManager_GetHolyTempleTranscriptionState},
	{"GetHolyTmepleMapSkillCD", bnd_LC_ClientTranscriptionInfoManager_GetHolyTmepleMapSkillCD},
	{"GetSeekTreasureRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureRevisionID},
	{"GetSeekTreasureMapName", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureMapName},
	{"GetSeekTreasureLeftTime", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureLeftTime},
	{"GetSeekTreasureMapResID", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasureMapResID},
	{"GetSeekTreasurePosX", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasurePosX},
	{"GetSeekTreasurePosY", bnd_LC_ClientTranscriptionInfoManager_GetSeekTreasurePosY},
	{"GetBronzeManRevisionID", bnd_LC_ClientTranscriptionInfoManager_GetBronzeManRevisionID},
	{"GetBronzeManBatch", bnd_LC_ClientTranscriptionInfoManager_GetBronzeManBatch},
	{"GetBronzeManTimeLeft", bnd_LC_ClientTranscriptionInfoManager_GetBronzeManTimeLeft},
	{"GetBronzeManExperience", bnd_LC_ClientTranscriptionInfoManager_GetBronzeManExperience},
	{"IsPlayerInProperPositionInSeekTreasureGameStory", bnd_LC_ClientTranscriptionInfoManager_IsPlayerInProperPositionInSeekTreasureGameStory},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientTranscriptionInfoManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientTranscriptionInfoManager", 0, lib_LC_ClientTranscriptionInfoManager, bnd_LuaDestroy_LC_ClientTranscriptionInfoManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////GameStoryRaidInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_GameStoryRaidInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "GameStoryRaidInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_GameStoryRaidInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameStoryRaidInfo* h = (GameStoryRaidInfo*) binder.CheckUserType(1, "GameStoryRaidInfo");
		binder.CheckUserType(1, "GameStoryRaidInfo");
		return 0;
	}
	static int bnd_GameStoryRaidInfo_GetContentType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetContentType, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetCurRaidTID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetCurRaidTID, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetStroyID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetStroyID, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetTrueStroyID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetTrueStroyID, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetActive, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_IsRaid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::IsRaid, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetEnterMinLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetEnterMinLevel, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetEnterMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetEnterMaxLevel, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetShowName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetShowName, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetIcon, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetPassState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetPassState, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetEnterCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetEnterCost, L, 2);
		return 1;
	}
	static int bnd_GameStoryRaidInfo_GetType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryRaidInfo* pkAPI = (GameStoryRaidInfo*)binder.CheckUserType(1, "GameStoryRaidInfo");
		Utility::LuaCall(*pkAPI, &GameStoryRaidInfo::GetType, L, 2);
		return 1;
	}
	static const luaL_reg lib_GameStoryRaidInfo[] = {
	{"Create", bnd_LuaCreate_GameStoryRaidInfo},
	{"GetContentType", bnd_GameStoryRaidInfo_GetContentType},
	{"GetCurRaidTID", bnd_GameStoryRaidInfo_GetCurRaidTID},
	{"GetStroyID", bnd_GameStoryRaidInfo_GetStroyID},
	{"GetTrueStroyID", bnd_GameStoryRaidInfo_GetTrueStroyID},
	{"GetActive", bnd_GameStoryRaidInfo_GetActive},
	{"IsRaid", bnd_GameStoryRaidInfo_IsRaid},
	{"GetEnterMinLevel", bnd_GameStoryRaidInfo_GetEnterMinLevel},
	{"GetEnterMaxLevel", bnd_GameStoryRaidInfo_GetEnterMaxLevel},
	{"GetShowName", bnd_GameStoryRaidInfo_GetShowName},
	{"GetIcon", bnd_GameStoryRaidInfo_GetIcon},
	{"GetPassState", bnd_GameStoryRaidInfo_GetPassState},
	{"GetEnterCost", bnd_GameStoryRaidInfo_GetEnterCost},
	{"GetType", bnd_GameStoryRaidInfo_GetType},
	{NULL, NULL}
	};
	static int luaopen_GameStoryRaidInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("GameStoryRaidInfo", 0, lib_GameStoryRaidInfo, bnd_LuaDestroy_GameStoryRaidInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////GameStoryInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_GameStoryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "GameStoryInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_GameStoryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameStoryInfo* h = (GameStoryInfo*) binder.CheckUserType(1, "GameStoryInfo");
		binder.CheckUserType(1, "GameStoryInfo");
		return 0;
	}
	static int bnd_GameStoryInfo_GetValidDays(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetValidDays, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetValid, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetStroyID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetStroyID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetTrueStroyID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetTrueStroyID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetContentType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetContentType, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetActive, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMaxEnteredTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMaxEnteredTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetType, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetAlreadyEnteredTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetAlreadyEnteredTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetAllAlreadyFinishedTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetAllAlreadyFinishedTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCurRaidTID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCurRaidTID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetGameStoryInfoRaidID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetGameStoryInfoRaidID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetResetTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetResetTime, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMapListText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMapListText, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetTimeSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetTimeSlot, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetShowName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetShowName, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetGameStoryRule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetGameStoryRule, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetDescription, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetStatisticsTips(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetStatisticsTips, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetRewardString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetRewardString, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBackImage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBackImage, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetNameImage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetNameImage, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetGameStoryGroupRecommendNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetGameStoryGroupRecommendNum, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_IsFinished(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::IsFinished, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetAlreadyFinishedTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetAlreadyFinishedTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMapListCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMapListCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMapID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_IsOpened(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::IsOpened, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBasicStatInfoCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBasicStatInfoCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetLastAreaInfosStateByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetLastAreaInfosStateByIndex, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBeginTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBeginTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetEndTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetEndTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBasicStatItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBasicStatItemCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBasicStatItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBasicStatItemInfo, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetTimeStamp, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBeginTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBeginTimeStamp, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_IsTimePassToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::IsTimePassToday, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetTabType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetTabType, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_IsRaid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::IsRaid, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetEnterMinLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetEnterMinLevel, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetEnterMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetEnterMaxLevel, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetTimeLen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetTimeLen, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetStoryRaidInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetStoryRaidInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetRaidInfoIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetRaidInfoIndex, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMapAreaListCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMapAreaListCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMapAreaID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMapAreaID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCurMapAreaIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCurMapAreaIndex, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCurMapAreaState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCurMapAreaState, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetPassedRaidCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetPassedRaidCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCanJoinRaidCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCanJoinRaidCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetRaidFreeTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetRaidFreeTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetEnterCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetEnterCost, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetNoticeText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetNoticeText, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBatchSecheduleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBatchSecheduleInfo, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBatchSecheduleExpAndCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBatchSecheduleExpAndCash, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetMonsterSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetMonsterSetting, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetNextMonsterTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetNextMonsterTimeStamp, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetNextMonsterTimeStampByBatchIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetNextMonsterTimeStampByBatchIndex, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetBasicStatTotalItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetBasicStatTotalItemCount, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetScript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetScript, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetPlayRule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetPlayRule, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCsvEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCsvEndTime, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetCsvOpenTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetCsvOpenTime, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetFirstLightTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetFirstLightTaskID, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetStoryAlreadyBuyTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetStoryAlreadyBuyTimes, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetRewardType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetRewardType, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetElementDamageType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetElementDamageType, L, 2);
		return 1;
	}
	static int bnd_GameStoryInfo_GetIsGuildActivity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameStoryInfo* pkAPI = (GameStoryInfo*)binder.CheckUserType(1, "GameStoryInfo");
		Utility::LuaCall(*pkAPI, &GameStoryInfo::GetIsGuildActivity, L, 2);
		return 1;
	}
	static const luaL_reg lib_GameStoryInfo[] = {
	{"Create", bnd_LuaCreate_GameStoryInfo},
	{"GetValidDays", bnd_GameStoryInfo_GetValidDays},
	{"GetValid", bnd_GameStoryInfo_GetValid},
	{"GetStroyID", bnd_GameStoryInfo_GetStroyID},
	{"GetTrueStroyID", bnd_GameStoryInfo_GetTrueStroyID},
	{"GetContentType", bnd_GameStoryInfo_GetContentType},
	{"GetActive", bnd_GameStoryInfo_GetActive},
	{"GetMaxEnteredTimes", bnd_GameStoryInfo_GetMaxEnteredTimes},
	{"GetType", bnd_GameStoryInfo_GetType},
	{"GetAlreadyEnteredTimes", bnd_GameStoryInfo_GetAlreadyEnteredTimes},
	{"GetAllAlreadyFinishedTimes", bnd_GameStoryInfo_GetAllAlreadyFinishedTimes},
	{"GetCurRaidTID", bnd_GameStoryInfo_GetCurRaidTID},
	{"GetGameStoryInfoRaidID", bnd_GameStoryInfo_GetGameStoryInfoRaidID},
	{"GetResetTime", bnd_GameStoryInfo_GetResetTime},
	{"GetMapListText", bnd_GameStoryInfo_GetMapListText},
	{"GetTimeSlot", bnd_GameStoryInfo_GetTimeSlot},
	{"GetShowName", bnd_GameStoryInfo_GetShowName},
	{"GetGameStoryRule", bnd_GameStoryInfo_GetGameStoryRule},
	{"GetDescription", bnd_GameStoryInfo_GetDescription},
	{"GetStatisticsTips", bnd_GameStoryInfo_GetStatisticsTips},
	{"GetRewardString", bnd_GameStoryInfo_GetRewardString},
	{"GetBackImage", bnd_GameStoryInfo_GetBackImage},
	{"GetNameImage", bnd_GameStoryInfo_GetNameImage},
	{"GetGameStoryGroupRecommendNum", bnd_GameStoryInfo_GetGameStoryGroupRecommendNum},
	{"IsFinished", bnd_GameStoryInfo_IsFinished},
	{"GetAlreadyFinishedTimes", bnd_GameStoryInfo_GetAlreadyFinishedTimes},
	{"GetMapListCount", bnd_GameStoryInfo_GetMapListCount},
	{"GetMapID", bnd_GameStoryInfo_GetMapID},
	{"IsOpened", bnd_GameStoryInfo_IsOpened},
	{"GetBasicStatInfoCount", bnd_GameStoryInfo_GetBasicStatInfoCount},
	{"GetLastAreaInfosStateByIndex", bnd_GameStoryInfo_GetLastAreaInfosStateByIndex},
	{"GetBeginTimes", bnd_GameStoryInfo_GetBeginTimes},
	{"GetEndTimes", bnd_GameStoryInfo_GetEndTimes},
	{"GetBasicStatItemCount", bnd_GameStoryInfo_GetBasicStatItemCount},
	{"GetBasicStatItemInfo", bnd_GameStoryInfo_GetBasicStatItemInfo},
	{"GetTimeStamp", bnd_GameStoryInfo_GetTimeStamp},
	{"GetBeginTimeStamp", bnd_GameStoryInfo_GetBeginTimeStamp},
	{"IsTimePassToday", bnd_GameStoryInfo_IsTimePassToday},
	{"GetTabType", bnd_GameStoryInfo_GetTabType},
	{"IsRaid", bnd_GameStoryInfo_IsRaid},
	{"GetEnterMinLevel", bnd_GameStoryInfo_GetEnterMinLevel},
	{"GetEnterMaxLevel", bnd_GameStoryInfo_GetEnterMaxLevel},
	{"GetTimeLen", bnd_GameStoryInfo_GetTimeLen},
	{"GetStoryRaidInfoByIndex", bnd_GameStoryInfo_GetStoryRaidInfoByIndex},
	{"GetRaidInfoIndex", bnd_GameStoryInfo_GetRaidInfoIndex},
	{"GetMapAreaListCount", bnd_GameStoryInfo_GetMapAreaListCount},
	{"GetMapAreaID", bnd_GameStoryInfo_GetMapAreaID},
	{"GetCurMapAreaIndex", bnd_GameStoryInfo_GetCurMapAreaIndex},
	{"GetCurMapAreaState", bnd_GameStoryInfo_GetCurMapAreaState},
	{"GetPassedRaidCount", bnd_GameStoryInfo_GetPassedRaidCount},
	{"GetCanJoinRaidCount", bnd_GameStoryInfo_GetCanJoinRaidCount},
	{"GetRaidFreeTimes", bnd_GameStoryInfo_GetRaidFreeTimes},
	{"GetEnterCost", bnd_GameStoryInfo_GetEnterCost},
	{"GetNoticeText", bnd_GameStoryInfo_GetNoticeText},
	{"GetBatchSecheduleInfo", bnd_GameStoryInfo_GetBatchSecheduleInfo},
	{"GetBatchSecheduleExpAndCash", bnd_GameStoryInfo_GetBatchSecheduleExpAndCash},
	{"GetMonsterSetting", bnd_GameStoryInfo_GetMonsterSetting},
	{"GetNextMonsterTimeStamp", bnd_GameStoryInfo_GetNextMonsterTimeStamp},
	{"GetNextMonsterTimeStampByBatchIndex", bnd_GameStoryInfo_GetNextMonsterTimeStampByBatchIndex},
	{"GetBasicStatTotalItemCount", bnd_GameStoryInfo_GetBasicStatTotalItemCount},
	{"GetScript", bnd_GameStoryInfo_GetScript},
	{"GetPlayRule", bnd_GameStoryInfo_GetPlayRule},
	{"GetCsvEndTime", bnd_GameStoryInfo_GetCsvEndTime},
	{"GetCsvOpenTime", bnd_GameStoryInfo_GetCsvOpenTime},
	{"GetFirstLightTaskID", bnd_GameStoryInfo_GetFirstLightTaskID},
	{"GetStoryAlreadyBuyTimes", bnd_GameStoryInfo_GetStoryAlreadyBuyTimes},
	{"GetRewardType", bnd_GameStoryInfo_GetRewardType},
	{"GetElementDamageType", bnd_GameStoryInfo_GetElementDamageType},
	{"GetIsGuildActivity", bnd_GameStoryInfo_GetIsGuildActivity},
	{NULL, NULL}
	};
	static int luaopen_GameStoryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("GameStoryInfo", 0, lib_GameStoryInfo, bnd_LuaDestroy_GameStoryInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorAttributeMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorAttributeMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorAttributeMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorAttributeMap* h = (GameLogic::LC_ActorAttributeMap*) binder.CheckUserType(1, "LC_ActorAttributeMap");
		binder.CheckUserType(1, "LC_ActorAttributeMap");
		return 0;
	}
	static int bnd_LC_ActorAttributeMap_GetAttributeBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorAttributeMap* pkAPI = (GameLogic::LC_ActorAttributeMap*)binder.CheckUserType(1, "LC_ActorAttributeMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorAttributeMap::GetAttributeBase, L, 2);
		return 1;
	}
	static int bnd_LC_ActorAttributeMap_GetAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorAttributeMap* pkAPI = (GameLogic::LC_ActorAttributeMap*)binder.CheckUserType(1, "LC_ActorAttributeMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorAttributeMap::GetAttribute, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ActorAttributeMap[] = {
	{"Create", bnd_LuaCreate_LC_ActorAttributeMap},
	{"GetAttributeBase", bnd_LC_ActorAttributeMap_GetAttributeBase},
	{"GetAttribute", bnd_LC_ActorAttributeMap_GetAttribute},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorAttributeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorAttributeMap", 0, lib_LC_ActorAttributeMap, bnd_LuaDestroy_LC_ActorAttributeMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorAttributeAppendMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorAttributeAppendMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorAttributeAppendMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorAttributeAppendMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorAttributeAppendMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorAttributeAppendMap* h = (GameLogic::LC_ActorAttributeAppendMap*) binder.CheckUserType(1, "LC_ActorAttributeAppendMap");
		binder.CheckUserType(1, "LC_ActorAttributeAppendMap");
		return 0;
	}
	static int bnd_LC_ActorAttributeAppendMap_GetAttributeValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorAttributeAppendMap* pkAPI = (GameLogic::LC_ActorAttributeAppendMap*)binder.CheckUserType(1, "LC_ActorAttributeAppendMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorAttributeAppendMap::GetAttributeValue, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ActorAttributeAppendMap[] = {
	{"Create", bnd_LuaCreate_LC_ActorAttributeAppendMap},
	{"GetAttributeValue", bnd_LC_ActorAttributeAppendMap_GetAttributeValue},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorAttributeAppendMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorAttributeAppendMap", 0, lib_LC_ActorAttributeAppendMap, bnd_LuaDestroy_LC_ActorAttributeAppendMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_BackPackEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_BackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_BackPackEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_BackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_BackPackEntry* h = (GameLogic::LC_BackPackEntry*) binder.CheckUserType(1, "LC_BackPackEntry");
		binder.CheckUserType(1, "LC_BackPackEntry");
		return 0;
	}
	static int bnd_LC_BackPackEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetLocked(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetLocked, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_SetLocked(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::SetLocked, L, 2);
		return 0;
	}		
	static int bnd_LC_BackPackEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetOverlapCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetOverlapCount, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetBind(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetBind, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetUniqueString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetUniqueString, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_MakeItemGuid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::MakeItemGuid, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetEquipStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetEquipStar, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetEquipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetEquipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_BackPackEntry_GetEquipAffiliatedSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BackPackEntry* pkAPI = (GameLogic::LC_BackPackEntry*)binder.CheckUserType(1, "LC_BackPackEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BackPackEntry::GetEquipAffiliatedSkill, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_BackPackEntry[] = {
	{"Create", bnd_LuaCreate_LC_BackPackEntry},
	{"GetValid", bnd_LC_BackPackEntry_GetValid},
	{"GetLocked", bnd_LC_BackPackEntry_GetLocked},
	{"SetLocked", bnd_LC_BackPackEntry_SetLocked},
	{"GetTypeID", bnd_LC_BackPackEntry_GetTypeID},
	{"GetOverlapCount", bnd_LC_BackPackEntry_GetOverlapCount},
	{"GetBind", bnd_LC_BackPackEntry_GetBind},
	{"GetUniqueString", bnd_LC_BackPackEntry_GetUniqueString},
	{"MakeItemGuid", bnd_LC_BackPackEntry_MakeItemGuid},
	{"GetEquipStar", bnd_LC_BackPackEntry_GetEquipStar},
	{"GetEquipLevel", bnd_LC_BackPackEntry_GetEquipLevel},
	{"GetEquipAffiliatedSkill", bnd_LC_BackPackEntry_GetEquipAffiliatedSkill},
	{NULL, NULL}
	};
	static int luaopen_LC_BackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_BackPackEntry", 0, lib_LC_BackPackEntry, bnd_LuaDestroy_LC_BackPackEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PackAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PackAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PackAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PackAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_PackAsset* h = (GameLogic::LC_PackAsset*) binder.CheckUserType(1, "LC_PackAsset");
		binder.CheckUserType(1, "LC_PackAsset");
		return 0;
	}
	static int bnd_LC_PackAsset_GetPackEmptyEntryCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetPackEmptyEntryCount, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetPackCapacity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetPackCapacity, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetPackSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetPackSize, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetBackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetBackPackEntry, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetIndexFromPackAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetIndexFromPackAsset, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetIndexFromPackAssetByUniqueString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetIndexFromPackAssetByUniqueString, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetItemCountInPack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetItemCountInPack, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetCountCanDeleteInPack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetCountCanDeleteInPack, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetCountCanAddToPack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetCountCanAddToPack, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetWhichPack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetWhichPack, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_IsItemCanBeSplitted(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::IsItemCanBeSplitted, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetPackLeftCapacity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetPackLeftCapacity, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_GetExternCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::GetExternCost, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_ExternWarehouseTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::ExternWarehouseTime, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_IsPackFull(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PackAsset::IsPackFull, L, 2);
		return 1;
	}
	static int bnd_LC_PackAsset_IsExistItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PackAsset* pkAPI = (GameLogic::LC_PackAsset*)binder.CheckUserType(1, "LC_PackAsset");
		Utility::LuaCall<GameLogic::LC_PackAsset, bool, int,int>(*pkAPI ,&GameLogic::LC_PackAsset::IsExistItem , L , 2);
		return 1;
	}		
	static const luaL_reg lib_LC_PackAsset[] = {
	{"Create", bnd_LuaCreate_LC_PackAsset},
	{"GetPackEmptyEntryCount", bnd_LC_PackAsset_GetPackEmptyEntryCount},
	{"GetPackCapacity", bnd_LC_PackAsset_GetPackCapacity},
	{"GetPackSize", bnd_LC_PackAsset_GetPackSize},
	{"GetBackPackEntry", bnd_LC_PackAsset_GetBackPackEntry},
	{"GetIndexFromPackAsset", bnd_LC_PackAsset_GetIndexFromPackAsset},
	{"GetIndexFromPackAssetByUniqueString", bnd_LC_PackAsset_GetIndexFromPackAssetByUniqueString},
	{"GetItemCountInPack", bnd_LC_PackAsset_GetItemCountInPack},
	{"GetCountCanDeleteInPack", bnd_LC_PackAsset_GetCountCanDeleteInPack},
	{"GetCountCanAddToPack", bnd_LC_PackAsset_GetCountCanAddToPack},
	{"GetDirtyFlagRevisionID", bnd_LC_PackAsset_GetDirtyFlagRevisionID},
	{"GetWhichPack", bnd_LC_PackAsset_GetWhichPack},
	{"IsItemCanBeSplitted", bnd_LC_PackAsset_IsItemCanBeSplitted},
	{"GetPackLeftCapacity", bnd_LC_PackAsset_GetPackLeftCapacity},
	{"GetExternCost", bnd_LC_PackAsset_GetExternCost},
	{"ExternWarehouseTime", bnd_LC_PackAsset_ExternWarehouseTime},
	{"IsPackFull", bnd_LC_PackAsset_IsPackFull},
	{"IsExistItem", bnd_LC_PackAsset_IsExistItem},
	{NULL, NULL}
	};
	static int luaopen_LC_PackAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PackAsset", 0, lib_LC_PackAsset, bnd_LuaDestroy_LC_PackAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GreatKungFuAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GreatKungFuAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GreatKungFuAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GreatKungFuAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GreatKungFuAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GreatKungFuAsset* h = (GameLogic::LC_GreatKungFuAsset*) binder.CheckUserType(1, "LC_GreatKungFuAsset");
		binder.CheckUserType(1, "LC_GreatKungFuAsset");
		return 0;
	}
	static int bnd_LC_GreatKungFuAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GreatKungFuAsset* pkAPI = (GameLogic::LC_GreatKungFuAsset*)binder.CheckUserType(1, "LC_GreatKungFuAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GreatKungFuAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_GreatKungFuAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GreatKungFuAsset* pkAPI = (GameLogic::LC_GreatKungFuAsset*)binder.CheckUserType(1, "LC_GreatKungFuAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GreatKungFuAsset::GetCombatScore, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GreatKungFuAsset[] = {
	{"Create", bnd_LuaCreate_LC_GreatKungFuAsset},
	{"GetDirtyFlagRevisionID", bnd_LC_GreatKungFuAsset_GetDirtyFlagRevisionID},
	{"GetCombatScore", bnd_LC_GreatKungFuAsset_GetCombatScore},
	{NULL, NULL}
	};
	static int luaopen_LC_GreatKungFuAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GreatKungFuAsset", 0, lib_LC_GreatKungFuAsset, bnd_LuaDestroy_LC_GreatKungFuAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientAlliance Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientAlliance");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientAlliance* h = (GameLogic::LC_ClientAlliance*) binder.CheckUserType(1, "LC_ClientAlliance");
		binder.CheckUserType(1, "LC_ClientAlliance");
		return 0;
	}
	static int bnd_LC_ClientAlliance_GetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_GetServerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetServerName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_GetServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetServerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_GetGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_GetGuildLeader(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetGuildLeader, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_GetWinGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetWinGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_ReqEnterAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::ReqEnterAlliance, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAlliance_ReqAllianceWinInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::ReqAllianceWinInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAlliance_ReqAllianceUnitInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::ReqAllianceUnitInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAlliance_IsCanDrawWQRwd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::IsCanDrawWQRwd, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_ReqDrawUnitRwd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::ReqDrawUnitRwd, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAlliance_GetBestGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::GetBestGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAlliance_HasFactionReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAlliance* pkAPI = (GameLogic::LC_ClientAlliance*)binder.CheckUserType(1, "LC_ClientAlliance");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAlliance::HasFactionReward, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientAlliance[] = {
	{"Create", bnd_LuaCreate_LC_ClientAlliance},
	{"GetCount", bnd_LC_ClientAlliance_GetCount},
	{"GetServerName", bnd_LC_ClientAlliance_GetServerName},
	{"GetServerID", bnd_LC_ClientAlliance_GetServerID},
	{"GetGuildName", bnd_LC_ClientAlliance_GetGuildName},
	{"GetGuildLeader", bnd_LC_ClientAlliance_GetGuildLeader},
	{"GetWinGuildName", bnd_LC_ClientAlliance_GetWinGuildName},
	{"ReqEnterAlliance", bnd_LC_ClientAlliance_ReqEnterAlliance},
	{"ReqAllianceWinInfo", bnd_LC_ClientAlliance_ReqAllianceWinInfo},
	{"ReqAllianceUnitInfo", bnd_LC_ClientAlliance_ReqAllianceUnitInfo},
	{"IsCanDrawWQRwd", bnd_LC_ClientAlliance_IsCanDrawWQRwd},
	{"ReqDrawUnitRwd", bnd_LC_ClientAlliance_ReqDrawUnitRwd},
	{"GetBestGuildID", bnd_LC_ClientAlliance_GetBestGuildID},
	{"HasFactionReward", bnd_LC_ClientAlliance_HasFactionReward},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientAlliance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientAlliance", 0, lib_LC_ClientAlliance, bnd_LuaDestroy_LC_ClientAlliance);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemDescriptionEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemDescriptionEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemDescriptionEntry* h = (GameLogic::LC_ItemDescriptionEntry*) binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		return 0;
	}
	static int bnd_LC_ItemDescriptionEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetItemName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetItemName, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetIconPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetIconPath, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetBackPackRCFunc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetBackPackRCFunc, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCanBeInShortcut(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCanBeInShortcut, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMaxUseCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMaxUseCount, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetGrade, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetEquipType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetEquipType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetQualityDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetQualityDescription, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetTimeLimitType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetTimeLimitType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCanBeDestroy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCanBeDestroy, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetItemDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetItemDescript, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetItemDetailDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetItemDetailDescript, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetItemAtmosDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetItemAtmosDescript, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetItemMaxOverlapCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetItemMaxOverlapCount, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCategory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCategory, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCategory1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCategory1, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetSoldCashsType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetSoldCashsType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetSoldCashsValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetSoldCashsValue, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetAuctionSoldCashsType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetAuctionSoldCashsType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetAuctionSoldCashsValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetAuctionSoldCashsValue, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetGuildCashV(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetGuildCashV, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetAuctionFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetAuctionFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetSubLimitLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetSubLimitLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetUseCountLmtKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetUseCountLmtKey, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetUseCountLimitType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetUseCountLimitType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetUseCountLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetUseCountLimit, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetScriptArgs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetScriptArgs, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetAffiliatedSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetAffiliatedSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetInitExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetInitExp, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCanReinforce(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCanReinforce, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetReinforceType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetReinforceType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetInitStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetInitStar, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMaxStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMaxStar, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetCanStarUp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetCanStarUp, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetStarUpType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetStarUpType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetAddExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetAddExp, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetShopID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetProductType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetProductType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetProductID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetProductID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetRuneLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetRuneLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetUseMultiple(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetUseMultiple, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMaxCommanderEquipReinforceLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMaxCommanderEquipReinforceLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMaxCommanderEquipRefineLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMaxCommanderEquipRefineLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetTransformID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetTransformID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetEquipPackLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetEquipPackLimit, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMinAuctionPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMinAuctionPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ItemDescriptionEntry_GetMaxAuctionPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemDescriptionEntry* pkAPI = (GameLogic::LC_ItemDescriptionEntry*)binder.CheckUserType(1, "LC_ItemDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemDescriptionEntry::GetMaxAuctionPrice, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemDescriptionEntry[] = {
	{"Create", bnd_LuaCreate_LC_ItemDescriptionEntry},
	{"GetTypeID", bnd_LC_ItemDescriptionEntry_GetTypeID},
	{"GetItemName", bnd_LC_ItemDescriptionEntry_GetItemName},
	{"GetIconPath", bnd_LC_ItemDescriptionEntry_GetIconPath},
	{"GetBackPackRCFunc", bnd_LC_ItemDescriptionEntry_GetBackPackRCFunc},
	{"GetCanBeInShortcut", bnd_LC_ItemDescriptionEntry_GetCanBeInShortcut},
	{"GetMaxUseCount", bnd_LC_ItemDescriptionEntry_GetMaxUseCount},
	{"GetLevel", bnd_LC_ItemDescriptionEntry_GetLevel},
	{"GetGrade", bnd_LC_ItemDescriptionEntry_GetGrade},
	{"GetEquipType", bnd_LC_ItemDescriptionEntry_GetEquipType},
	{"GetQualityDescription", bnd_LC_ItemDescriptionEntry_GetQualityDescription},
	{"GetTimeLimitType", bnd_LC_ItemDescriptionEntry_GetTimeLimitType},
	{"GetCanBeDestroy", bnd_LC_ItemDescriptionEntry_GetCanBeDestroy},
	{"GetItemDescript", bnd_LC_ItemDescriptionEntry_GetItemDescript},
	{"GetItemDetailDescript", bnd_LC_ItemDescriptionEntry_GetItemDetailDescript},
	{"GetItemAtmosDescript", bnd_LC_ItemDescriptionEntry_GetItemAtmosDescript},
	{"GetItemMaxOverlapCount", bnd_LC_ItemDescriptionEntry_GetItemMaxOverlapCount},
	{"GetCategory", bnd_LC_ItemDescriptionEntry_GetCategory},
	{"GetCategory1", bnd_LC_ItemDescriptionEntry_GetCategory1},
	{"GetSoldCashsType", bnd_LC_ItemDescriptionEntry_GetSoldCashsType},
	{"GetSoldCashsValue", bnd_LC_ItemDescriptionEntry_GetSoldCashsValue},
	{"GetAuctionSoldCashsType", bnd_LC_ItemDescriptionEntry_GetAuctionSoldCashsType},
	{"GetAuctionSoldCashsValue", bnd_LC_ItemDescriptionEntry_GetAuctionSoldCashsValue},
	{"GetGuildCashV", bnd_LC_ItemDescriptionEntry_GetGuildCashV},
	{"GetAuctionFlag", bnd_LC_ItemDescriptionEntry_GetAuctionFlag},
	{"GetSubLimitLevel", bnd_LC_ItemDescriptionEntry_GetSubLimitLevel},
	{"GetUseCountLmtKey", bnd_LC_ItemDescriptionEntry_GetUseCountLmtKey},
	{"GetUseCountLimitType", bnd_LC_ItemDescriptionEntry_GetUseCountLimitType},
	{"GetUseCountLimit", bnd_LC_ItemDescriptionEntry_GetUseCountLimit},
	{"GetScriptArgs", bnd_LC_ItemDescriptionEntry_GetScriptArgs},
	{"GetAffiliatedSkill", bnd_LC_ItemDescriptionEntry_GetAffiliatedSkill},
	{"GetInitExp", bnd_LC_ItemDescriptionEntry_GetInitExp},
	{"GetCanReinforce", bnd_LC_ItemDescriptionEntry_GetCanReinforce},
	{"GetReinforceType", bnd_LC_ItemDescriptionEntry_GetReinforceType},
	{"GetInitStar", bnd_LC_ItemDescriptionEntry_GetInitStar},
	{"GetMaxStar", bnd_LC_ItemDescriptionEntry_GetMaxStar},
	{"GetCanStarUp", bnd_LC_ItemDescriptionEntry_GetCanStarUp},
	{"GetStarUpType", bnd_LC_ItemDescriptionEntry_GetStarUpType},
	{"GetAddExp", bnd_LC_ItemDescriptionEntry_GetAddExp},
	{"GetShopID", bnd_LC_ItemDescriptionEntry_GetShopID},
	{"GetProductType", bnd_LC_ItemDescriptionEntry_GetProductType},
	{"GetProductID", bnd_LC_ItemDescriptionEntry_GetProductID},
	{"GetRuneLevel", bnd_LC_ItemDescriptionEntry_GetRuneLevel},
	{"GetUseMultiple", bnd_LC_ItemDescriptionEntry_GetUseMultiple},
	{"GetVipLevel", bnd_LC_ItemDescriptionEntry_GetVipLevel},
	{"GetMaxCommanderEquipReinforceLevel", bnd_LC_ItemDescriptionEntry_GetMaxCommanderEquipReinforceLevel},
	{"GetMaxCommanderEquipRefineLevel", bnd_LC_ItemDescriptionEntry_GetMaxCommanderEquipRefineLevel},
	{"GetTransformID", bnd_LC_ItemDescriptionEntry_GetTransformID},
	{"GetEquipPackLimit", bnd_LC_ItemDescriptionEntry_GetEquipPackLimit},
	{"GetMinAuctionPrice", bnd_LC_ItemDescriptionEntry_GetMinAuctionPrice},
	{"GetMaxAuctionPrice", bnd_LC_ItemDescriptionEntry_GetMaxAuctionPrice},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemDescriptionEntry", 0, lib_LC_ItemDescriptionEntry, bnd_LuaDestroy_LC_ItemDescriptionEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CrossRealmTeamAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CrossRealmTeamAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CrossRealmTeamAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CrossRealmTeamAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CrossRealmTeamAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_CrossRealmTeamAsset* h = (GameLogic::LC_CrossRealmTeamAsset*) binder.CheckUserType(1, "LC_CrossRealmTeamAsset");
		binder.CheckUserType(1, "LC_CrossRealmTeamAsset");
		return 0;
	}
	static int bnd_LC_CrossRealmTeamAsset_GetSettleType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CrossRealmTeamAsset* pkAPI = (GameLogic::LC_CrossRealmTeamAsset*)binder.CheckUserType(1, "LC_CrossRealmTeamAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CrossRealmTeamAsset::GetSettleType, L, 2);
		return 1;
	}
	static int bnd_LC_CrossRealmTeamAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CrossRealmTeamAsset* pkAPI = (GameLogic::LC_CrossRealmTeamAsset*)binder.CheckUserType(1, "LC_CrossRealmTeamAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CrossRealmTeamAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_CrossRealmTeamAsset_GetFastTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CrossRealmTeamAsset* pkAPI = (GameLogic::LC_CrossRealmTeamAsset*)binder.CheckUserType(1, "LC_CrossRealmTeamAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CrossRealmTeamAsset::GetFastTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CrossRealmTeamAsset[] = {
	{"Create", bnd_LuaCreate_LC_CrossRealmTeamAsset},
	{"GetSettleType", bnd_LC_CrossRealmTeamAsset_GetSettleType},
	{"GetDirtyFlagRevisionID", bnd_LC_CrossRealmTeamAsset_GetDirtyFlagRevisionID},
	{"GetFastTime", bnd_LC_CrossRealmTeamAsset_GetFastTime},
	{NULL, NULL}
	};
	static int luaopen_LC_CrossRealmTeamAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CrossRealmTeamAsset", 0, lib_LC_CrossRealmTeamAsset, bnd_LuaDestroy_LC_CrossRealmTeamAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemAppendAttributeFormulaEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemAppendAttributeFormulaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemAppendAttributeFormulaEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemAppendAttributeFormulaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemAppendAttributeFormulaEntry* h = (GameLogic::LC_ItemAppendAttributeFormulaEntry*) binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		return 0;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetFormulaName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetFormulaName, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetFormulaDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetFormulaDescript, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetAttributeFuncID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetAttributeFuncID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetEquipType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetEquipType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedEquipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetNeedEquipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetNeedItemID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemAppendAttributeFormulaEntry* pkAPI = (GameLogic::LC_ItemAppendAttributeFormulaEntry*)binder.CheckUserType(1, "LC_ItemAppendAttributeFormulaEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemAppendAttributeFormulaEntry::GetNeedItemCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemAppendAttributeFormulaEntry[] = {
	{"Create", bnd_LuaCreate_LC_ItemAppendAttributeFormulaEntry},
	{"GetTypeID", bnd_LC_ItemAppendAttributeFormulaEntry_GetTypeID},
	{"GetFormulaName", bnd_LC_ItemAppendAttributeFormulaEntry_GetFormulaName},
	{"GetFormulaDescript", bnd_LC_ItemAppendAttributeFormulaEntry_GetFormulaDescript},
	{"GetLevel", bnd_LC_ItemAppendAttributeFormulaEntry_GetLevel},
	{"GetAttributeFuncID", bnd_LC_ItemAppendAttributeFormulaEntry_GetAttributeFuncID},
	{"GetEquipType", bnd_LC_ItemAppendAttributeFormulaEntry_GetEquipType},
	{"GetNeedEquipLevel", bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedEquipLevel},
	{"GetNeedItemID", bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedItemID},
	{"GetNeedItemCount", bnd_LC_ItemAppendAttributeFormulaEntry_GetNeedItemCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemAppendAttributeFormulaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemAppendAttributeFormulaEntry", 0, lib_LC_ItemAppendAttributeFormulaEntry, bnd_LuaDestroy_LC_ItemAppendAttributeFormulaEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemUIContentEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemUIContentEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemUIContentEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemUIContentEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemUIContentEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemUIContentEntry* h = (GameLogic::LC_ItemUIContentEntry*) binder.CheckUserType(1, "LC_ItemUIContentEntry");
		binder.CheckUserType(1, "LC_ItemUIContentEntry");
		return 0;
	}
	static int bnd_LC_ItemUIContentEntry_GetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemUIContentEntry* pkAPI = (GameLogic::LC_ItemUIContentEntry*)binder.CheckUserType(1, "LC_ItemUIContentEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemUIContentEntry::GetID, L, 2);
		return 1;
	}
	static int bnd_LC_ItemUIContentEntry_GetContentType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemUIContentEntry* pkAPI = (GameLogic::LC_ItemUIContentEntry*)binder.CheckUserType(1, "LC_ItemUIContentEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemUIContentEntry::GetContentType, L, 2);
		return 1;
	}
	static int bnd_LC_ItemUIContentEntry_GetDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemUIContentEntry* pkAPI = (GameLogic::LC_ItemUIContentEntry*)binder.CheckUserType(1, "LC_ItemUIContentEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemUIContentEntry::GetDescript, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemUIContentEntry[] = {
	{"Create", bnd_LuaCreate_LC_ItemUIContentEntry},
	{"GetID", bnd_LC_ItemUIContentEntry_GetID},
	{"GetContentType", bnd_LC_ItemUIContentEntry_GetContentType},
	{"GetDescript", bnd_LC_ItemUIContentEntry_GetDescript},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemUIContentEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemUIContentEntry", 0, lib_LC_ItemUIContentEntry, bnd_LuaDestroy_LC_ItemUIContentEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemFactoryBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemFactoryBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* h = GameLogic::LC_ItemFactoryBase::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemFactoryBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemFactoryBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemFactoryBase* h = (GameLogic::LC_ItemFactoryBase*) binder.CheckUserType(1, "LC_ItemFactoryBase");
		binder.CheckUserType(1, "LC_ItemFactoryBase");
		return 0;
	}
	static int bnd_LC_ItemFactoryBase_GetItemDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::GetItemDescriptionEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_GetItemUnbindCashPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::GetItemUnbindCashPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_RequestItemCategory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::RequestItemCategory, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::GetItemAppendAttributeFormulaCount, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::GetItemAppendAttributeFormulaEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaEntryByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::GetItemAppendAttributeFormulaEntryByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_CheckItemUsable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::CheckItemUsable, L, 2);
		return 1;
	}
	static int bnd_LC_ItemFactoryBase_RequestItemOperation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemFactoryBase* pkAPI = (GameLogic::LC_ItemFactoryBase*)binder.CheckUserType(1, "LC_ItemFactoryBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemFactoryBase::RequestItemOperation, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemFactoryBase[] = {
	{"Create", bnd_LuaCreate_LC_ItemFactoryBase},
	{"GetItemDescriptionEntry", bnd_LC_ItemFactoryBase_GetItemDescriptionEntry},
	{"GetItemUnbindCashPrice", bnd_LC_ItemFactoryBase_GetItemUnbindCashPrice},
	{"RequestItemCategory", bnd_LC_ItemFactoryBase_RequestItemCategory},
	{"GetItemAppendAttributeFormulaCount", bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaCount},
	{"GetItemAppendAttributeFormulaEntry", bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaEntry},
	{"GetItemAppendAttributeFormulaEntryByIndex", bnd_LC_ItemFactoryBase_GetItemAppendAttributeFormulaEntryByIndex},
	{"CheckItemUsable", bnd_LC_ItemFactoryBase_CheckItemUsable},
	{"RequestItemOperation", bnd_LC_ItemFactoryBase_RequestItemOperation},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemFactoryBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemFactoryBase", 0, lib_LC_ItemFactoryBase, bnd_LuaDestroy_LC_ItemFactoryBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemOperationDataEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemOperationDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemOperationDataEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemOperationDataEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemOperationDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemOperationDataEntry* h = (GameLogic::LC_ItemOperationDataEntry*) binder.CheckUserType(1, "LC_ItemOperationDataEntry");
		binder.CheckUserType(1, "LC_ItemOperationDataEntry");
		return 0;
	}
	static int bnd_LC_ItemOperationDataEntry_GetOperationInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemOperationDataEntry* pkAPI = (GameLogic::LC_ItemOperationDataEntry*)binder.CheckUserType(1, "LC_ItemOperationDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemOperationDataEntry::GetOperationInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ItemOperationDataEntry_GetCustom(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemOperationDataEntry* pkAPI = (GameLogic::LC_ItemOperationDataEntry*)binder.CheckUserType(1, "LC_ItemOperationDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemOperationDataEntry::GetCustom, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemOperationDataEntry[] = {
	{"Create", bnd_LuaCreate_LC_ItemOperationDataEntry},
	{"GetOperationInfo", bnd_LC_ItemOperationDataEntry_GetOperationInfo},
	{"GetCustom", bnd_LC_ItemOperationDataEntry_GetCustom},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemOperationDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemOperationDataEntry", 0, lib_LC_ItemOperationDataEntry, bnd_LuaDestroy_LC_ItemOperationDataEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_Task_Condition Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_Task_Condition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_Task_Condition");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_Task_Condition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_Task_Condition* h = (GameLogic::LC_Task_Condition*) binder.CheckUserType(1, "LC_Task_Condition");
		binder.CheckUserType(1, "LC_Task_Condition");
		return 0;
	}
	static int bnd_LC_Task_Condition_GetType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetMaxCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetMaxCount, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetKillCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetKillCharTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetDropCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetDropCharTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetDropItemTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetDropItemTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetSkillStart(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetSkillStart, L, 2);
		return 1;
	}
	static int bnd_LC_Task_Condition_GetSkillEnd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task_Condition* pkAPI = (GameLogic::LC_Task_Condition*)binder.CheckUserType(1, "LC_Task_Condition");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task_Condition::GetSkillEnd, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_Task_Condition[] = {
	{"Create", bnd_LuaCreate_LC_Task_Condition},
	{"GetType", bnd_LC_Task_Condition_GetType},
	{"GetMaxCount", bnd_LC_Task_Condition_GetMaxCount},
	{"GetKillCount", bnd_LC_Task_Condition_GetKillCount},
	{"GetKillCharTypeID", bnd_LC_Task_Condition_GetKillCharTypeID},
	{"GetDropCharTypeID", bnd_LC_Task_Condition_GetDropCharTypeID},
	{"GetDropItemTypeID", bnd_LC_Task_Condition_GetDropItemTypeID},
	{"GetSkillStart", bnd_LC_Task_Condition_GetSkillStart},
	{"GetSkillEnd", bnd_LC_Task_Condition_GetSkillEnd},
	{NULL, NULL}
	};
	static int luaopen_LC_Task_Condition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_Task_Condition", "MM_BaseObject", lib_LC_Task_Condition, bnd_LuaDestroy_LC_Task_Condition);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TaskManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* h = GameLogic::LC_TaskManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TaskManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TaskManager* h = (GameLogic::LC_TaskManager*) binder.CheckUserType(1, "LC_TaskManager");
		binder.CheckUserType(1, "LC_TaskManager");
		return 0;
	}
	static int bnd_LC_TaskManager_GetMainTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetMainTask, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetTask, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetMainTaskDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetMainTaskDescriptionEntry, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetTaskType, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetTaskIDByFinishRecordIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetTaskIDByFinishRecordIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetDailyLivenessEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetDailyLivenessEntry, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetTaskAssignEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetTaskAssignEntry, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetDailyChanllengeCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetDailyChanllengeCount, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetDiffDailyChanllengeByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetDiffDailyChanllengeByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetCurrentDiffDailyChanllenge(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetCurrentDiffDailyChanllenge, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetIndexDailyChanllege(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetIndexDailyChanllege, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetLastTaskIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetLastTaskIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetTaskIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetTaskIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetMainTaskByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetMainTaskByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetIndexByTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetIndexByTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_TaskManager_GetAssignType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskManager* pkAPI = (GameLogic::LC_TaskManager*)binder.CheckUserType(1, "LC_TaskManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskManager::GetAssignType, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TaskManager[] = {
	{"Create", bnd_LuaCreate_LC_TaskManager},
	{"GetMainTask", bnd_LC_TaskManager_GetMainTask},
	{"GetTask", bnd_LC_TaskManager_GetTask},
	{"GetMainTaskDescriptionEntry", bnd_LC_TaskManager_GetMainTaskDescriptionEntry},
	{"GetTaskType", bnd_LC_TaskManager_GetTaskType},
	{"GetTaskIDByFinishRecordIndex", bnd_LC_TaskManager_GetTaskIDByFinishRecordIndex},
	{"GetDailyLivenessEntry", bnd_LC_TaskManager_GetDailyLivenessEntry},
	{"GetTaskAssignEntry", bnd_LC_TaskManager_GetTaskAssignEntry},
	{"GetDailyChanllengeCount", bnd_LC_TaskManager_GetDailyChanllengeCount},
	{"GetDiffDailyChanllengeByIndex", bnd_LC_TaskManager_GetDiffDailyChanllengeByIndex},
	{"GetCurrentDiffDailyChanllenge", bnd_LC_TaskManager_GetCurrentDiffDailyChanllenge},
	{"GetIndexDailyChanllege", bnd_LC_TaskManager_GetIndexDailyChanllege},
	{"GetLastTaskIDByIndex", bnd_LC_TaskManager_GetLastTaskIDByIndex},
	{"GetTaskIDByIndex", bnd_LC_TaskManager_GetTaskIDByIndex},
	{"GetMainTaskByIndex", bnd_LC_TaskManager_GetMainTaskByIndex},
	{"GetIndexByTaskID", bnd_LC_TaskManager_GetIndexByTaskID},
	{"GetAssignType", bnd_LC_TaskManager_GetAssignType},
	{NULL, NULL}
	};
	static int luaopen_LC_TaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TaskManager", 0, lib_LC_TaskManager, bnd_LuaDestroy_LC_TaskManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientTaskManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientTaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientTaskManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientTaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientTaskManager* h = (LC_ClientTaskManager*) binder.CheckUserType(1, "LC_ClientTaskManager");
		binder.CheckUserType(1, "LC_ClientTaskManager");
		return 0;
	}
	static int bnd_LC_ClientTaskManager_GetCurChapter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskManager* pkAPI = (LC_ClientTaskManager*)binder.CheckUserType(1, "LC_ClientTaskManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskManager::GetCurChapter, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskManager_IsReachRewardDrawed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskManager* pkAPI = (LC_ClientTaskManager*)binder.CheckUserType(1, "LC_ClientTaskManager");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskManager::IsReachRewardDrawed, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientTaskManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientTaskManager},
	{"GetCurChapter", bnd_LC_ClientTaskManager_GetCurChapter},
	{"IsReachRewardDrawed", bnd_LC_ClientTaskManager_IsReachRewardDrawed},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientTaskManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientTaskManager", "LC_TaskManager", lib_LC_ClientTaskManager, bnd_LuaDestroy_LC_ClientTaskManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ProcessingTaskEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ProcessingTaskEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ProcessingTaskEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ProcessingTaskEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ProcessingTaskEntry* h = (GameLogic::LC_ProcessingTaskEntry*) binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		return 0;
	}
	static int bnd_LC_ProcessingTaskEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetFinishState1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetFinishState1, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetFinishState2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetFinishState2, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetFinishState3(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetFinishState3, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskState, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_SetTaskState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::SetTaskState, L, 2);
		return 0;
	}		
	static int bnd_LC_ProcessingTaskEntry_GetTaskFail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskFail, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskDiffStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskDiffStar, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskRewardStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskRewardStar, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskParamPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskParamPtr, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetExParam1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetExParam1, L, 2);
		return 1;
	}
	static int bnd_LC_ProcessingTaskEntry_GetTaskFinishTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ProcessingTaskEntry* pkAPI = (GameLogic::LC_ProcessingTaskEntry*)binder.CheckUserType(1, "LC_ProcessingTaskEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ProcessingTaskEntry::GetTaskFinishTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ProcessingTaskEntry[] = {
	{"Create", bnd_LuaCreate_LC_ProcessingTaskEntry},
	{"GetValid", bnd_LC_ProcessingTaskEntry_GetValid},
	{"GetTaskID", bnd_LC_ProcessingTaskEntry_GetTaskID},
	{"GetFinishState1", bnd_LC_ProcessingTaskEntry_GetFinishState1},
	{"GetFinishState2", bnd_LC_ProcessingTaskEntry_GetFinishState2},
	{"GetFinishState3", bnd_LC_ProcessingTaskEntry_GetFinishState3},
	{"GetTaskState", bnd_LC_ProcessingTaskEntry_GetTaskState},
	{"SetTaskState", bnd_LC_ProcessingTaskEntry_SetTaskState},
	{"GetTaskFail", bnd_LC_ProcessingTaskEntry_GetTaskFail},
	{"GetTaskDiffStar", bnd_LC_ProcessingTaskEntry_GetTaskDiffStar},
	{"GetTaskRewardStar", bnd_LC_ProcessingTaskEntry_GetTaskRewardStar},
	{"GetTaskParamPtr", bnd_LC_ProcessingTaskEntry_GetTaskParamPtr},
	{"GetExParam1", bnd_LC_ProcessingTaskEntry_GetExParam1},
	{"GetTaskFinishTime", bnd_LC_ProcessingTaskEntry_GetTaskFinishTime},
	{NULL, NULL}
	};
	static int luaopen_LC_ProcessingTaskEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ProcessingTaskEntry", 0, lib_LC_ProcessingTaskEntry, bnd_LuaDestroy_LC_ProcessingTaskEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CanStartTaskMapEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CanStartTaskMapEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_CanStartTaskMapEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CanStartTaskMapEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CanStartTaskMapEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_CanStartTaskMapEntry* h = (LC_CanStartTaskMapEntry*) binder.CheckUserType(1, "LC_CanStartTaskMapEntry");
		binder.CheckUserType(1, "LC_CanStartTaskMapEntry");
		return 0;
	}
	static int bnd_LC_CanStartTaskMapEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_CanStartTaskMapEntry* pkAPI = (LC_CanStartTaskMapEntry*)binder.CheckUserType(1, "LC_CanStartTaskMapEntry");
		Utility::LuaCall(*pkAPI, &LC_CanStartTaskMapEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_CanStartTaskMapEntry_GetTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_CanStartTaskMapEntry* pkAPI = (LC_CanStartTaskMapEntry*)binder.CheckUserType(1, "LC_CanStartTaskMapEntry");
		Utility::LuaCall(*pkAPI, &LC_CanStartTaskMapEntry::GetTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_CanStartTaskMapEntry_GetStartType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_CanStartTaskMapEntry* pkAPI = (LC_CanStartTaskMapEntry*)binder.CheckUserType(1, "LC_CanStartTaskMapEntry");
		Utility::LuaCall(*pkAPI, &LC_CanStartTaskMapEntry::GetStartType, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CanStartTaskMapEntry[] = {
	{"Create", bnd_LuaCreate_LC_CanStartTaskMapEntry},
	{"GetValid", bnd_LC_CanStartTaskMapEntry_GetValid},
	{"GetTaskID", bnd_LC_CanStartTaskMapEntry_GetTaskID},
	{"GetStartType", bnd_LC_CanStartTaskMapEntry_GetStartType},
	{NULL, NULL}
	};
	static int luaopen_LC_CanStartTaskMapEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CanStartTaskMapEntry", 0, lib_LC_CanStartTaskMapEntry, bnd_LuaDestroy_LC_CanStartTaskMapEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_FinishedTaskRecord Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_FinishedTaskRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FinishedTaskRecord* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_FinishedTaskRecord");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_FinishedTaskRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_FinishedTaskRecord* h = (GameLogic::LC_FinishedTaskRecord*) binder.CheckUserType(1, "LC_FinishedTaskRecord");
		binder.CheckUserType(1, "LC_FinishedTaskRecord");
		return 0;
	}
	static int bnd_LC_FinishedTaskRecord_GetValueInRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FinishedTaskRecord* pkAPI = (GameLogic::LC_FinishedTaskRecord*)binder.CheckUserType(1, "LC_FinishedTaskRecord");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FinishedTaskRecord::GetValueInRecord, L, 2);
		return 1;
	}
	static int bnd_LC_FinishedTaskRecord_GetMaxValidRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FinishedTaskRecord* pkAPI = (GameLogic::LC_FinishedTaskRecord*)binder.CheckUserType(1, "LC_FinishedTaskRecord");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FinishedTaskRecord::GetMaxValidRecord, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_FinishedTaskRecord[] = {
	{"Create", bnd_LuaCreate_LC_FinishedTaskRecord},
	{"GetValueInRecord", bnd_LC_FinishedTaskRecord_GetValueInRecord},
	{"GetMaxValidRecord", bnd_LC_FinishedTaskRecord_GetMaxValidRecord},
	{NULL, NULL}
	};
	static int luaopen_LC_FinishedTaskRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_FinishedTaskRecord", 0, lib_LC_FinishedTaskRecord, bnd_LuaDestroy_LC_FinishedTaskRecord);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MainTaskDescriptEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MainTaskDescriptEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTaskDescriptEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MainTaskDescriptEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MainTaskDescriptEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_MainTaskDescriptEntry* h = (GameLogic::LC_MainTaskDescriptEntry*) binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		return 0;
	}
	static int bnd_LC_MainTaskDescriptEntry_GetMainTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTaskDescriptEntry* pkAPI = (GameLogic::LC_MainTaskDescriptEntry*)binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MainTaskDescriptEntry::GetMainTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_MainTaskDescriptEntry_GetMainTaskName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTaskDescriptEntry* pkAPI = (GameLogic::LC_MainTaskDescriptEntry*)binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MainTaskDescriptEntry::GetMainTaskName, L, 2);
		return 1;
	}
	static int bnd_LC_MainTaskDescriptEntry_GetMainTaskDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTaskDescriptEntry* pkAPI = (GameLogic::LC_MainTaskDescriptEntry*)binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MainTaskDescriptEntry::GetMainTaskDescription, L, 2);
		return 1;
	}
	static int bnd_LC_MainTaskDescriptEntry_GetMainTaskFinishDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTaskDescriptEntry* pkAPI = (GameLogic::LC_MainTaskDescriptEntry*)binder.CheckUserType(1, "LC_MainTaskDescriptEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MainTaskDescriptEntry::GetMainTaskFinishDescription, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MainTaskDescriptEntry[] = {
	{"Create", bnd_LuaCreate_LC_MainTaskDescriptEntry},
	{"GetMainTaskID", bnd_LC_MainTaskDescriptEntry_GetMainTaskID},
	{"GetMainTaskName", bnd_LC_MainTaskDescriptEntry_GetMainTaskName},
	{"GetMainTaskDescription", bnd_LC_MainTaskDescriptEntry_GetMainTaskDescription},
	{"GetMainTaskFinishDescription", bnd_LC_MainTaskDescriptEntry_GetMainTaskFinishDescription},
	{NULL, NULL}
	};
	static int luaopen_LC_MainTaskDescriptEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MainTaskDescriptEntry", 0, lib_LC_MainTaskDescriptEntry, bnd_LuaDestroy_LC_MainTaskDescriptEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MainTask Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MainTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTask* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MainTask");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MainTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_MainTask* h = (GameLogic::LC_MainTask*) binder.CheckUserType(1, "LC_MainTask");
		binder.CheckUserType(1, "LC_MainTask");
		return 0;
	}
	static int bnd_LC_MainTask_GetMainTaskDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MainTask* pkAPI = (GameLogic::LC_MainTask*)binder.CheckUserType(1, "LC_MainTask");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MainTask::GetMainTaskDescriptionEntry, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MainTask[] = {
	{"Create", bnd_LuaCreate_LC_MainTask},
	{"GetMainTaskDescriptionEntry", bnd_LC_MainTask_GetMainTaskDescriptionEntry},
	{NULL, NULL}
	};
	static int luaopen_LC_MainTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MainTask", 0, lib_LC_MainTask, bnd_LuaDestroy_LC_MainTask);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TaskParams Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TaskParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskParams* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TaskParams");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TaskParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TaskParams* h = (GameLogic::LC_TaskParams*) binder.CheckUserType(1, "LC_TaskParams");
		binder.CheckUserType(1, "LC_TaskParams");
		return 0;
	}
	static int bnd_LC_TaskParams_GetExpPro(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskParams* pkAPI = (GameLogic::LC_TaskParams*)binder.CheckUserType(1, "LC_TaskParams");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskParams::GetExpPro, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TaskParams[] = {
	{"Create", bnd_LuaCreate_LC_TaskParams},
	{"GetExpPro", bnd_LC_TaskParams_GetExpPro},
	{NULL, NULL}
	};
	static int luaopen_LC_TaskParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TaskParams", 0, lib_LC_TaskParams, bnd_LuaDestroy_LC_TaskParams);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_Task Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_Task(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_Task");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_Task(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_Task* h = (GameLogic::LC_Task*) binder.CheckUserType(1, "LC_Task");
		binder.CheckUserType(1, "LC_Task");
		return 0;
	}
	static int bnd_LC_Task_GetTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetFinishCondition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetFinishCondition, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetFinishConditionNoParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetFinishConditionNoParams, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskLevel, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetAcceptNPCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetAcceptNPCID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetFinishNPCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetFinishNPCID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetActiveTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetActiveTime, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTimeLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTimeLimit, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetAcceptLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetAcceptLevel, L, 2);
		return 1;
	}
	static int bnd_LC_Task_ComputeExpBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::ComputeExpBonus, L, 2);
		return 1;
	}
	static int bnd_LC_Task_ComputeBuddyExpBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::ComputeBuddyExpBonus, L, 2);
		return 1;
	}
	static int bnd_LC_Task_ComputeSpBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::ComputeSpBonus, L, 2);
		return 1;
	}
	static int bnd_LC_Task_ComputeUnBindGoldBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::ComputeUnBindGoldBonus, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskName, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskTraceInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskTraceInfo, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskAcceptInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskAcceptInfo, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskFinishInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskFinishInfo, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskUnFinishInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskUnFinishInfo, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskAcceptNPCName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskAcceptNPCName, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetExtraTaskTraceInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetExtraTaskTraceInfo, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskGoal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskGoal, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskSite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskSite, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskIcon, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetConsumeItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetConsumeItem, L, 2);
		return 1;
	}
	static int bnd_LC_Task_CanCancelTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::CanCancelTask, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBindCashString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBindCashString, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetUnBindCashString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetUnBindCashString, L, 2);
		return 1;
	}
	static int bnd_LC_Task_IsSelectBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::IsSelectBonus, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskUIType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskUIType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetGameStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetGameStoryID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBonusGuildCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBonusGuildCash, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBonusGuildExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBonusGuildExp, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBonusGuildMilestoneTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBonusGuildMilestoneTarget, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBonusGuildContribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBonusGuildContribute, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskTitleType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskTitleType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetConversationIDByState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetConversationIDByState, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetLiveness(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetLiveness, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetReduceDiffCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetReduceDiffCash, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetPromoteRewardCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetPromoteRewardCash, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetOneKeyShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetOneKeyShopID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetMultiRewardShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetMultiRewardShopID, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetFinishType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetFinishType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskBonusEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskBonusEXP, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskBuddyBonusEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskBuddyBonusEXP, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskBonusSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskBonusSP, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetTaskBonusUnBindGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetTaskBonusUnBindGold, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetStartType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetStartType, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetBoss(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetBoss, L, 2);
		return 1;
	}
	static int bnd_LC_Task_GetSectionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_Task* pkAPI = (GameLogic::LC_Task*)binder.CheckUserType(1, "LC_Task");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_Task::GetSectionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_Task[] = {
	{"Create", bnd_LuaCreate_LC_Task},
	{"GetTaskID", bnd_LC_Task_GetTaskID},
	{"GetTaskGroupID", bnd_LC_Task_GetTaskGroupID},
	{"GetFinishCondition", bnd_LC_Task_GetFinishCondition},
	{"GetFinishConditionNoParams", bnd_LC_Task_GetFinishConditionNoParams},
	{"GetTaskType", bnd_LC_Task_GetTaskType},
	{"GetTaskLevel", bnd_LC_Task_GetTaskLevel},
	{"GetTaskStarLevel", bnd_LC_Task_GetTaskStarLevel},
	{"GetAcceptNPCID", bnd_LC_Task_GetAcceptNPCID},
	{"GetFinishNPCID", bnd_LC_Task_GetFinishNPCID},
	{"GetActiveTime", bnd_LC_Task_GetActiveTime},
	{"GetTimeLimit", bnd_LC_Task_GetTimeLimit},
	{"GetAcceptLevel", bnd_LC_Task_GetAcceptLevel},
	{"ComputeExpBonus", bnd_LC_Task_ComputeExpBonus},
	{"ComputeBuddyExpBonus", bnd_LC_Task_ComputeBuddyExpBonus},
	{"ComputeSpBonus", bnd_LC_Task_ComputeSpBonus},
	{"ComputeUnBindGoldBonus", bnd_LC_Task_ComputeUnBindGoldBonus},
	{"GetTaskName", bnd_LC_Task_GetTaskName},
	{"GetTaskTraceInfo", bnd_LC_Task_GetTaskTraceInfo},
	{"GetTaskAcceptInfo", bnd_LC_Task_GetTaskAcceptInfo},
	{"GetTaskFinishInfo", bnd_LC_Task_GetTaskFinishInfo},
	{"GetTaskUnFinishInfo", bnd_LC_Task_GetTaskUnFinishInfo},
	{"GetTaskAcceptNPCName", bnd_LC_Task_GetTaskAcceptNPCName},
	{"GetExtraTaskTraceInfo", bnd_LC_Task_GetExtraTaskTraceInfo},
	{"GetTaskGoal", bnd_LC_Task_GetTaskGoal},
	{"GetTaskSite", bnd_LC_Task_GetTaskSite},
	{"GetTaskIcon", bnd_LC_Task_GetTaskIcon},
	{"GetConsumeItem", bnd_LC_Task_GetConsumeItem},
	{"CanCancelTask", bnd_LC_Task_CanCancelTask},
	{"GetBindCashString", bnd_LC_Task_GetBindCashString},
	{"GetUnBindCashString", bnd_LC_Task_GetUnBindCashString},
	{"IsSelectBonus", bnd_LC_Task_IsSelectBonus},
	{"GetTaskUIType", bnd_LC_Task_GetTaskUIType},
	{"GetGameStoryID", bnd_LC_Task_GetGameStoryID},
	{"GetBonusGuildCash", bnd_LC_Task_GetBonusGuildCash},
	{"GetBonusGuildExp", bnd_LC_Task_GetBonusGuildExp},
	{"GetBonusGuildMilestoneTarget", bnd_LC_Task_GetBonusGuildMilestoneTarget},
	{"GetBonusGuildContribute", bnd_LC_Task_GetBonusGuildContribute},
	{"GetTaskTitleType", bnd_LC_Task_GetTaskTitleType},
	{"GetConversationIDByState", bnd_LC_Task_GetConversationIDByState},
	{"GetLiveness", bnd_LC_Task_GetLiveness},
	{"GetMapResID", bnd_LC_Task_GetMapResID},
	{"GetReduceDiffCash", bnd_LC_Task_GetReduceDiffCash},
	{"GetPromoteRewardCash", bnd_LC_Task_GetPromoteRewardCash},
	{"GetOneKeyShopID", bnd_LC_Task_GetOneKeyShopID},
	{"GetMultiRewardShopID", bnd_LC_Task_GetMultiRewardShopID},
	{"GetFinishType", bnd_LC_Task_GetFinishType},
	{"GetTaskBonusEXP", bnd_LC_Task_GetTaskBonusEXP},
	{"GetTaskBuddyBonusEXP", bnd_LC_Task_GetTaskBuddyBonusEXP},
	{"GetTaskBonusSP", bnd_LC_Task_GetTaskBonusSP},
	{"GetTaskBonusUnBindGold", bnd_LC_Task_GetTaskBonusUnBindGold},
	{"GetStartType", bnd_LC_Task_GetStartType},
	{"GetBoss", bnd_LC_Task_GetBoss},
	{"GetSectionID", bnd_LC_Task_GetSectionID},
	{NULL, NULL}
	};
	static int luaopen_LC_Task(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_Task", 0, lib_LC_Task, bnd_LuaDestroy_LC_Task);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_DailyLivenessEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_DailyLivenessEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_DailyLivenessEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_DailyLivenessEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_DailyLivenessEntry* h = (GameLogic::LC_DailyLivenessEntry*) binder.CheckUserType(1, "LC_DailyLivenessEntry");
		binder.CheckUserType(1, "LC_DailyLivenessEntry");
		return 0;
	}
	static int bnd_LC_DailyLivenessEntry_GetExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetExp, L, 2);
		return 1;
	}
	static int bnd_LC_DailyLivenessEntry_GetSp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetSp, L, 2);
		return 1;
	}
	static int bnd_LC_DailyLivenessEntry_GetGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetGold, L, 2);
		return 1;
	}
	static int bnd_LC_DailyLivenessEntry_GetGiftsCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetGiftsCount, L, 2);
		return 1;
	}
	static int bnd_LC_DailyLivenessEntry_GetItemTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetItemTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_DailyLivenessEntry_GetItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_DailyLivenessEntry* pkAPI = (GameLogic::LC_DailyLivenessEntry*)binder.CheckUserType(1, "LC_DailyLivenessEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_DailyLivenessEntry::GetItemCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_DailyLivenessEntry[] = {
	{"Create", bnd_LuaCreate_LC_DailyLivenessEntry},
	{"GetExp", bnd_LC_DailyLivenessEntry_GetExp},
	{"GetSp", bnd_LC_DailyLivenessEntry_GetSp},
	{"GetGold", bnd_LC_DailyLivenessEntry_GetGold},
	{"GetGiftsCount", bnd_LC_DailyLivenessEntry_GetGiftsCount},
	{"GetItemTypeID", bnd_LC_DailyLivenessEntry_GetItemTypeID},
	{"GetItemCount", bnd_LC_DailyLivenessEntry_GetItemCount},
	{NULL, NULL}
	};
	static int luaopen_LC_DailyLivenessEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_DailyLivenessEntry", 0, lib_LC_DailyLivenessEntry, bnd_LuaDestroy_LC_DailyLivenessEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientTask Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientTask");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientTask* h = (LC_ClientTask*) binder.CheckUserType(1, "LC_ClientTask");
		binder.CheckUserType(1, "LC_ClientTask");
		return 0;
	}
	static int bnd_LC_ClientTask_GetAcceptTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetAcceptTitle, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetProcessingTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetProcessingTitle, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetFinishTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetFinishTitle, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetProcessingTaskRewardEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetProcessingTaskRewardEXP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetProcessingTaskBuddyRewardEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetProcessingTaskBuddyRewardEXP, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetProcessingTaskRewardUnBindGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetProcessingTaskRewardUnBindGold, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetRecommendCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetRecommendCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTask_GetClientTaskGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTask* pkAPI = (LC_ClientTask*)binder.CheckUserType(1, "LC_ClientTask");
		Utility::LuaCall(*pkAPI, &LC_ClientTask::GetClientTaskGroupID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientTask[] = {
	{"Create", bnd_LuaCreate_LC_ClientTask},
	{"GetAcceptTitle", bnd_LC_ClientTask_GetAcceptTitle},
	{"GetProcessingTitle", bnd_LC_ClientTask_GetProcessingTitle},
	{"GetFinishTitle", bnd_LC_ClientTask_GetFinishTitle},
	{"GetProcessingTaskRewardEXP", bnd_LC_ClientTask_GetProcessingTaskRewardEXP},
	{"GetProcessingTaskBuddyRewardEXP", bnd_LC_ClientTask_GetProcessingTaskBuddyRewardEXP},
	{"GetProcessingTaskRewardUnBindGold", bnd_LC_ClientTask_GetProcessingTaskRewardUnBindGold},
	{"GetRecommendCombatScore", bnd_LC_ClientTask_GetRecommendCombatScore},
	{"GetClientTaskGroupID", bnd_LC_ClientTask_GetClientTaskGroupID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientTask", "LC_Task", lib_LC_ClientTask, bnd_LuaDestroy_LC_ClientTask);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TaskMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TaskMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TaskMap* h = (GameLogic::LC_TaskMap*) binder.CheckUserType(1, "LC_TaskMap");
		binder.CheckUserType(1, "LC_TaskMap");
		return 0;
	}
	static int bnd_LC_TaskMap_GetProcessingTaskEntryByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetProcessingTaskEntryByID, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetFinishedTaskRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetFinishedTaskRecord, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetPrcessingTaskCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetPrcessingTaskCount, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetProcessingTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetProcessingTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_IsInFinishedTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::IsInFinishedTaskMap, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetTaskState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetTaskState, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetBillBoardTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetBillBoardTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_IsInProcessingTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::IsInProcessingTaskMap, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetTaskFail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetTaskFail, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetLiveness(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetLiveness, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_IsLivenessGiftDrawed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::IsLivenessGiftDrawed, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetAssignTaskData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetAssignTaskData, L, 2);
		return 1;
	}
	static int bnd_LC_TaskMap_GetAssignTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskMap* pkAPI = (GameLogic::LC_TaskMap*)binder.CheckUserType(1, "LC_TaskMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskMap::GetAssignTaskInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TaskMap[] = {
	{"Create", bnd_LuaCreate_LC_TaskMap},
	{"GetProcessingTaskEntryByID", bnd_LC_TaskMap_GetProcessingTaskEntryByID},
	{"GetFinishedTaskRecord", bnd_LC_TaskMap_GetFinishedTaskRecord},
	{"GetPrcessingTaskCount", bnd_LC_TaskMap_GetPrcessingTaskCount},
	{"GetProcessingTaskID", bnd_LC_TaskMap_GetProcessingTaskID},
	{"IsInFinishedTaskMap", bnd_LC_TaskMap_IsInFinishedTaskMap},
	{"GetTaskState", bnd_LC_TaskMap_GetTaskState},
	{"GetBillBoardTaskID", bnd_LC_TaskMap_GetBillBoardTaskID},
	{"IsInProcessingTaskMap", bnd_LC_TaskMap_IsInProcessingTaskMap},
	{"GetTaskFail", bnd_LC_TaskMap_GetTaskFail},
	{"GetLiveness", bnd_LC_TaskMap_GetLiveness},
	{"IsLivenessGiftDrawed", bnd_LC_TaskMap_IsLivenessGiftDrawed},
	{"GetAssignTaskData", bnd_LC_TaskMap_GetAssignTaskData},
	{"GetAssignTaskInfo", bnd_LC_TaskMap_GetAssignTaskInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_TaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TaskMap", 0, lib_LC_TaskMap, bnd_LuaDestroy_LC_TaskMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_AssignTaskInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_AssignTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_AssignTaskInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_AssignTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_AssignTaskInfo* h = (GameLogic::LC_AssignTaskInfo*) binder.CheckUserType(1, "LC_AssignTaskInfo");
		binder.CheckUserType(1, "LC_AssignTaskInfo");
		return 0;
	}
	static int bnd_LC_AssignTaskInfo_IsAssignRoundOff(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskInfo* pkAPI = (GameLogic::LC_AssignTaskInfo*)binder.CheckUserType(1, "LC_AssignTaskInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskInfo::IsAssignRoundOff, L, 2);
		return 1;
	}
	static int bnd_LC_AssignTaskInfo_IsAssigned(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskInfo* pkAPI = (GameLogic::LC_AssignTaskInfo*)binder.CheckUserType(1, "LC_AssignTaskInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskInfo::IsAssigned, L, 2);
		return 1;
	}
	static int bnd_LC_AssignTaskInfo_IsAssignedReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskInfo* pkAPI = (GameLogic::LC_AssignTaskInfo*)binder.CheckUserType(1, "LC_AssignTaskInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskInfo::IsAssignedReward, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_AssignTaskInfo[] = {
	{"Create", bnd_LuaCreate_LC_AssignTaskInfo},
	{"IsAssignRoundOff", bnd_LC_AssignTaskInfo_IsAssignRoundOff},
	{"IsAssigned", bnd_LC_AssignTaskInfo_IsAssigned},
	{"IsAssignedReward", bnd_LC_AssignTaskInfo_IsAssignedReward},
	{NULL, NULL}
	};
	static int luaopen_LC_AssignTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_AssignTaskInfo", 0, lib_LC_AssignTaskInfo, bnd_LuaDestroy_LC_AssignTaskInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TaskAssignEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TaskAssignEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TaskAssignEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TaskAssignEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TaskAssignEntry* h = (GameLogic::LC_TaskAssignEntry*) binder.CheckUserType(1, "LC_TaskAssignEntry");
		binder.CheckUserType(1, "LC_TaskAssignEntry");
		return 0;
	}
	static int bnd_LC_TaskAssignEntry_GetOneKeyExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetOneKeyExp, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffExp, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffBuddyExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffBuddyExp, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetOneKeyCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetOneKeyCash, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffCash, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetOneKeySp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetOneKeySp, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffSp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffSp, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffGuild, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetRoundOffItemsCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetRoundOffItemsCount, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetItemTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetItemTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetItemCount, L, 2);
		return 1;
	}
	static int bnd_LC_TaskAssignEntry_GetOneKeyShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskAssignEntry* pkAPI = (GameLogic::LC_TaskAssignEntry*)binder.CheckUserType(1, "LC_TaskAssignEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskAssignEntry::GetOneKeyShopID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TaskAssignEntry[] = {
	{"Create", bnd_LuaCreate_LC_TaskAssignEntry},
	{"GetOneKeyExp", bnd_LC_TaskAssignEntry_GetOneKeyExp},
	{"GetRoundOffExp", bnd_LC_TaskAssignEntry_GetRoundOffExp},
	{"GetRoundOffBuddyExp", bnd_LC_TaskAssignEntry_GetRoundOffBuddyExp},
	{"GetOneKeyCash", bnd_LC_TaskAssignEntry_GetOneKeyCash},
	{"GetRoundOffCash", bnd_LC_TaskAssignEntry_GetRoundOffCash},
	{"GetOneKeySp", bnd_LC_TaskAssignEntry_GetOneKeySp},
	{"GetRoundOffSp", bnd_LC_TaskAssignEntry_GetRoundOffSp},
	{"GetRoundOffGuild", bnd_LC_TaskAssignEntry_GetRoundOffGuild},
	{"GetRoundOffItemsCount", bnd_LC_TaskAssignEntry_GetRoundOffItemsCount},
	{"GetItemTypeID", bnd_LC_TaskAssignEntry_GetItemTypeID},
	{"GetItemCount", bnd_LC_TaskAssignEntry_GetItemCount},
	{"GetOneKeyShopID", bnd_LC_TaskAssignEntry_GetOneKeyShopID},
	{NULL, NULL}
	};
	static int luaopen_LC_TaskAssignEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TaskAssignEntry", 0, lib_LC_TaskAssignEntry, bnd_LuaDestroy_LC_TaskAssignEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_AssignTaskData Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_AssignTaskData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskData* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_AssignTaskData");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_AssignTaskData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_AssignTaskData* h = (GameLogic::LC_AssignTaskData*) binder.CheckUserType(1, "LC_AssignTaskData");
		binder.CheckUserType(1, "LC_AssignTaskData");
		return 0;
	}
	static int bnd_LC_AssignTaskData_GetRound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskData* pkAPI = (GameLogic::LC_AssignTaskData*)binder.CheckUserType(1, "LC_AssignTaskData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskData::GetRound, L, 2);
		return 1;
	}
	static int bnd_LC_AssignTaskData_GetNextRefershTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskData* pkAPI = (GameLogic::LC_AssignTaskData*)binder.CheckUserType(1, "LC_AssignTaskData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskData::GetNextRefershTime, L, 2);
		return 1;
	}
	static int bnd_LC_AssignTaskData_GetAssignTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskData* pkAPI = (GameLogic::LC_AssignTaskData*)binder.CheckUserType(1, "LC_AssignTaskData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskData::GetAssignTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_AssignTaskData_GetAssignTaskCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_AssignTaskData* pkAPI = (GameLogic::LC_AssignTaskData*)binder.CheckUserType(1, "LC_AssignTaskData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_AssignTaskData::GetAssignTaskCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_AssignTaskData[] = {
	{"Create", bnd_LuaCreate_LC_AssignTaskData},
	{"GetRound", bnd_LC_AssignTaskData_GetRound},
	{"GetNextRefershTime", bnd_LC_AssignTaskData_GetNextRefershTime},
	{"GetAssignTaskID", bnd_LC_AssignTaskData_GetAssignTaskID},
	{"GetAssignTaskCount", bnd_LC_AssignTaskData_GetAssignTaskCount},
	{NULL, NULL}
	};
	static int luaopen_LC_AssignTaskData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_AssignTaskData", 0, lib_LC_AssignTaskData, bnd_LuaDestroy_LC_AssignTaskData);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientTaskMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientTaskMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientTaskMap* h = (LC_ClientTaskMap*) binder.CheckUserType(1, "LC_ClientTaskMap");
		binder.CheckUserType(1, "LC_ClientTaskMap");
		return 0;
	}
	static int bnd_LC_ClientTaskMap_GetCanStartTaskMapEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetCanStartTaskMapEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_SetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::SetDirtyFlagRevisionID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_UpdateCanAcceptTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::UpdateCanAcceptTask, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_IsShowBillboardTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::IsShowBillboardTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_SetShowBillboardFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::SetShowBillboardFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_AddToTaskForbidTraceList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::AddToTaskForbidTraceList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_RemoveFromTaskForbidTraceList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::RemoveFromTaskForbidTraceList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_IsInForbidTraceList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::IsInForbidTraceList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetRequestShareTaskCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetRequestShareTaskCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetFirstRequestShareTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetFirstRequestShareTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetFirstRequestShareTaskPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetFirstRequestShareTaskPlayerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetFirstRequestShareTaskShareType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetFirstRequestShareTaskShareType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetFirstRequestShareTaskDataIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetFirstRequestShareTaskDataIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_RemoveFirstRequestShareTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::RemoveFirstRequestShareTask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetLeftActiveTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetLeftActiveTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskTraceInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskTraceInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskUseItemTipCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskUseItemTipCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskUseTipItemIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskUseTipItemIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_IsTaskUseItemTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::IsTaskUseItemTip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_IsExistTaskTitleInFinishRecord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::IsExistTaskTitleInFinishRecord, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_SortTaskList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::SortTaskList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_GetSortTaskCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetSortTaskCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetSortTaskIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetSortTaskIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetMainTaskPaceIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetMainTaskPaceIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetAssignTaskCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetAssignTaskCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskCountByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskCountByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetPhagotrophyTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetPhagotrophyTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetPhagotrophyTotalTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetPhagotrophyTotalTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskIDListByTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskIDListByTaskType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_IsExistTaskInProcessingTaskByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::IsExistTaskInProcessingTaskByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_UpdateAutoStartList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::UpdateAutoStartList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientTaskMap_GetTaskTypeCanJoinTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskTypeCanJoinTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetTaskTypeMaxJoinTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetTaskTypeMaxJoinTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetCanFinishTaskIDByTaskType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetCanFinishTaskIDByTaskType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetMaxRound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetMaxRound, L, 2);
		return 1;
	}
	static int bnd_LC_ClientTaskMap_GetBestGuildTaskNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientTaskMap* pkAPI = (LC_ClientTaskMap*)binder.CheckUserType(1, "LC_ClientTaskMap");
		Utility::LuaCall(*pkAPI, &LC_ClientTaskMap::GetBestGuildTaskNum, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientTaskMap[] = {
	{"Create", bnd_LuaCreate_LC_ClientTaskMap},
	{"GetCanStartTaskMapEntry", bnd_LC_ClientTaskMap_GetCanStartTaskMapEntry},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientTaskMap_GetDirtyFlagRevisionID},
	{"SetDirtyFlagRevisionID", bnd_LC_ClientTaskMap_SetDirtyFlagRevisionID},
	{"UpdateCanAcceptTask", bnd_LC_ClientTaskMap_UpdateCanAcceptTask},
	{"IsShowBillboardTask", bnd_LC_ClientTaskMap_IsShowBillboardTask},
	{"SetShowBillboardFlag", bnd_LC_ClientTaskMap_SetShowBillboardFlag},
	{"AddToTaskForbidTraceList", bnd_LC_ClientTaskMap_AddToTaskForbidTraceList},
	{"RemoveFromTaskForbidTraceList", bnd_LC_ClientTaskMap_RemoveFromTaskForbidTraceList},
	{"IsInForbidTraceList", bnd_LC_ClientTaskMap_IsInForbidTraceList},
	{"GetTaskLeftTime", bnd_LC_ClientTaskMap_GetTaskLeftTime},
	{"GetRequestShareTaskCount", bnd_LC_ClientTaskMap_GetRequestShareTaskCount},
	{"GetFirstRequestShareTaskID", bnd_LC_ClientTaskMap_GetFirstRequestShareTaskID},
	{"GetFirstRequestShareTaskPlayerID", bnd_LC_ClientTaskMap_GetFirstRequestShareTaskPlayerID},
	{"GetFirstRequestShareTaskShareType", bnd_LC_ClientTaskMap_GetFirstRequestShareTaskShareType},
	{"GetFirstRequestShareTaskDataIndex", bnd_LC_ClientTaskMap_GetFirstRequestShareTaskDataIndex},
	{"RemoveFirstRequestShareTask", bnd_LC_ClientTaskMap_RemoveFirstRequestShareTask},
	{"GetLeftActiveTime", bnd_LC_ClientTaskMap_GetLeftActiveTime},
	{"GetTaskTraceInfo", bnd_LC_ClientTaskMap_GetTaskTraceInfo},
	{"GetTaskUseItemTipCount", bnd_LC_ClientTaskMap_GetTaskUseItemTipCount},
	{"GetTaskUseTipItemIDByIndex", bnd_LC_ClientTaskMap_GetTaskUseTipItemIDByIndex},
	{"IsTaskUseItemTip", bnd_LC_ClientTaskMap_IsTaskUseItemTip},
	{"IsExistTaskTitleInFinishRecord", bnd_LC_ClientTaskMap_IsExistTaskTitleInFinishRecord},
	{"SortTaskList", bnd_LC_ClientTaskMap_SortTaskList},
	{"GetSortTaskCount", bnd_LC_ClientTaskMap_GetSortTaskCount},
	{"GetSortTaskIDByIndex", bnd_LC_ClientTaskMap_GetSortTaskIDByIndex},
	{"GetMainTaskPaceIndex", bnd_LC_ClientTaskMap_GetMainTaskPaceIndex},
	{"GetAssignTaskCount", bnd_LC_ClientTaskMap_GetAssignTaskCount},
	{"GetTaskCountByType", bnd_LC_ClientTaskMap_GetTaskCountByType},
	{"GetPhagotrophyTimes", bnd_LC_ClientTaskMap_GetPhagotrophyTimes},
	{"GetPhagotrophyTotalTimes", bnd_LC_ClientTaskMap_GetPhagotrophyTotalTimes},
	{"GetTaskIDListByTaskType", bnd_LC_ClientTaskMap_GetTaskIDListByTaskType},
	{"IsExistTaskInProcessingTaskByType", bnd_LC_ClientTaskMap_IsExistTaskInProcessingTaskByType},
	{"UpdateAutoStartList", bnd_LC_ClientTaskMap_UpdateAutoStartList},
	{"GetTaskTypeCanJoinTimes", bnd_LC_ClientTaskMap_GetTaskTypeCanJoinTimes},
	{"GetTaskTypeMaxJoinTimes", bnd_LC_ClientTaskMap_GetTaskTypeMaxJoinTimes},
	{"GetCanFinishTaskIDByTaskType", bnd_LC_ClientTaskMap_GetCanFinishTaskIDByTaskType},
	{"GetMaxRound", bnd_LC_ClientTaskMap_GetMaxRound},
	{"GetBestGuildTaskNum", bnd_LC_ClientTaskMap_GetBestGuildTaskNum},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientTaskMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientTaskMap", "LC_TaskMap", lib_LC_ClientTaskMap, bnd_LuaDestroy_LC_ClientTaskMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TradeManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TradeManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TradeManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TradeManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TradeManager* h = (GameLogic::LC_TradeManager*) binder.CheckUserType(1, "LC_TradeManager");
		binder.CheckUserType(1, "LC_TradeManager");
		return 0;
	}
	static int bnd_LC_TradeManager_IsRequestTradeEmpty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::IsRequestTradeEmpty, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetLastRequesterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetLastRequesterID, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetLastRequesterName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetLastRequesterName, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetTradeState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetTradeState, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetMyTradeLock(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetMyTradeLock, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetTargetTradeLock(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetTargetTradeLock, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetTradeTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetTradeTargetID, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetTargetTradeCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetTargetTradeCash, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetMyTradeCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetMyTradeCash, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetItemEntryInMyTradePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetItemEntryInMyTradePack, L, 2);
		return 1;
	}
	static int bnd_LC_TradeManager_GetItemEntryInTargetTradePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TradeManager* pkAPI = (GameLogic::LC_TradeManager*)binder.CheckUserType(1, "LC_TradeManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TradeManager::GetItemEntryInTargetTradePack, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TradeManager[] = {
	{"Create", bnd_LuaCreate_LC_TradeManager},
	{"IsRequestTradeEmpty", bnd_LC_TradeManager_IsRequestTradeEmpty},
	{"GetLastRequesterID", bnd_LC_TradeManager_GetLastRequesterID},
	{"GetLastRequesterName", bnd_LC_TradeManager_GetLastRequesterName},
	{"GetTradeState", bnd_LC_TradeManager_GetTradeState},
	{"GetMyTradeLock", bnd_LC_TradeManager_GetMyTradeLock},
	{"GetTargetTradeLock", bnd_LC_TradeManager_GetTargetTradeLock},
	{"GetTradeTargetID", bnd_LC_TradeManager_GetTradeTargetID},
	{"GetTargetTradeCash", bnd_LC_TradeManager_GetTargetTradeCash},
	{"GetMyTradeCash", bnd_LC_TradeManager_GetMyTradeCash},
	{"GetItemEntryInMyTradePack", bnd_LC_TradeManager_GetItemEntryInMyTradePack},
	{"GetItemEntryInTargetTradePack", bnd_LC_TradeManager_GetItemEntryInTargetTradePack},
	{NULL, NULL}
	};
	static int luaopen_LC_TradeManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TradeManager", 0, lib_LC_TradeManager, bnd_LuaDestroy_LC_TradeManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_NPCShopItemEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_NPCShopItemEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_NPCShopItemEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_NPCShopItemEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_NPCShopItemEntry* h = (GameLogic::LC_NPCShopItemEntry*) binder.CheckUserType(1, "LC_NPCShopItemEntry");
		binder.CheckUserType(1, "LC_NPCShopItemEntry");
		return 0;
	}
	static int bnd_LC_NPCShopItemEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* pkAPI = (GameLogic::LC_NPCShopItemEntry*)binder.CheckUserType(1, "LC_NPCShopItemEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_NPCShopItemEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_NPCShopItemEntry_PriceValue1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* pkAPI = (GameLogic::LC_NPCShopItemEntry*)binder.CheckUserType(1, "LC_NPCShopItemEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_NPCShopItemEntry::PriceValue1, L, 2);
		return 1;
	}
	static int bnd_LC_NPCShopItemEntry_PriceValue2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* pkAPI = (GameLogic::LC_NPCShopItemEntry*)binder.CheckUserType(1, "LC_NPCShopItemEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_NPCShopItemEntry::PriceValue2, L, 2);
		return 1;
	}
	static int bnd_LC_NPCShopItemEntry_PriceType1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* pkAPI = (GameLogic::LC_NPCShopItemEntry*)binder.CheckUserType(1, "LC_NPCShopItemEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_NPCShopItemEntry::PriceType1, L, 2);
		return 1;
	}
	static int bnd_LC_NPCShopItemEntry_PriceType2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_NPCShopItemEntry* pkAPI = (GameLogic::LC_NPCShopItemEntry*)binder.CheckUserType(1, "LC_NPCShopItemEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_NPCShopItemEntry::PriceType2, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_NPCShopItemEntry[] = {
	{"Create", bnd_LuaCreate_LC_NPCShopItemEntry},
	{"GetTypeID", bnd_LC_NPCShopItemEntry_GetTypeID},
	{"PriceValue1", bnd_LC_NPCShopItemEntry_PriceValue1},
	{"PriceValue2", bnd_LC_NPCShopItemEntry_PriceValue2},
	{"PriceType1", bnd_LC_NPCShopItemEntry_PriceType1},
	{"PriceType2", bnd_LC_NPCShopItemEntry_PriceType2},
	{NULL, NULL}
	};
	static int luaopen_LC_NPCShopItemEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_NPCShopItemEntry", 0, lib_LC_NPCShopItemEntry, bnd_LuaDestroy_LC_NPCShopItemEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShopBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShopBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShopBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShopBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ShopBase* h = (GameLogic::LC_ShopBase*) binder.CheckUserType(1, "LC_ShopBase");
		binder.CheckUserType(1, "LC_ShopBase");
		return 0;
	}
	static int bnd_LC_ShopBase_GetShopType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* pkAPI = (GameLogic::LC_ShopBase*)binder.CheckUserType(1, "LC_ShopBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopBase::GetShopType, L, 2);
		return 1;
	}
	static int bnd_LC_ShopBase_GetShopFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* pkAPI = (GameLogic::LC_ShopBase*)binder.CheckUserType(1, "LC_ShopBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopBase::GetShopFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ShopBase_GetShopEntryValidCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* pkAPI = (GameLogic::LC_ShopBase*)binder.CheckUserType(1, "LC_ShopBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopBase::GetShopEntryValidCount, L, 2);
		return 1;
	}
	static int bnd_LC_ShopBase_GetShopFuncID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* pkAPI = (GameLogic::LC_ShopBase*)binder.CheckUserType(1, "LC_ShopBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopBase::GetShopFuncID, L, 2);
		return 1;
	}
	static int bnd_LC_ShopBase_GetShopEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopBase* pkAPI = (GameLogic::LC_ShopBase*)binder.CheckUserType(1, "LC_ShopBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopBase::GetShopEntry, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ShopBase[] = {
	{"Create", bnd_LuaCreate_LC_ShopBase},
	{"GetShopType", bnd_LC_ShopBase_GetShopType},
	{"GetShopFlag", bnd_LC_ShopBase_GetShopFlag},
	{"GetShopEntryValidCount", bnd_LC_ShopBase_GetShopEntryValidCount},
	{"GetShopFuncID", bnd_LC_ShopBase_GetShopFuncID},
	{"GetShopEntry", bnd_LC_ShopBase_GetShopEntry},
	{NULL, NULL}
	};
	static int luaopen_LC_ShopBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShopBase", 0, lib_LC_ShopBase, bnd_LuaDestroy_LC_ShopBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TransferBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TransferBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TransferBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TransferBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TransferBase* h = (GameLogic::LC_TransferBase*) binder.CheckUserType(1, "LC_TransferBase");
		binder.CheckUserType(1, "LC_TransferBase");
		return 0;
	}
	static int bnd_LC_TransferBase_GetTransferAreaNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* pkAPI = (GameLogic::LC_TransferBase*)binder.CheckUserType(1, "LC_TransferBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TransferBase::GetTransferAreaNum, L, 2);
		return 1;
	}
	static int bnd_LC_TransferBase_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* pkAPI = (GameLogic::LC_TransferBase*)binder.CheckUserType(1, "LC_TransferBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TransferBase::GetMapID, L, 2);
		return 1;
	}
	static int bnd_LC_TransferBase_GetAreaID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* pkAPI = (GameLogic::LC_TransferBase*)binder.CheckUserType(1, "LC_TransferBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TransferBase::GetAreaID, L, 2);
		return 1;
	}
	static int bnd_LC_TransferBase_GetPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* pkAPI = (GameLogic::LC_TransferBase*)binder.CheckUserType(1, "LC_TransferBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TransferBase::GetPrice, L, 2);
		return 1;
	}
	static int bnd_LC_TransferBase_GetTransferPosIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TransferBase* pkAPI = (GameLogic::LC_TransferBase*)binder.CheckUserType(1, "LC_TransferBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TransferBase::GetTransferPosIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TransferBase[] = {
	{"Create", bnd_LuaCreate_LC_TransferBase},
	{"GetTransferAreaNum", bnd_LC_TransferBase_GetTransferAreaNum},
	{"GetMapID", bnd_LC_TransferBase_GetMapID},
	{"GetAreaID", bnd_LC_TransferBase_GetAreaID},
	{"GetPrice", bnd_LC_TransferBase_GetPrice},
	{"GetTransferPosIndex", bnd_LC_TransferBase_GetTransferPosIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_TransferBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TransferBase", 0, lib_LC_TransferBase, bnd_LuaDestroy_LC_TransferBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillCoolDownMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillCoolDownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillCoolDownMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillCoolDownMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillCoolDownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SkillCoolDownMap* h = (GameLogic::LC_SkillCoolDownMap*) binder.CheckUserType(1, "LC_SkillCoolDownMap");
		binder.CheckUserType(1, "LC_SkillCoolDownMap");
		return 0;
	}
	static int bnd_LC_SkillCoolDownMap_GetSkillCurrentCDTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillCoolDownMap* pkAPI = (GameLogic::LC_SkillCoolDownMap*)binder.CheckUserType(1, "LC_SkillCoolDownMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillCoolDownMap::GetSkillCurrentCDTime, L, 2);
		return 1;
	}
	static int bnd_LC_SkillCoolDownMap_GetSkillNeedCDTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillCoolDownMap* pkAPI = (GameLogic::LC_SkillCoolDownMap*)binder.CheckUserType(1, "LC_SkillCoolDownMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillCoolDownMap::GetSkillNeedCDTime, L, 2);
		return 1;
	}
	static int bnd_LC_SkillCoolDownMap_GetSkillCoolDownTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillCoolDownMap* pkAPI = (GameLogic::LC_SkillCoolDownMap*)binder.CheckUserType(1, "LC_SkillCoolDownMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillCoolDownMap::GetSkillCoolDownTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillCoolDownMap[] = {
	{"Create", bnd_LuaCreate_LC_SkillCoolDownMap},
	{"GetSkillCurrentCDTime", bnd_LC_SkillCoolDownMap_GetSkillCurrentCDTime},
	{"GetSkillNeedCDTime", bnd_LC_SkillCoolDownMap_GetSkillNeedCDTime},
	{"GetSkillCoolDownTime", bnd_LC_SkillCoolDownMap_GetSkillCoolDownTime},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillCoolDownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillCoolDownMap", 0, lib_LC_SkillCoolDownMap, bnd_LuaDestroy_LC_SkillCoolDownMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ItemCoolDownMapBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ItemCoolDownMapBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemCoolDownMapBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ItemCoolDownMapBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ItemCoolDownMapBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ItemCoolDownMapBase* h = (GameLogic::LC_ItemCoolDownMapBase*) binder.CheckUserType(1, "LC_ItemCoolDownMapBase");
		binder.CheckUserType(1, "LC_ItemCoolDownMapBase");
		return 0;
	}
	static int bnd_LC_ItemCoolDownMapBase_GetItemCurrentCDTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemCoolDownMapBase* pkAPI = (GameLogic::LC_ItemCoolDownMapBase*)binder.CheckUserType(1, "LC_ItemCoolDownMapBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemCoolDownMapBase::GetItemCurrentCDTime, L, 2);
		return 1;
	}
	static int bnd_LC_ItemCoolDownMapBase_GetItemCoolDownTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemCoolDownMapBase* pkAPI = (GameLogic::LC_ItemCoolDownMapBase*)binder.CheckUserType(1, "LC_ItemCoolDownMapBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemCoolDownMapBase::GetItemCoolDownTime, L, 2);
		return 1;
	}
	static int bnd_LC_ItemCoolDownMapBase_GetItemNeedCDTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ItemCoolDownMapBase* pkAPI = (GameLogic::LC_ItemCoolDownMapBase*)binder.CheckUserType(1, "LC_ItemCoolDownMapBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ItemCoolDownMapBase::GetItemNeedCDTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ItemCoolDownMapBase[] = {
	{"Create", bnd_LuaCreate_LC_ItemCoolDownMapBase},
	{"GetItemCurrentCDTime", bnd_LC_ItemCoolDownMapBase_GetItemCurrentCDTime},
	{"GetItemCoolDownTime", bnd_LC_ItemCoolDownMapBase_GetItemCoolDownTime},
	{"GetItemNeedCDTime", bnd_LC_ItemCoolDownMapBase_GetItemNeedCDTime},
	{NULL, NULL}
	};
	static int luaopen_LC_ItemCoolDownMapBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ItemCoolDownMapBase", 0, lib_LC_ItemCoolDownMapBase, bnd_LuaDestroy_LC_ItemCoolDownMapBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillAssetEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAssetEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillAssetEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SkillAssetEntry* h = (GameLogic::LC_SkillAssetEntry*) binder.CheckUserType(1, "LC_SkillAssetEntry");
		binder.CheckUserType(1, "LC_SkillAssetEntry");
		return 0;
	}
	static int bnd_LC_SkillAssetEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAssetEntry* pkAPI = (GameLogic::LC_SkillAssetEntry*)binder.CheckUserType(1, "LC_SkillAssetEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAssetEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAssetEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAssetEntry* pkAPI = (GameLogic::LC_SkillAssetEntry*)binder.CheckUserType(1, "LC_SkillAssetEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAssetEntry::GetTypeID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillAssetEntry[] = {
	{"Create", bnd_LuaCreate_LC_SkillAssetEntry},
	{"GetValid", bnd_LC_SkillAssetEntry_GetValid},
	{"GetTypeID", bnd_LC_SkillAssetEntry_GetTypeID},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillAssetEntry", 0, lib_LC_SkillAssetEntry, bnd_LuaDestroy_LC_SkillAssetEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillDescriptionEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillDescriptionEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Skill::LC_SkillDescriptionEntry* h = (Skill::LC_SkillDescriptionEntry*) binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		return 0;
	}
	static int bnd_LC_SkillDescriptionEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetSkillName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetSkillName, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetIconPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetIconPath, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetCatergory1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetCatergory1, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetCatergory2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetCatergory2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetDescript, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetShortcutIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetShortcutIdx, L, 2);
		return 1;
	}
	static int bnd_LC_SkillDescriptionEntry_GetPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_SkillDescriptionEntry* pkAPI = (Skill::LC_SkillDescriptionEntry*)binder.CheckUserType(1, "LC_SkillDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_SkillDescriptionEntry::GetPrompt, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillDescriptionEntry[] = {
	{"Create", bnd_LuaCreate_LC_SkillDescriptionEntry},
	{"GetTypeID", bnd_LC_SkillDescriptionEntry_GetTypeID},
	{"GetSkillName", bnd_LC_SkillDescriptionEntry_GetSkillName},
	{"GetIconPath", bnd_LC_SkillDescriptionEntry_GetIconPath},
	{"GetCatergory1", bnd_LC_SkillDescriptionEntry_GetCatergory1},
	{"GetCatergory2", bnd_LC_SkillDescriptionEntry_GetCatergory2},
	{"GetDescript", bnd_LC_SkillDescriptionEntry_GetDescript},
	{"GetShortcutIdx", bnd_LC_SkillDescriptionEntry_GetShortcutIdx},
	{"GetPrompt", bnd_LC_SkillDescriptionEntry_GetPrompt},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillDescriptionEntry", 0, lib_LC_SkillDescriptionEntry, bnd_LuaDestroy_LC_SkillDescriptionEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SkillAsset* h = (GameLogic::LC_SkillAsset*) binder.CheckUserType(1, "LC_SkillAsset");
		binder.CheckUserType(1, "LC_SkillAsset");
		return 0;
	}
	static int bnd_LC_SkillAsset_GetSkillEntryInAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall<GameLogic::LC_SkillAsset, LC_SkillAssetEntry*, int, int, bool>(*pkAPI ,&GameLogic::LC_SkillAsset::GetSkillEntryInAsset , L , 2);
		return 1;
	}		
	static int bnd_LC_SkillAsset_GetSkillDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillDescriptionEntry, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillDescriptionEntryBySkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillDescriptionEntryBySkillID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillBookSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillBookSkillID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSecretClientSkillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSecretClientSkillInfo, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillCountByCategory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillCountByCategory, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillCategory2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillCategory2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetEntryIndexInAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetEntryIndexInAsset, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillNeedAchievements(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillNeedAchievements, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetLastLevelSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetLastLevelSkillID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetNextLevelSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetNextLevelSkillID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetTopLevelSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetTopLevelSkillID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetCapacity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetCapacity, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_FindLearnedSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::FindLearnedSkill, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillCombatScoreByCategory2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillCombatScoreByCategory2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_IsAllSkillNotUpgraded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::IsAllSkillNotUpgraded, L, 2);
		return 1;
	}
	static int bnd_LC_SkillAsset_GetSkillCountByCategory1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillAsset* pkAPI = (GameLogic::LC_SkillAsset*)binder.CheckUserType(1, "LC_SkillAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillAsset::GetSkillCountByCategory1, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillAsset[] = {
	{"Create", bnd_LuaCreate_LC_SkillAsset},
	{"GetSkillEntryInAsset", bnd_LC_SkillAsset_GetSkillEntryInAsset},
	{"GetSkillDescriptionEntry", bnd_LC_SkillAsset_GetSkillDescriptionEntry},
	{"GetSkillDescriptionEntryBySkillID", bnd_LC_SkillAsset_GetSkillDescriptionEntryBySkillID},
	{"GetSkillBookSkillID", bnd_LC_SkillAsset_GetSkillBookSkillID},
	{"GetSecretClientSkillInfo", bnd_LC_SkillAsset_GetSecretClientSkillInfo},
	{"GetSkillCountByCategory", bnd_LC_SkillAsset_GetSkillCountByCategory},
	{"GetSkillCategory2", bnd_LC_SkillAsset_GetSkillCategory2},
	{"GetEntryIndexInAsset", bnd_LC_SkillAsset_GetEntryIndexInAsset},
	{"GetSkillNeedAchievements", bnd_LC_SkillAsset_GetSkillNeedAchievements},
	{"GetLastLevelSkillID", bnd_LC_SkillAsset_GetLastLevelSkillID},
	{"GetNextLevelSkillID", bnd_LC_SkillAsset_GetNextLevelSkillID},
	{"GetTopLevelSkillID", bnd_LC_SkillAsset_GetTopLevelSkillID},
	{"GetCapacity", bnd_LC_SkillAsset_GetCapacity},
	{"FindLearnedSkill", bnd_LC_SkillAsset_FindLearnedSkill},
	{"GetSkillCombatScoreByCategory2", bnd_LC_SkillAsset_GetSkillCombatScoreByCategory2},
	{"IsAllSkillNotUpgraded", bnd_LC_SkillAsset_IsAllSkillNotUpgraded},
	{"GetSkillCountByCategory1", bnd_LC_SkillAsset_GetSkillCountByCategory1},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillAsset", 0, lib_LC_SkillAsset, bnd_LuaDestroy_LC_SkillAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorStateEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorStateEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorStateEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorStateEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorStateEntry* h = (GameLogic::LC_ActorStateEntry*) binder.CheckUserType(1, "LC_ActorStateEntry");
		binder.CheckUserType(1, "LC_ActorStateEntry");
		return 0;
	}
	static int bnd_LC_ActorStateEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetOverlapCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetOverlapCount, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetMaxLifeTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetMaxLifeTime, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetCurrentLifeTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetCurrentLifeTime, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetBuffType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetBuffType, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetPriority(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetPriority, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateEntry_GetInvisibleFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateEntry* pkAPI = (GameLogic::LC_ActorStateEntry*)binder.CheckUserType(1, "LC_ActorStateEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateEntry::GetInvisibleFlag, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ActorStateEntry[] = {
	{"Create", bnd_LuaCreate_LC_ActorStateEntry},
	{"GetValid", bnd_LC_ActorStateEntry_GetValid},
	{"GetTypeID", bnd_LC_ActorStateEntry_GetTypeID},
	{"GetOverlapCount", bnd_LC_ActorStateEntry_GetOverlapCount},
	{"GetMaxLifeTime", bnd_LC_ActorStateEntry_GetMaxLifeTime},
	{"GetCurrentLifeTime", bnd_LC_ActorStateEntry_GetCurrentLifeTime},
	{"GetBuffType", bnd_LC_ActorStateEntry_GetBuffType},
	{"GetPriority", bnd_LC_ActorStateEntry_GetPriority},
	{"GetInvisibleFlag", bnd_LC_ActorStateEntry_GetInvisibleFlag},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorStateEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorStateEntry", 0, lib_LC_ActorStateEntry, bnd_LuaDestroy_LC_ActorStateEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_StateDescriptionEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_StateDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_StateDescriptionEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_StateDescriptionEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_StateDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Skill::LC_StateDescriptionEntry* h = (Skill::LC_StateDescriptionEntry*) binder.CheckUserType(1, "LC_StateDescriptionEntry");
		binder.CheckUserType(1, "LC_StateDescriptionEntry");
		return 0;
	}
	static int bnd_LC_StateDescriptionEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_StateDescriptionEntry* pkAPI = (Skill::LC_StateDescriptionEntry*)binder.CheckUserType(1, "LC_StateDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_StateDescriptionEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_StateDescriptionEntry_GetStateName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_StateDescriptionEntry* pkAPI = (Skill::LC_StateDescriptionEntry*)binder.CheckUserType(1, "LC_StateDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_StateDescriptionEntry::GetStateName, L, 2);
		return 1;
	}
	static int bnd_LC_StateDescriptionEntry_GetIconPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Skill::LC_StateDescriptionEntry* pkAPI = (Skill::LC_StateDescriptionEntry*)binder.CheckUserType(1, "LC_StateDescriptionEntry");
		Utility::LuaCall(*pkAPI, &Skill::LC_StateDescriptionEntry::GetIconPath, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_StateDescriptionEntry[] = {
	{"Create", bnd_LuaCreate_LC_StateDescriptionEntry},
	{"GetTypeID", bnd_LC_StateDescriptionEntry_GetTypeID},
	{"GetStateName", bnd_LC_StateDescriptionEntry_GetStateName},
	{"GetIconPath", bnd_LC_StateDescriptionEntry_GetIconPath},
	{NULL, NULL}
	};
	static int luaopen_LC_StateDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_StateDescriptionEntry", 0, lib_LC_StateDescriptionEntry, bnd_LuaDestroy_LC_StateDescriptionEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorStateMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorStateMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorStateMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorStateMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorStateMap* h = (GameLogic::LC_ActorStateMap*) binder.CheckUserType(1, "LC_ActorStateMap");
		binder.CheckUserType(1, "LC_ActorStateMap");
		return 0;
	}
	static int bnd_LC_ActorStateMap_GetStateEntryInBuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateEntryInBuffSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateEntryInDebuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateEntryInDebuffSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateEntryInSystemBuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateEntryInSystemBuffSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateEntryByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateEntryByID, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateDescriptEntryInBuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateDescriptEntryInBuffSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateDescriptEntryInDebuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateDescriptEntryInDebuffSlot, L, 2);
		return 1;
	}
	static int bnd_LC_ActorStateMap_GetStateDescriptEntryInSystemBuffSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorStateMap* pkAPI = (GameLogic::LC_ActorStateMap*)binder.CheckUserType(1, "LC_ActorStateMap");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ActorStateMap::GetStateDescriptEntryInSystemBuffSlot, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ActorStateMap[] = {
	{"Create", bnd_LuaCreate_LC_ActorStateMap},
	{"GetStateEntryInBuffSlot", bnd_LC_ActorStateMap_GetStateEntryInBuffSlot},
	{"GetStateEntryInDebuffSlot", bnd_LC_ActorStateMap_GetStateEntryInDebuffSlot},
	{"GetStateEntryInSystemBuffSlot", bnd_LC_ActorStateMap_GetStateEntryInSystemBuffSlot},
	{"GetStateEntryByID", bnd_LC_ActorStateMap_GetStateEntryByID},
	{"GetStateDescriptEntryInBuffSlot", bnd_LC_ActorStateMap_GetStateDescriptEntryInBuffSlot},
	{"GetStateDescriptEntryInDebuffSlot", bnd_LC_ActorStateMap_GetStateDescriptEntryInDebuffSlot},
	{"GetStateDescriptEntryInSystemBuffSlot", bnd_LC_ActorStateMap_GetStateDescriptEntryInSystemBuffSlot},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorStateMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorStateMap", 0, lib_LC_ActorStateMap, bnd_LuaDestroy_LC_ActorStateMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShortcutEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShortcutEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShortcutEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShortcutEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ShortcutEntry* h = (GameLogic::LC_ShortcutEntry*) binder.CheckUserType(1, "LC_ShortcutEntry");
		binder.CheckUserType(1, "LC_ShortcutEntry");
		return 0;
	}
	static int bnd_LC_ShortcutEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutEntry_GetShortCutType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetShortCutType, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutEntry_GetExtraVal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetExtraVal, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutEntry_GetUsable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetUsable, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutEntry_SetTriggerState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::SetTriggerState, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutEntry_GetTriggerState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutEntry* pkAPI = (GameLogic::LC_ShortcutEntry*)binder.CheckUserType(1, "LC_ShortcutEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutEntry::GetTriggerState, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ShortcutEntry[] = {
	{"Create", bnd_LuaCreate_LC_ShortcutEntry},
	{"GetValid", bnd_LC_ShortcutEntry_GetValid},
	{"GetShortCutType", bnd_LC_ShortcutEntry_GetShortCutType},
	{"GetTypeID", bnd_LC_ShortcutEntry_GetTypeID},
	{"GetExtraVal", bnd_LC_ShortcutEntry_GetExtraVal},
	{"GetUsable", bnd_LC_ShortcutEntry_GetUsable},
	{"SetTriggerState", bnd_LC_ShortcutEntry_SetTriggerState},
	{"GetTriggerState", bnd_LC_ShortcutEntry_GetTriggerState},
	{NULL, NULL}
	};
	static int luaopen_LC_ShortcutEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShortcutEntry", 0, lib_LC_ShortcutEntry, bnd_LuaDestroy_LC_ShortcutEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShortcutBar Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShortcutBar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShortcutBar");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShortcutBar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ShortcutBar* h = (GameLogic::LC_ShortcutBar*) binder.CheckUserType(1, "LC_ShortcutBar");
		binder.CheckUserType(1, "LC_ShortcutBar");
		return 0;
	}
	static int bnd_LC_ShortcutBar_GetSlotCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::GetSlotCount, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutBar_GetShortcutEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::GetShortcutEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutBar_ShortcutPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutPackage, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_ShortcutEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutEquip, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_ShortcutSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutSkill, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutBar_ShortcutVehicle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutVehicle, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_ShortcutExchange(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutExchange, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_ShortcutActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutActive, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_ShortcutRemove(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::ShortcutRemove, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutBar_GetFirstShortcutIndexByTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShortcutBar* pkAPI = (GameLogic::LC_ShortcutBar*)binder.CheckUserType(1, "LC_ShortcutBar");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShortcutBar::GetFirstShortcutIndexByTypeID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ShortcutBar[] = {
	{"Create", bnd_LuaCreate_LC_ShortcutBar},
	{"GetSlotCount", bnd_LC_ShortcutBar_GetSlotCount},
	{"GetShortcutEntry", bnd_LC_ShortcutBar_GetShortcutEntry},
	{"ShortcutPackage", bnd_LC_ShortcutBar_ShortcutPackage},
	{"ShortcutEquip", bnd_LC_ShortcutBar_ShortcutEquip},
	{"ShortcutSkill", bnd_LC_ShortcutBar_ShortcutSkill},
	{"ShortcutVehicle", bnd_LC_ShortcutBar_ShortcutVehicle},
	{"ShortcutExchange", bnd_LC_ShortcutBar_ShortcutExchange},
	{"ShortcutActive", bnd_LC_ShortcutBar_ShortcutActive},
	{"ShortcutRemove", bnd_LC_ShortcutBar_ShortcutRemove},
	{"GetFirstShortcutIndexByTypeID", bnd_LC_ShortcutBar_GetFirstShortcutIndexByTypeID},
	{NULL, NULL}
	};
	static int luaopen_LC_ShortcutBar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShortcutBar", 0, lib_LC_ShortcutBar, bnd_LuaDestroy_LC_ShortcutBar);
		return 1;
	}
	///////////////////////////////////////////////
	////////TT_TextManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_TT_TextManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* h = TT_TextManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "TT_TextManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_TT_TextManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//TT_TextManager* h = (TT_TextManager*) binder.CheckUserType(1, "TT_TextManager");
		binder.CheckUserType(1, "TT_TextManager");
		return 0;
	}
	static int bnd_TT_TextManager_GetChannelTabTextCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetChannelTabTextCount, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_GetChannelTextElementCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetChannelTextElementCount, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_ClearChannelTabText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::ClearChannelTabText, L, 2);
		return 0;
	}		
	static int bnd_TT_TextManager_GetAndClearChannelTabOderDirtyFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetAndClearChannelTabOderDirtyFlag, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_GetAndClearTextIncreaseNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetAndClearTextIncreaseNum, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_GetChannelTabTextElement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetChannelTabTextElement, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_GetChannelTextElement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::GetChannelTextElement, L, 2);
		return 1;
	}
	static int bnd_TT_TextManager_IsInChannel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextManager* pkAPI = (TT_TextManager*)binder.CheckUserType(1, "TT_TextManager");
		Utility::LuaCall(*pkAPI, &TT_TextManager::IsInChannel, L, 2);
		return 1;
	}
	static const luaL_reg lib_TT_TextManager[] = {
	{"Create", bnd_LuaCreate_TT_TextManager},
	{"GetChannelTabTextCount", bnd_TT_TextManager_GetChannelTabTextCount},
	{"GetChannelTextElementCount", bnd_TT_TextManager_GetChannelTextElementCount},
	{"ClearChannelTabText", bnd_TT_TextManager_ClearChannelTabText},
	{"GetAndClearChannelTabOderDirtyFlag", bnd_TT_TextManager_GetAndClearChannelTabOderDirtyFlag},
	{"GetAndClearTextIncreaseNum", bnd_TT_TextManager_GetAndClearTextIncreaseNum},
	{"GetChannelTabTextElement", bnd_TT_TextManager_GetChannelTabTextElement},
	{"GetChannelTextElement", bnd_TT_TextManager_GetChannelTextElement},
	{"IsInChannel", bnd_TT_TextManager_IsInChannel},
	{NULL, NULL}
	};
	static int luaopen_TT_TextManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("TT_TextManager", 0, lib_TT_TextManager, bnd_LuaDestroy_TT_TextManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TooltipManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TooltipManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* h = LC_TooltipManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TooltipManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TooltipManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_TooltipManager* h = (LC_TooltipManager*) binder.CheckUserType(1, "LC_TooltipManager");
		binder.CheckUserType(1, "LC_TooltipManager");
		return 0;
	}
	static int bnd_LC_TooltipManager_GetBackPackTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetBackPackTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetRunePackTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetRunePackTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetSkillTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall<LC_TooltipManager, StringType, int,int>(*pkAPI ,&LC_TooltipManager::GetSkillTooltip , L , 2);
		return 1;
	}		
	static int bnd_LC_TooltipManager_GetSkillToolTipBySkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetSkillToolTipBySkillID, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetCharacterEquipmentTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetCharacterEquipmentTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetSkillStateTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetSkillStateTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetItemTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetItemTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetItemTooltipNormal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetItemTooltipNormal, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetEquipEnhanceTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetEquipEnhanceTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetCompositionTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetCompositionTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetMeditateInfoTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetMeditateInfoTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetSkillTooltipInShortcut(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetSkillTooltipInShortcut, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetCurrentEquipmentTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetCurrentEquipmentTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetSkillInfoEntryByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetSkillInfoEntryByID, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetTipBackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetTipBackPackEntry, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetGameStoryTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetGameStoryTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetEquipmentTooltipByEntryEx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetEquipmentTooltipByEntryEx, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_BuildLinkTooltipInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::BuildLinkTooltipInfo, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_ParseLinkTooltipInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::ParseLinkTooltipInfo, L, 2);
		return 1;
	}
	static int bnd_LC_TooltipManager_GetSkillStateUseResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TooltipManager* pkAPI = (LC_TooltipManager*)binder.CheckUserType(1, "LC_TooltipManager");
		Utility::LuaCall(*pkAPI, &LC_TooltipManager::GetSkillStateUseResult, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TooltipManager[] = {
	{"Create", bnd_LuaCreate_LC_TooltipManager},
	{"GetBackPackTooltip", bnd_LC_TooltipManager_GetBackPackTooltip},
	{"GetRunePackTooltip", bnd_LC_TooltipManager_GetRunePackTooltip},
	{"GetSkillTooltip", bnd_LC_TooltipManager_GetSkillTooltip},
	{"GetSkillToolTipBySkillID", bnd_LC_TooltipManager_GetSkillToolTipBySkillID},
	{"GetCharacterEquipmentTooltip", bnd_LC_TooltipManager_GetCharacterEquipmentTooltip},
	{"GetSkillStateTooltip", bnd_LC_TooltipManager_GetSkillStateTooltip},
	{"GetItemTooltip", bnd_LC_TooltipManager_GetItemTooltip},
	{"GetTooltip", bnd_LC_TooltipManager_GetTooltip},
	{"GetItemTooltipNormal", bnd_LC_TooltipManager_GetItemTooltipNormal},
	{"GetEquipEnhanceTooltip", bnd_LC_TooltipManager_GetEquipEnhanceTooltip},
	{"GetCompositionTooltip", bnd_LC_TooltipManager_GetCompositionTooltip},
	{"GetMeditateInfoTooltip", bnd_LC_TooltipManager_GetMeditateInfoTooltip},
	{"GetSkillTooltipInShortcut", bnd_LC_TooltipManager_GetSkillTooltipInShortcut},
	{"GetCurrentEquipmentTooltip", bnd_LC_TooltipManager_GetCurrentEquipmentTooltip},
	{"GetSkillInfoEntryByID", bnd_LC_TooltipManager_GetSkillInfoEntryByID},
	{"GetTipBackPackEntry", bnd_LC_TooltipManager_GetTipBackPackEntry},
	{"GetGameStoryTooltip", bnd_LC_TooltipManager_GetGameStoryTooltip},
	{"GetEquipmentTooltipByEntryEx", bnd_LC_TooltipManager_GetEquipmentTooltipByEntryEx},
	{"BuildLinkTooltipInfo", bnd_LC_TooltipManager_BuildLinkTooltipInfo},
	{"ParseLinkTooltipInfo", bnd_LC_TooltipManager_ParseLinkTooltipInfo},
	{"GetSkillStateUseResult", bnd_LC_TooltipManager_GetSkillStateUseResult},
	{NULL, NULL}
	};
	static int luaopen_LC_TooltipManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TooltipManager", 0, lib_LC_TooltipManager, bnd_LuaDestroy_LC_TooltipManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MapManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MapManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* h = LC_MapManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MapManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MapManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_MapManager* h = (LC_MapManager*) binder.CheckUserType(1, "LC_MapManager");
		binder.CheckUserType(1, "LC_MapManager");
		return 0;
	}
	static int bnd_LC_MapManager_GetMiniMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMiniMap, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetRadarMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetRadarMap, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMainCharDirection(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMainCharDirection, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMapNameByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMapNameByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetAreaMapNameByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetAreaMapNameByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMapAliasNameByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMapAliasNameByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMapLoadingImageByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMapLoadingImageByMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetTownAliasNameByTownID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetTownAliasNameByTownID, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMapClipAreaInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMapClipAreaInfo, L, 2);
		return 1;
	}
	static int bnd_LC_MapManager_GetMapPositionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MapManager* pkAPI = (LC_MapManager*)binder.CheckUserType(1, "LC_MapManager");
		Utility::LuaCall(*pkAPI, &LC_MapManager::GetMapPositionInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MapManager[] = {
	{"Create", bnd_LuaCreate_LC_MapManager},
	{"GetMiniMap", bnd_LC_MapManager_GetMiniMap},
	{"GetRadarMap", bnd_LC_MapManager_GetRadarMap},
	{"GetMainCharDirection", bnd_LC_MapManager_GetMainCharDirection},
	{"GetMapNameByMapID", bnd_LC_MapManager_GetMapNameByMapID},
	{"GetAreaMapNameByMapID", bnd_LC_MapManager_GetAreaMapNameByMapID},
	{"GetMapAliasNameByMapID", bnd_LC_MapManager_GetMapAliasNameByMapID},
	{"GetMapLoadingImageByMapID", bnd_LC_MapManager_GetMapLoadingImageByMapID},
	{"GetTownAliasNameByTownID", bnd_LC_MapManager_GetTownAliasNameByTownID},
	{"GetMapClipAreaInfo", bnd_LC_MapManager_GetMapClipAreaInfo},
	{"GetMapPositionInfo", bnd_LC_MapManager_GetMapPositionInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_MapManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MapManager", 0, lib_LC_MapManager, bnd_LuaDestroy_LC_MapManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MiniMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MiniMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MiniMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MiniMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_MiniMap* h = (LC_MiniMap*) binder.CheckUserType(1, "LC_MiniMap");
		binder.CheckUserType(1, "LC_MiniMap");
		return 0;
	}
	static int bnd_LC_MiniMap_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetMainCharDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMainCharDescription, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_SetMapIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetMapIndex, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_SetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetMapID, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_GetMapAreaCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMapAreaCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetMapAreaNameByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMapAreaNameByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetMapAreaChildCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMapAreaChildCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetChildDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetChildDesc, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetNpcByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetNpcByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetWorldMapCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetWorldMapCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetWorldMapName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetWorldMapName, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_IsTown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::IsTown, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetWorldMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetWorldMapID, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_ShowPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::ShowPath, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_SetTargetNPCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetTargetNPCID, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_GetPathCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetPathCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetPathDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetPathDesc, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetPathDescWorldCoord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetPathDescWorldCoord, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GenerateToolTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GenerateToolTip, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetPlayerGroupCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetPlayerGroupCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetPlayerGroupDescByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetPlayerGroupDescByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetNetPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetNetPlayerCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetNetPlayerDescByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetNetPlayerDescByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetTaskInfoCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetTaskInfoCount, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetTaskInfo, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_SetShowFunctionNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetShowFunctionNPC, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_SetShowStroyNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetShowStroyNPC, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_SetShowMonster(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetShowMonster, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_SetTownFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::SetTownFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_GetTownFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetTownFlag, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_GetTown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetTown, L, 2);
		return 1;
	}
	static int bnd_LC_MiniMap_EnterTown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::EnterTown, L, 2);
		return 0;
	}		
	static int bnd_LC_MiniMap_GetMapLogicID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_MiniMap* pkAPI = (LC_MiniMap*)binder.CheckUserType(1, "LC_MiniMap");
		Utility::LuaCall(*pkAPI, &LC_MiniMap::GetMapLogicID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MiniMap[] = {
	{"Create", bnd_LuaCreate_LC_MiniMap},
	{"GetDirtyFlagRevisionID", bnd_LC_MiniMap_GetDirtyFlagRevisionID},
	{"GetMainCharDescription", bnd_LC_MiniMap_GetMainCharDescription},
	{"GetMapID", bnd_LC_MiniMap_GetMapID},
	{"SetMapIndex", bnd_LC_MiniMap_SetMapIndex},
	{"SetMapID", bnd_LC_MiniMap_SetMapID},
	{"GetMapAreaCount", bnd_LC_MiniMap_GetMapAreaCount},
	{"GetMapAreaNameByIndex", bnd_LC_MiniMap_GetMapAreaNameByIndex},
	{"GetMapAreaChildCount", bnd_LC_MiniMap_GetMapAreaChildCount},
	{"GetChildDesc", bnd_LC_MiniMap_GetChildDesc},
	{"GetNpcByIndex", bnd_LC_MiniMap_GetNpcByIndex},
	{"GetWorldMapCount", bnd_LC_MiniMap_GetWorldMapCount},
	{"GetWorldMapName", bnd_LC_MiniMap_GetWorldMapName},
	{"IsTown", bnd_LC_MiniMap_IsTown},
	{"GetWorldMapID", bnd_LC_MiniMap_GetWorldMapID},
	{"ShowPath", bnd_LC_MiniMap_ShowPath},
	{"SetTargetNPCID", bnd_LC_MiniMap_SetTargetNPCID},
	{"GetPathCount", bnd_LC_MiniMap_GetPathCount},
	{"GetPathDesc", bnd_LC_MiniMap_GetPathDesc},
	{"GetPathDescWorldCoord", bnd_LC_MiniMap_GetPathDescWorldCoord},
	{"GenerateToolTip", bnd_LC_MiniMap_GenerateToolTip},
	{"GetPlayerGroupCount", bnd_LC_MiniMap_GetPlayerGroupCount},
	{"GetPlayerGroupDescByIndex", bnd_LC_MiniMap_GetPlayerGroupDescByIndex},
	{"GetNetPlayerCount", bnd_LC_MiniMap_GetNetPlayerCount},
	{"GetNetPlayerDescByIndex", bnd_LC_MiniMap_GetNetPlayerDescByIndex},
	{"GetTaskInfoCount", bnd_LC_MiniMap_GetTaskInfoCount},
	{"GetTaskInfo", bnd_LC_MiniMap_GetTaskInfo},
	{"SetShowFunctionNPC", bnd_LC_MiniMap_SetShowFunctionNPC},
	{"SetShowStroyNPC", bnd_LC_MiniMap_SetShowStroyNPC},
	{"SetShowMonster", bnd_LC_MiniMap_SetShowMonster},
	{"SetTownFlag", bnd_LC_MiniMap_SetTownFlag},
	{"GetTownFlag", bnd_LC_MiniMap_GetTownFlag},
	{"GetTown", bnd_LC_MiniMap_GetTown},
	{"EnterTown", bnd_LC_MiniMap_EnterTown},
	{"GetMapLogicID", bnd_LC_MiniMap_GetMapLogicID},
	{NULL, NULL}
	};
	static int luaopen_LC_MiniMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MiniMap", 0, lib_LC_MiniMap, bnd_LuaDestroy_LC_MiniMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TownMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TownMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_TownMap* h = (LC_TownMap*) binder.CheckUserType(1, "LC_TownMap");
		binder.CheckUserType(1, "LC_TownMap");
		return 0;
	}
	static int bnd_LC_TownMap_TranToTownPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::TranToTownPosX, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_TranToTownPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::TranToTownPosY, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_TranToMiniMapPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::TranToMiniMapPosX, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_TranToMiniMapPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::TranToMiniMapPosY, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_GetTownName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::GetTownName, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_GetTownID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::GetTownID, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_TestIsTown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::TestIsTown, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_GetMapTownNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::GetMapTownNum, L, 2);
		return 1;
	}
	static int bnd_LC_TownMap_GetTownIconInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownMap* pkAPI = (LC_TownMap*)binder.CheckUserType(1, "LC_TownMap");
		Utility::LuaCall(*pkAPI, &LC_TownMap::GetTownIconInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TownMap[] = {
	{"Create", bnd_LuaCreate_LC_TownMap},
	{"TranToTownPosX", bnd_LC_TownMap_TranToTownPosX},
	{"TranToTownPosY", bnd_LC_TownMap_TranToTownPosY},
	{"TranToMiniMapPosX", bnd_LC_TownMap_TranToMiniMapPosX},
	{"TranToMiniMapPosY", bnd_LC_TownMap_TranToMiniMapPosY},
	{"GetTownName", bnd_LC_TownMap_GetTownName},
	{"GetTownID", bnd_LC_TownMap_GetTownID},
	{"TestIsTown", bnd_LC_TownMap_TestIsTown},
	{"GetMapTownNum", bnd_LC_TownMap_GetMapTownNum},
	{"GetTownIconInfo", bnd_LC_TownMap_GetTownIconInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_TownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TownMap", 0, lib_LC_TownMap, bnd_LuaDestroy_LC_TownMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ObjectDescription Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ObjectDescription");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ObjectDescription* h = (LC_ObjectDescription*) binder.CheckUserType(1, "LC_ObjectDescription");
		binder.CheckUserType(1, "LC_ObjectDescription");
		return 0;
	}
	static int bnd_LC_ObjectDescription_GetObjectID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* pkAPI = (LC_ObjectDescription*)binder.CheckUserType(1, "LC_ObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_ObjectDescription::GetObjectID, L, 2);
		return 1;
	}
	static int bnd_LC_ObjectDescription_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* pkAPI = (LC_ObjectDescription*)binder.CheckUserType(1, "LC_ObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_ObjectDescription::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ObjectDescription_GetObjectType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* pkAPI = (LC_ObjectDescription*)binder.CheckUserType(1, "LC_ObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_ObjectDescription::GetObjectType, L, 2);
		return 1;
	}
	static int bnd_LC_ObjectDescription_GetPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* pkAPI = (LC_ObjectDescription*)binder.CheckUserType(1, "LC_ObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_ObjectDescription::GetPosX, L, 2);
		return 1;
	}
	static int bnd_LC_ObjectDescription_GetPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ObjectDescription* pkAPI = (LC_ObjectDescription*)binder.CheckUserType(1, "LC_ObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_ObjectDescription::GetPosY, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ObjectDescription[] = {
	{"Create", bnd_LuaCreate_LC_ObjectDescription},
	{"GetObjectID", bnd_LC_ObjectDescription_GetObjectID},
	{"GetCharName", bnd_LC_ObjectDescription_GetCharName},
	{"GetObjectType", bnd_LC_ObjectDescription_GetObjectType},
	{"GetPosX", bnd_LC_ObjectDescription_GetPosX},
	{"GetPosY", bnd_LC_ObjectDescription_GetPosY},
	{NULL, NULL}
	};
	static int luaopen_LC_ObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ObjectDescription", 0, lib_LC_ObjectDescription, bnd_LuaDestroy_LC_ObjectDescription);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_RadarObjectDescription Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_RadarObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_RadarObjectDescription");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_RadarObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_RadarObjectDescription* h = (LC_RadarObjectDescription*) binder.CheckUserType(1, "LC_RadarObjectDescription");
		binder.CheckUserType(1, "LC_RadarObjectDescription");
		return 0;
	}
	static int bnd_LC_RadarObjectDescription_GetObjectID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetObjectID, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetObjectType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetObjectType, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetRadarPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetRadarPosX, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetRadarPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetRadarPosY, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetWorldPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetWorldPosX, L, 2);
		return 1;
	}
	static int bnd_LC_RadarObjectDescription_GetWorldPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarObjectDescription* pkAPI = (LC_RadarObjectDescription*)binder.CheckUserType(1, "LC_RadarObjectDescription");
		Utility::LuaCall(*pkAPI, &LC_RadarObjectDescription::GetWorldPosY, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_RadarObjectDescription[] = {
	{"Create", bnd_LuaCreate_LC_RadarObjectDescription},
	{"GetObjectID", bnd_LC_RadarObjectDescription_GetObjectID},
	{"GetCharName", bnd_LC_RadarObjectDescription_GetCharName},
	{"GetObjectType", bnd_LC_RadarObjectDescription_GetObjectType},
	{"GetRadarPosX", bnd_LC_RadarObjectDescription_GetRadarPosX},
	{"GetRadarPosY", bnd_LC_RadarObjectDescription_GetRadarPosY},
	{"GetWorldPosX", bnd_LC_RadarObjectDescription_GetWorldPosX},
	{"GetWorldPosY", bnd_LC_RadarObjectDescription_GetWorldPosY},
	{NULL, NULL}
	};
	static int luaopen_LC_RadarObjectDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_RadarObjectDescription", 0, lib_LC_RadarObjectDescription, bnd_LuaDestroy_LC_RadarObjectDescription);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TownIconDescription Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TownIconDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TownIconDescription");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TownIconDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_TownIconDescription* h = (LC_TownIconDescription*) binder.CheckUserType(1, "LC_TownIconDescription");
		binder.CheckUserType(1, "LC_TownIconDescription");
		return 0;
	}
	static int bnd_LC_TownIconDescription_GetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetID, L, 2);
		return 1;
	}
	static int bnd_LC_TownIconDescription_GetPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetPosX, L, 2);
		return 1;
	}
	static int bnd_LC_TownIconDescription_GetPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetPosY, L, 2);
		return 1;
	}
	static int bnd_LC_TownIconDescription_GetWidth(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetWidth, L, 2);
		return 1;
	}
	static int bnd_LC_TownIconDescription_GetHeight(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetHeight, L, 2);
		return 1;
	}
	static int bnd_LC_TownIconDescription_GetTownName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_TownIconDescription* pkAPI = (LC_TownIconDescription*)binder.CheckUserType(1, "LC_TownIconDescription");
		Utility::LuaCall(*pkAPI, &LC_TownIconDescription::GetTownName, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TownIconDescription[] = {
	{"Create", bnd_LuaCreate_LC_TownIconDescription},
	{"GetID", bnd_LC_TownIconDescription_GetID},
	{"GetPosX", bnd_LC_TownIconDescription_GetPosX},
	{"GetPosY", bnd_LC_TownIconDescription_GetPosY},
	{"GetWidth", bnd_LC_TownIconDescription_GetWidth},
	{"GetHeight", bnd_LC_TownIconDescription_GetHeight},
	{"GetTownName", bnd_LC_TownIconDescription_GetTownName},
	{NULL, NULL}
	};
	static int luaopen_LC_TownIconDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TownIconDescription", 0, lib_LC_TownIconDescription, bnd_LuaDestroy_LC_TownIconDescription);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PathDesc Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PathDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PathDesc* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PathDesc");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PathDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_PathDesc* h = (LC_PathDesc*) binder.CheckUserType(1, "LC_PathDesc");
		binder.CheckUserType(1, "LC_PathDesc");
		return 0;
	}
	static int bnd_LC_PathDesc_GetPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PathDesc* pkAPI = (LC_PathDesc*)binder.CheckUserType(1, "LC_PathDesc");
		Utility::LuaCall(*pkAPI, &LC_PathDesc::GetPosX, L, 2);
		return 1;
	}
	static int bnd_LC_PathDesc_GetPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PathDesc* pkAPI = (LC_PathDesc*)binder.CheckUserType(1, "LC_PathDesc");
		Utility::LuaCall(*pkAPI, &LC_PathDesc::GetPosY, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PathDesc[] = {
	{"Create", bnd_LuaCreate_LC_PathDesc},
	{"GetPosX", bnd_LC_PathDesc_GetPosX},
	{"GetPosY", bnd_LC_PathDesc_GetPosY},
	{NULL, NULL}
	};
	static int luaopen_LC_PathDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PathDesc", 0, lib_LC_PathDesc, bnd_LuaDestroy_LC_PathDesc);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_RadarMap Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_RadarMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_RadarMap");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_RadarMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_RadarMap* h = (LC_RadarMap*) binder.CheckUserType(1, "LC_RadarMap");
		binder.CheckUserType(1, "LC_RadarMap");
		return 0;
	}
	static int bnd_LC_RadarMap_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetRadarMapSide(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetRadarMapSide, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_SetRadarMapSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::SetRadarMapSize, L, 2);
		return 0;
	}		
	static int bnd_LC_RadarMap_GetMapLogicID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMapLogicID, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMapLogicType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMapLogicType, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_ShowPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::ShowPath, L, 2);
		return 0;
	}		
	static int bnd_LC_RadarMap_ZoomIn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::ZoomIn, L, 2);
		return 0;
	}		
	static int bnd_LC_RadarMap_ZoomOut(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::ZoomOut, L, 2);
		return 0;
	}		
	static int bnd_LC_RadarMap_GetMainCharPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMainCharPosX, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMainCharPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMainCharPosY, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetHalfWidth(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetHalfWidth, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetHalfHeight(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetHalfHeight, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetNpcCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetNpcCount, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetNpcDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetNpcDescription, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetPlayerGroupMemberCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetPlayerGroupMemberCount, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetPlayerGroupMemberDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetPlayerGroupMemberDescription, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetNetPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetNetPlayerCount, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetNetPlayerDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetNetPlayerDescription, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMonsterCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMonsterCount, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMonsterDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMonsterDescription, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetPathCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetPathCount, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetPathDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetPathDesc, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GetMapWidth(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GetMapWidth, L, 2);
		return 1;
	}
	static int bnd_LC_RadarMap_GenerateToolTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_RadarMap* pkAPI = (LC_RadarMap*)binder.CheckUserType(1, "LC_RadarMap");
		Utility::LuaCall(*pkAPI, &LC_RadarMap::GenerateToolTip, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_RadarMap[] = {
	{"Create", bnd_LuaCreate_LC_RadarMap},
	{"GetDirtyFlagRevisionID", bnd_LC_RadarMap_GetDirtyFlagRevisionID},
	{"GetRadarMapSide", bnd_LC_RadarMap_GetRadarMapSide},
	{"SetRadarMapSize", bnd_LC_RadarMap_SetRadarMapSize},
	{"GetMapLogicID", bnd_LC_RadarMap_GetMapLogicID},
	{"GetMapResID", bnd_LC_RadarMap_GetMapResID},
	{"GetMapLogicType", bnd_LC_RadarMap_GetMapLogicType},
	{"ShowPath", bnd_LC_RadarMap_ShowPath},
	{"ZoomIn", bnd_LC_RadarMap_ZoomIn},
	{"ZoomOut", bnd_LC_RadarMap_ZoomOut},
	{"GetMainCharPosX", bnd_LC_RadarMap_GetMainCharPosX},
	{"GetMainCharPosY", bnd_LC_RadarMap_GetMainCharPosY},
	{"GetHalfWidth", bnd_LC_RadarMap_GetHalfWidth},
	{"GetHalfHeight", bnd_LC_RadarMap_GetHalfHeight},
	{"GetNpcCount", bnd_LC_RadarMap_GetNpcCount},
	{"GetNpcDescription", bnd_LC_RadarMap_GetNpcDescription},
	{"GetPlayerGroupMemberCount", bnd_LC_RadarMap_GetPlayerGroupMemberCount},
	{"GetPlayerGroupMemberDescription", bnd_LC_RadarMap_GetPlayerGroupMemberDescription},
	{"GetNetPlayerCount", bnd_LC_RadarMap_GetNetPlayerCount},
	{"GetNetPlayerDescription", bnd_LC_RadarMap_GetNetPlayerDescription},
	{"GetMonsterCount", bnd_LC_RadarMap_GetMonsterCount},
	{"GetMonsterDescription", bnd_LC_RadarMap_GetMonsterDescription},
	{"GetPathCount", bnd_LC_RadarMap_GetPathCount},
	{"GetPathDesc", bnd_LC_RadarMap_GetPathDesc},
	{"GetMapWidth", bnd_LC_RadarMap_GetMapWidth},
	{"GenerateToolTip", bnd_LC_RadarMap_GenerateToolTip},
	{NULL, NULL}
	};
	static int luaopen_LC_RadarMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_RadarMap", 0, lib_LC_RadarMap, bnd_LuaDestroy_LC_RadarMap);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PlayerGroupEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PlayerGroupEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PlayerGroupEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PlayerGroupEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_PlayerGroupEntry* h = (GameLogic::LC_PlayerGroupEntry*) binder.CheckUserType(1, "LC_PlayerGroupEntry");
		binder.CheckUserType(1, "LC_PlayerGroupEntry");
		return 0;
	}
	static int bnd_LC_PlayerGroupEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetPlayerID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetCheif(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetCheif, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetDead, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetState, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetCareerType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetCareerType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetWeaponType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetWeaponType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetVehicleLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetVehicleLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetMaxHP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetMaxHP, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetBowLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetBowLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetHP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetHP, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetDevaEyeLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetDevaEyeLevel, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetHeadAvatarID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetHeadAvatarID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetBodyAvatarID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetBodyAvatarID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetFootAvatarID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetFootAvatarID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetWeaponAvatarID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetWeaponAvatarID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetPosX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetPosX, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetPosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetPosY, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetMapID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetMapResID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetLogicAreaID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetLogicAreaID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetScore, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupEntry_GetTransformID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupEntry* pkAPI = (GameLogic::LC_PlayerGroupEntry*)binder.CheckUserType(1, "LC_PlayerGroupEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupEntry::GetTransformID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PlayerGroupEntry[] = {
	{"Create", bnd_LuaCreate_LC_PlayerGroupEntry},
	{"GetValid", bnd_LC_PlayerGroupEntry_GetValid},
	{"GetPlayerID", bnd_LC_PlayerGroupEntry_GetPlayerID},
	{"GetCharID", bnd_LC_PlayerGroupEntry_GetCharID},
	{"GetCheif", bnd_LC_PlayerGroupEntry_GetCheif},
	{"GetDead", bnd_LC_PlayerGroupEntry_GetDead},
	{"GetState", bnd_LC_PlayerGroupEntry_GetState},
	{"GetName", bnd_LC_PlayerGroupEntry_GetName},
	{"GetLevel", bnd_LC_PlayerGroupEntry_GetLevel},
	{"GetCareerType", bnd_LC_PlayerGroupEntry_GetCareerType},
	{"GetWeaponType", bnd_LC_PlayerGroupEntry_GetWeaponType},
	{"GetVehicleLevel", bnd_LC_PlayerGroupEntry_GetVehicleLevel},
	{"GetCharType", bnd_LC_PlayerGroupEntry_GetCharType},
	{"GetMaxHP", bnd_LC_PlayerGroupEntry_GetMaxHP},
	{"GetBowLevel", bnd_LC_PlayerGroupEntry_GetBowLevel},
	{"GetHP", bnd_LC_PlayerGroupEntry_GetHP},
	{"GetDevaEyeLevel", bnd_LC_PlayerGroupEntry_GetDevaEyeLevel},
	{"GetHeadAvatarID", bnd_LC_PlayerGroupEntry_GetHeadAvatarID},
	{"GetBodyAvatarID", bnd_LC_PlayerGroupEntry_GetBodyAvatarID},
	{"GetFootAvatarID", bnd_LC_PlayerGroupEntry_GetFootAvatarID},
	{"GetWeaponAvatarID", bnd_LC_PlayerGroupEntry_GetWeaponAvatarID},
	{"GetPosX", bnd_LC_PlayerGroupEntry_GetPosX},
	{"GetPosY", bnd_LC_PlayerGroupEntry_GetPosY},
	{"GetMapID", bnd_LC_PlayerGroupEntry_GetMapID},
	{"GetMapResID", bnd_LC_PlayerGroupEntry_GetMapResID},
	{"GetLogicAreaID", bnd_LC_PlayerGroupEntry_GetLogicAreaID},
	{"GetScore", bnd_LC_PlayerGroupEntry_GetScore},
	{"GetBornCharType", bnd_LC_PlayerGroupEntry_GetBornCharType},
	{"GetTransformID", bnd_LC_PlayerGroupEntry_GetTransformID},
	{NULL, NULL}
	};
	static int luaopen_LC_PlayerGroupEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PlayerGroupEntry", 0, lib_LC_PlayerGroupEntry, bnd_LuaDestroy_LC_PlayerGroupEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PlayerGroupBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PlayerGroupBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PlayerGroupBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PlayerGroupBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_PlayerGroupBase* h = (GameLogic::LC_PlayerGroupBase*) binder.CheckUserType(1, "LC_PlayerGroupBase");
		binder.CheckUserType(1, "LC_PlayerGroupBase");
		return 0;
	}
	static int bnd_LC_PlayerGroupBase_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetGroupEntryInMemberList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetGroupEntryInMemberList, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetGroupEntryInCandidateList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetGroupEntryInCandidateList, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetGroupCheifID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetGroupCheifID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetItemGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetItemGrade, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_IsCandidateListEmpty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::IsCandidateListEmpty, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetMemberCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetMemberCount, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerGroupBase_GetCandidateListSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PlayerGroupBase* pkAPI = (GameLogic::LC_PlayerGroupBase*)binder.CheckUserType(1, "LC_PlayerGroupBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PlayerGroupBase::GetCandidateListSize, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PlayerGroupBase[] = {
	{"Create", bnd_LuaCreate_LC_PlayerGroupBase},
	{"GetDirtyFlagRevisionID", bnd_LC_PlayerGroupBase_GetDirtyFlagRevisionID},
	{"GetGroupEntryInMemberList", bnd_LC_PlayerGroupBase_GetGroupEntryInMemberList},
	{"GetGroupEntryInCandidateList", bnd_LC_PlayerGroupBase_GetGroupEntryInCandidateList},
	{"GetGroupCheifID", bnd_LC_PlayerGroupBase_GetGroupCheifID},
	{"GetItemGrade", bnd_LC_PlayerGroupBase_GetItemGrade},
	{"IsCandidateListEmpty", bnd_LC_PlayerGroupBase_IsCandidateListEmpty},
	{"GetMemberCount", bnd_LC_PlayerGroupBase_GetMemberCount},
	{"GetCandidateListSize", bnd_LC_PlayerGroupBase_GetCandidateListSize},
	{NULL, NULL}
	};
	static int luaopen_LC_PlayerGroupBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PlayerGroupBase", "LC_LogicObject", lib_LC_PlayerGroupBase, bnd_LuaDestroy_LC_PlayerGroupBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShopCityGoodsDescriptionEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShopCityGoodsDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShopCityGoodsDescriptionEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShopCityGoodsDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ShopCityGoodsDescriptionEntry* h = (GameLogic::LC_ShopCityGoodsDescriptionEntry*) binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		return 0;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetGoodsID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetGoodsID, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetDiscountPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetDiscountPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetCashPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetCashPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetItemID, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetItemCount, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetSellState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetSellState, L, 2);
		return 1;
	}
	static int bnd_LC_ShopCityGoodsDescriptionEntry_GetItemType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ShopCityGoodsDescriptionEntry* pkAPI = (GameLogic::LC_ShopCityGoodsDescriptionEntry*)binder.CheckUserType(1, "LC_ShopCityGoodsDescriptionEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ShopCityGoodsDescriptionEntry::GetItemType, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ShopCityGoodsDescriptionEntry[] = {
	{"Create", bnd_LuaCreate_LC_ShopCityGoodsDescriptionEntry},
	{"GetGoodsID", bnd_LC_ShopCityGoodsDescriptionEntry_GetGoodsID},
	{"GetPrice", bnd_LC_ShopCityGoodsDescriptionEntry_GetPrice},
	{"GetDiscountPrice", bnd_LC_ShopCityGoodsDescriptionEntry_GetDiscountPrice},
	{"GetCashPrice", bnd_LC_ShopCityGoodsDescriptionEntry_GetCashPrice},
	{"GetItemID", bnd_LC_ShopCityGoodsDescriptionEntry_GetItemID},
	{"GetItemCount", bnd_LC_ShopCityGoodsDescriptionEntry_GetItemCount},
	{"GetSellState", bnd_LC_ShopCityGoodsDescriptionEntry_GetSellState},
	{"GetItemType", bnd_LC_ShopCityGoodsDescriptionEntry_GetItemType},
	{NULL, NULL}
	};
	static int luaopen_LC_ShopCityGoodsDescriptionEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShopCityGoodsDescriptionEntry", 0, lib_LC_ShopCityGoodsDescriptionEntry, bnd_LuaDestroy_LC_ShopCityGoodsDescriptionEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientShopCity Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientShopCity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* h = GameLogic::LC_ClientShopCity::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientShopCity");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientShopCity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientShopCity* h = (GameLogic::LC_ClientShopCity*) binder.CheckUserType(1, "LC_ClientShopCity");
		binder.CheckUserType(1, "LC_ClientShopCity");
		return 0;
	}
	static int bnd_LC_ClientShopCity_RequestBuyGoods(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestBuyGoods, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_RequestMysticalShopOp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestMysticalShopOp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_RequestQuickBuyGoods(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestQuickBuyGoods, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_RequestSpecialBuyGoods(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestSpecialBuyGoods, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_RequestGoodlList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestGoodlList, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShopCity_RequestResetShopTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestResetShopTimes, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShopCity_RequestGetShopResetTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestGetShopResetTimes, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShopCity_RequestGetShopItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::RequestGetShopItem, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShopCity_GetShopResetCostInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetShopResetCostInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetGoodCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetGoodCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetGoodDescriptionByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetGoodDescriptionByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetGoodDescriptionByGoodID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetGoodDescriptionByGoodID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetGoodsInfoByItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetGoodsInfoByItemID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetGoodsInfoByShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetGoodsInfoByShopID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_TestValueMask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::TestValueMask, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShopCity_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShopCity* pkAPI = (GameLogic::LC_ClientShopCity*)binder.CheckUserType(1, "LC_ClientShopCity");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShopCity::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientShopCity[] = {
	{"Create", bnd_LuaCreate_LC_ClientShopCity},
	{"RequestBuyGoods", bnd_LC_ClientShopCity_RequestBuyGoods},
	{"RequestMysticalShopOp", bnd_LC_ClientShopCity_RequestMysticalShopOp},
	{"RequestQuickBuyGoods", bnd_LC_ClientShopCity_RequestQuickBuyGoods},
	{"RequestSpecialBuyGoods", bnd_LC_ClientShopCity_RequestSpecialBuyGoods},
	{"RequestGoodlList", bnd_LC_ClientShopCity_RequestGoodlList},
	{"RequestResetShopTimes", bnd_LC_ClientShopCity_RequestResetShopTimes},
	{"RequestGetShopResetTimes", bnd_LC_ClientShopCity_RequestGetShopResetTimes},
	{"RequestGetShopItem", bnd_LC_ClientShopCity_RequestGetShopItem},
	{"GetShopResetCostInfo", bnd_LC_ClientShopCity_GetShopResetCostInfo},
	{"GetGoodCount", bnd_LC_ClientShopCity_GetGoodCount},
	{"GetGoodDescriptionByIndex", bnd_LC_ClientShopCity_GetGoodDescriptionByIndex},
	{"GetGoodDescriptionByGoodID", bnd_LC_ClientShopCity_GetGoodDescriptionByGoodID},
	{"GetGoodsInfoByItemID", bnd_LC_ClientShopCity_GetGoodsInfoByItemID},
	{"GetGoodsInfoByShopID", bnd_LC_ClientShopCity_GetGoodsInfoByShopID},
	{"TestValueMask", bnd_LC_ClientShopCity_TestValueMask},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientShopCity_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientShopCity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientShopCity", 0, lib_LC_ClientShopCity, bnd_LuaDestroy_LC_ClientShopCity);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PKRecorderBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PKRecorderBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PKRecorderBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PKRecorderBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_PKRecorderBase* h = (GameLogic::LC_PKRecorderBase*) binder.CheckUserType(1, "LC_PKRecorderBase");
		binder.CheckUserType(1, "LC_PKRecorderBase");
		return 0;
	}
	static int bnd_LC_PKRecorderBase_SetPKMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* pkAPI = (GameLogic::LC_PKRecorderBase*)binder.CheckUserType(1, "LC_PKRecorderBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PKRecorderBase::SetPKMode, L, 2);
		return 0;
	}		
	static int bnd_LC_PKRecorderBase_GetPKMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* pkAPI = (GameLogic::LC_PKRecorderBase*)binder.CheckUserType(1, "LC_PKRecorderBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PKRecorderBase::GetPKMode, L, 2);
		return 1;
	}
	static int bnd_LC_PKRecorderBase_GetFightState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* pkAPI = (GameLogic::LC_PKRecorderBase*)binder.CheckUserType(1, "LC_PKRecorderBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PKRecorderBase::GetFightState, L, 2);
		return 1;
	}
	static int bnd_LC_PKRecorderBase_GetPKValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* pkAPI = (GameLogic::LC_PKRecorderBase*)binder.CheckUserType(1, "LC_PKRecorderBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PKRecorderBase::GetPKValue, L, 2);
		return 1;
	}
	static int bnd_LC_PKRecorderBase_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_PKRecorderBase* pkAPI = (GameLogic::LC_PKRecorderBase*)binder.CheckUserType(1, "LC_PKRecorderBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_PKRecorderBase::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PKRecorderBase[] = {
	{"Create", bnd_LuaCreate_LC_PKRecorderBase},
	{"SetPKMode", bnd_LC_PKRecorderBase_SetPKMode},
	{"GetPKMode", bnd_LC_PKRecorderBase_GetPKMode},
	{"GetFightState", bnd_LC_PKRecorderBase_GetFightState},
	{"GetPKValue", bnd_LC_PKRecorderBase_GetPKValue},
	{"GetDirtyFlagRevisionID", bnd_LC_PKRecorderBase_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_PKRecorderBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PKRecorderBase", 0, lib_LC_PKRecorderBase, bnd_LuaDestroy_LC_PKRecorderBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////SC_ClientScriptInterface Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_SC_ClientScriptInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientScriptInterface* h = SC_ClientScriptInterface::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "SC_ClientScriptInterface");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_SC_ClientScriptInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//SC_ClientScriptInterface* h = (SC_ClientScriptInterface*) binder.CheckUserType(1, "SC_ClientScriptInterface");
		binder.CheckUserType(1, "SC_ClientScriptInterface");
		return 0;
	}
	static int bnd_SC_ClientScriptInterface_GetSkillInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientScriptInterface* pkAPI = (SC_ClientScriptInterface*)binder.CheckUserType(1, "SC_ClientScriptInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientScriptInterface::GetSkillInterface, L, 2);
		return 1;
	}
	static int bnd_SC_ClientScriptInterface_GetDebugInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientScriptInterface* pkAPI = (SC_ClientScriptInterface*)binder.CheckUserType(1, "SC_ClientScriptInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientScriptInterface::GetDebugInterface, L, 2);
		return 1;
	}
	static const luaL_reg lib_SC_ClientScriptInterface[] = {
	{"Create", bnd_LuaCreate_SC_ClientScriptInterface},
	{"GetSkillInterface", bnd_SC_ClientScriptInterface_GetSkillInterface},
	{"GetDebugInterface", bnd_SC_ClientScriptInterface_GetDebugInterface},
	{NULL, NULL}
	};
	static int luaopen_SC_ClientScriptInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("SC_ClientScriptInterface", 0, lib_SC_ClientScriptInterface, bnd_LuaDestroy_SC_ClientScriptInterface);
		return 1;
	}
	///////////////////////////////////////////////
	////////SC_ClientSkillInterface Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_SC_ClientSkillInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "SC_ClientSkillInterface");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_SC_ClientSkillInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//SC_ClientSkillInterface* h = (SC_ClientSkillInterface*) binder.CheckUserType(1, "SC_ClientSkillInterface");
		binder.CheckUserType(1, "SC_ClientSkillInterface");
		return 0;
	}
	static int bnd_SC_ClientSkillInterface_ResetDownloadInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ResetDownloadInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetDownloadInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDownloadInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDownloadPercent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDownloadPercent, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameDeltaTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameDeltaTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProfileTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProfileTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCalendarToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCalendarToday, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTimeString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTimeString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAchievementInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAchievementInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActTimeShopInfoByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActTimeShopInfoByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameStoryRaidRewardByMapresID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameStoryRaidRewardByMapresID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLoginType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLoginType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameStage, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RaidMapCanPk(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RaidMapCanPk, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPlayerPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPlayerPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetPlayerPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetPlayerPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetPlayerPtrByPlayerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetPlayerPtrByPlayerID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetPlayerCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetPlayerByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetPlayerByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChestPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChestPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCHeadIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCHeadIcon, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNeighborPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNeighborPlayerCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTrueNeighborPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTrueNeighborPlayerCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNeighborPlayerPtrByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNeighborPlayerPtrByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_FindNPCPtrInCircleByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FindNPCPtrInCircleByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWatchedTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWatchedTargetID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPreLockedTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPreLockedTargetID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SetLockedTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetLockedTargetID, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_FreezeLockTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FreezeLockTargetID, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsFreezeLockTargetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsFreezeLockTargetID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSubordinateAttriLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSubordinateAttriLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CleanChangeLockedFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CleanChangeLockedFlag, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetCharShowRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharShowRank, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetElementDamageType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetElementDamageType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetIsWildBoss(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetIsWildBoss, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLevelExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLevelExp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyLevelExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyLevelExp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChangeServerCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChangeServerCash, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAttributeBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAttributeBase, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetToyPetCharTypeBycID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetToyPetCharTypeBycID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetToyPetInfoByCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetToyPetInfoByCID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShopCityGroupInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShopCityGroupInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAttributeRateBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAttributeRateBase, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAttributeRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAttributeRate, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAttributeRateUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAttributeRateUpgrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetAttributeRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetAttributeRate, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNetAttributeRateUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNetAttributeRateUpgrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShortcutBarPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShortcutBarPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCShopPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCShopPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCTransferPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCTransferPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDakTransferAreaNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDakTransferAreaNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTransferMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTransferMapID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTransferAreaID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTransferAreaID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillCoolDownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillCoolDownMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemCoolDownMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemCoolDownMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_OnGotoUserLogin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnGotoUserLogin, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnQuitLogin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnQuitLogin, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnGotoUrl(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnGotoUrl, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnshowWebWindow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnshowWebWindow, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowShunWangWebWindow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowShunWangWebWindow, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnHideWebWindow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnHideWebWindow, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnResetWebWindow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnResetWebWindow, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ScriptJzCmdlineHasValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ScriptJzCmdlineHasValue, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ScriptJzCmdlineGetValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ScriptJzCmdlineGetValue, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLastLoginServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLastLoginServerID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveLastLoginServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveLastLoginServerID, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetLastLoginCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLastLoginCharID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveLastLoginCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveLastLoginCharID, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnCheckForceLogin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnCheckForceLogin, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnUserLogin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnUserLogin, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SelectLoginZone(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SelectLoginZone, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnGotoSelChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnGotoSelChar, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnGotoCreateChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnGotoCreateChar, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnGotoSelServer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnGotoSelServer, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnEnterGame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnEnterGame, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlayVideo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayVideo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_EndVideo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::EndVideo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetCreateCharServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCreateCharServerID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_OnCreateChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnCreateChar, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnLoadingToGameStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnLoadingToGameStage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetPreStateType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPreStateType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNamePwdFromConfig(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNamePwdFromConfig, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLoginServerIDList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLoginServerIDList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLoginZoneIDList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLoginZoneIDList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLoginServerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLoginServerInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLoginZoneInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLoginZoneInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameServerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameServerCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameServerList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameServerList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameServerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameServerInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameServerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameServerName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurGameServer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurGameServer, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurGameServerNode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurGameServerNode, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUserCharCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUserCharCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurCharList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurCharList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetParamForCreateChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetParamForCreateChar, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RotateChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RotateChar, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RotateActorAndVehiclePreview(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RotateActorAndVehiclePreview, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_DeteachAllAttachFxAnim(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::DeteachAllAttachFxAnim, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RotateAvatarModel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RotateAvatarModel, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SetShaderConstF(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetShaderConstF, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetShaderConstF(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShaderConstF, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_UpdateAvatarBloomParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::UpdateAvatarBloomParams, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SetModelRotation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetModelRotation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SendReqServerListMsg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SendReqServerListMsg, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_WorldMapLoaded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::WorldMapLoaded, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ConfirmAction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ConfirmAction, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_StartCountDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StartCountDown, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_CancleCountDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CancleCountDown, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestLeaveGame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestLeaveGame, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestResetGame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestResetGame, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestReLoginGame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestReLoginGame, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_OnLowScoreConfirm(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnLowScoreConfirm, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ResetUINameArrage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ResetUINameArrage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetGameNetState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameNetState, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurrentDayTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurrentDayTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActivityScheduleDeltaTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActivityScheduleDeltaTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActivityScheduleStat(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActivityScheduleStat, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RequestRespawnOnCurrentLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestRespawnOnCurrentLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestRespawnOnSafeLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestRespawnOnSafeLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestRespawnByItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestRespawnByItem, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_CheckCanRespawnByItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckCanRespawnByItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanRespawnOnSafe(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanRespawnOnSafe, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnterMapItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnterMapItemInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRespawnProtectTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRespawnProtectTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNpcConversationHeadIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNpcConversationHeadIcon, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLogicAreaName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLogicAreaName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLogicAreaSpawnPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLogicAreaSpawnPos, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ChangeLockedTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ChangeLockedTarget, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetSkillUpGradeNeedCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillUpGradeNeedCash, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillUpgradeNeedBuddyStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillUpgradeNeedBuddyStar, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillCanUpGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillCanUpGrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillCanWakeUp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillCanWakeUp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RobotRequestRespawnOnCurrentLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RobotRequestRespawnOnCurrentLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetNPCLevelTypeByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCLevelTypeByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCLevelType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCLevelType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCEliteType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCEliteType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_Change2NextPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::Change2NextPos, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_CheckCanUseItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckCanUseItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsEquipReinStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsEquipReinStar, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPlayerLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPlayerLocation, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkInfoIDByLogicID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkInfoIDByLogicID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkInfoID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkInfoID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkObjectTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkObjectTypeID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkMapResID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsSameMapGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsSameMapGroup, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsTravelBoots(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsTravelBoots, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsNoGainJudge(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsNoGainJudge, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTransferPosition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTransferPosition, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkKeyWord(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkKeyWord, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkLevelInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkLevelInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLinkPosition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLinkPosition, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLocationTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLocationTip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PathToObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PathToObject, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PathToLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PathToLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_WalkToObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::WalkToObject, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_WalkToLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::WalkToLocation, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceLimitFuncID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceLimitFuncID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGetSpecialTrainingCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGetSpecialTrainingCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceNeedMaterialID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceNeedMaterialID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceNeedMaterialNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceNeedMaterialNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEnhanceLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEnhanceLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEnhanceLevelLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEnhanceLevelLimit, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceNeedRuneNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceNeedRuneNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_StartIdentifySkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StartIdentifySkill, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskPtr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskBuddyExpBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskBuddyExpBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskCommanderExpBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskCommanderExpBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskGoldBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskGoldBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskGuildPointBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskGuildPointBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCNameColor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCNameColor, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCMaxHp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCMaxHp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPClElite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPClElite, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProductionTypeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProductionTypeName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProductionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProductionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEnhanceFuncDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEnhanceFuncDescript, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsEnhanceRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsEnhanceRune, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckNeedUnBindCashDialog(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckNeedUnBindCashDialog, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceEquipLevelProperty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceEquipLevelProperty, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceEquipCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceEquipCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceEquipNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceEquipNeedLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnhanceEquipNeedEquipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnhanceEquipNeedEquipLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipSlotMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipSlotMaxLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipSlotScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipSlotScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipProperty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderReinforceEquipProperty, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderReinforceEquipCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderReinforceEquipNeedLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipSlotMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipSlotMaxLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderRefineEquipInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderRefineEquipInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderRefineEquipCostInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderRefineEquipCostInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetReinforceSuitInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetReinforceSuitInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRefineSuitInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRefineSuitInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderModingSpiritEquipCostInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderModingSpiritEquipCostInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetModingSpiritSuitInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetModingSpiritSuitInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMaxValidLevelInVIPProfit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMaxValidLevelInVIPProfit, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemNonpareilEffect(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemNonpareilEffect, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemNonpareilEffectBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemNonpareilEffectBase, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleBossRankReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleBossRankReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleBossBaseReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleBossBaseReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleTowerBuff(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleTowerBuff, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleTowerIntegralAdd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleTowerIntegralAdd, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleTowerVipBonusPercent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleTowerVipBonusPercent, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleBossInfoByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleBossInfoByType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleBossInfoByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleBossInfoByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleRobRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleRobRewardInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBreakEquipLevelProperty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBreakEquipLevelProperty, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBreakEquipPropertySpecialChange(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBreakEquipPropertySpecialChange, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBreakEquipProperty(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBreakEquipProperty, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBreakEquipDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBreakEquipDescription, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemBaseAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemBaseAttributes, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurLevelMaxMastery(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurLevelMaxMastery, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProductionNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProductionNeedLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCanProductionNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCanProductionNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMadeItemGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMadeItemGrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_AddCanLearnFormulaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::AddCanLearnFormulaEntry, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestInterruptProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestInterruptProduction, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_StartProduceSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StartProduceSkill, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_LearnProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::LearnProduction, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ForgetProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ForgetProduction, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_UpgradeProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::UpgradeProduction, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_LearnBaseFormula(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::LearnBaseFormula, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsLearnedProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsLearnedProduction, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SetBitVec(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetBitVec, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsEquipID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsEquipID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsQinggongSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsQinggongSkillID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsMedicineID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsMedicineID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsGemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsGemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsCanEnChantItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsCanEnChantItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsNpc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsNpc, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsSkillBookID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsSkillBookID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_TriggerNPCFunc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::TriggerNPCFunc, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsCanLevelUp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsCanLevelUp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_InsertNPCFuncEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::InsertNPCFuncEvent, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_StampASpecialBubble(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StampASpecialBubble, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_UpdateUIScreenPosByLogicObject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::UpdateUIScreenPosByLogicObject, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetLogicIDByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLogicIDByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanGetTaskItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanGetTaskItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsTaskInCurrentArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsTaskInCurrentArea, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEquipLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEquipLimit, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SwitchShieldVisibility(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SwitchShieldVisibility, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemCategoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemCategoryID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsIMEOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsIMEOpen, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ConfirmSendMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ConfirmSendMail, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ConfirmExitGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ConfirmExitGuild, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ConfirmDismissGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ConfirmDismissGuild, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_UseItemInPackByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::UseItemInPackByIndex, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetSkillStateCombatScoreBySkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillStateCombatScoreBySkillID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillStateUseResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillStateUseResult, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSevenDaysRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSevenDaysRewardInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemUseUIOpenFuncID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemUseUIOpenFuncID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItembShowUseIconByItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItembShowUseIconByItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemPropertyFuncSkills(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemPropertyFuncSkills, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_EquipItemInPackage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::EquipItemInPackage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PickItemInChestByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PickItemInChestByIndex, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RollButtonDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RollButtonDown, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetActorHatredList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActorHatredList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_Snapshot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::Snapshot, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_NoticeMessage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::NoticeMessage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_AddNoticeTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::AddNoticeTask, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RemoveNoticeTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RemoveNoticeTask, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SetTargetLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetTargetLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetComputerTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetComputerTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CookingDish(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CookingDish, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlaySound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlaySound, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetShowBloodBarType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowBloodBarType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckOperationValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckOperationValid, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckOperationExecute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckOperationExecute, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemText1CharFuncDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemText1CharFuncDescript, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemText2CharFuncDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemText2CharFuncDescript, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemText4CharFuncDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemText4CharFuncDescript, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAttributeFuncDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAttributeFuncDescript, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RequstInterruptCooking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequstInterruptCooking, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_CanContinueCookDish(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanContinueCookDish, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ReqSetOperationParameter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ReqSetOperationParameter, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ReqResetOperationParameter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ReqResetOperationParameter, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetHookItemCostID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHookItemCostID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHookItemCostAmount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHookItemCostAmount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHookItemCostTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHookItemCostTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapNameByMapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapNameByMapResID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapLineCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapLineCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapEnterConditionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapEnterConditionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMaxItemEnduranceValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMaxItemEnduranceValue, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ShowUIFrame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowUIFrame, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowUIError(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowUIError, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowUIErrorByCode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowUIErrorByCode, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowNoticeMessage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowNoticeMessage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowMouseTips(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowMouseTips, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowNotifyMessage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowNotifyMessage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowNotifyMessageWithType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowNotifyMessageWithType, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowSystemTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowSystemTip, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowAttriActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowAttriActive, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetInfoFromConfig(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetInfoFromConfig, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveInfoToConfig(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveInfoToConfig, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetSuperShopCustomizeTodayPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSuperShopCustomizeTodayPrompt, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_OPItemInTempPack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OPItemInTempPack, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowUIContentFunc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowUIContentFunc, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetShowUITypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowUITypeID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShowUIIconDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowUIIconDesc, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDescriptType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDescriptType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCShopNameByFuncID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCShopNameByFuncID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTokenCompositeItemSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTokenCompositeItemSlot, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTokenCompositedItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTokenCompositedItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RequestInterruptTokenComposite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestInterruptTokenComposite, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetMapTransDataEntryByMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapTransDataEntryByMapID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_StopUICutScenes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StopUICutScenes, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetUICutScenesPlayTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUICutScenesPlayTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUICutScenesTimeStep(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUICutScenesTimeStep, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUICutScenesIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUICutScenesIcon, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSitRecoverVipGfx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSitRecoverVipGfx, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillOpenLevelInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillOpenLevelInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTwToZn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTwToZn, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanEquipOrUseItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanEquipOrUseItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanEquipSubItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanEquipSubItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanDecomposition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanDecomposition, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemDisassembleUseFuncResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemDisassembleUseFuncResult, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemDisassembleMustDropItems(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemDisassembleMustDropItems, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillIconPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillIconPath, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillUseResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillUseResult, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemShowID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemShowID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyExpDrugs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyExpDrugs, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RequestRandomPlayerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestRandomPlayerName, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetAutoCommitTeamRequest(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAutoCommitTeamRequest, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveAutoCommitTeamRequest(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveAutoCommitTeamRequest, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetAutoCommitTeamInvite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAutoCommitTeamInvite, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveAutoCommitTeamInvite(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveAutoCommitTeamInvite, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetShowBattleBuddyEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowBattleBuddyEquip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveShowBattleBuddyEquip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveShowBattleBuddyEquip, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetShowBattleBuddyRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowBattleBuddyRune, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SaveShowBattleBuddyRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SaveShowBattleBuddyRune, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetArenaDailyRewardParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetArenaDailyRewardParam, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetFirstSkillIDByShortcutSlot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetFirstSkillIDByShortcutSlot, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCreateRequireLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCreateRequireLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCreateRequireMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCreateRequireMoney, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCreateRequireYuanbao(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCreateRequireYuanbao, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCreateRequireVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCreateRequireVip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBossIdList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBossIdList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsUnbindItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsUnbindItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanBeBatchUsed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanBeBatchUsed, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapShowType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapShowType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUIMapShowType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUIMapShowType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSchemeGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSchemeGroupID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHarmQuantity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHarmQuantity, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapBelongStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapBelongStoryID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapSchemeTeamCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapSchemeTeamCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapAutoTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapAutoTask, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipAuthorityString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipAuthorityString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipNameString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipNameString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivelegeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivelegeInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivelegeInfoByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivelegeInfoByType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivelegeInfoByTypeAndLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivelegeInfoByTypeAndLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShowVipPrivelegeInfoByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowVipPrivelegeInfoByType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetFlowerSendInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetFlowerSendInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMaxGuildSearchNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMaxGuildSearchNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLivenessByLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLivenessByLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChoosePetIds(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChoosePetIds, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetIconByNPCFuntionType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetIconByNPCFuntionType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProgressInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProgressInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapCateGoryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapCateGoryInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapRwdInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapRwdInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShowRaidStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShowRaidStage, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRespawnItemNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRespawnItemNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetYuanbaoOriginalPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetYuanbaoOriginalPrice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetYuanbaoCurPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetYuanbaoCurPrice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAccessWayBuyPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAccessWayBuyPrice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemidInShopList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemidInShopList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemInShopList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemInShopList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanScreenPosMoveTo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanScreenPosMoveTo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_URLEncode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::URLEncode, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCrossRealmMapInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCrossRealmMapInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetKungFuMasterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetKungFuMasterID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCrossKungFuMasterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCrossKungFuMasterID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCrossRealWarServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCrossRealWarServerID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetKungFuMasterDress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetKungFuMasterDress, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetKungFuMasterDress2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetKungFuMasterDress2, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPowerGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPowerGuildID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapDomainInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapDomainInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsDomainActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsDomainActive, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsDomainMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsDomainMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckDomainReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckDomainReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDomainMapResIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDomainMapResIDByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDomainFlagPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDomainFlagPos, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPlayerCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPlayerCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_NumberPlus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::NumberPlus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsKungFuMasterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsKungFuMasterID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildWarCatapultList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildWarCatapultList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsCrossRealmMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsCrossRealmMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsSpecialAffixItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsSpecialAffixItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsGuildRaidMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsGuildRaidMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharTalkIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharTalkIcon, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharNameColor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharNameColor, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDungeonTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDungeonTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapNeedLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanEnterMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanEnterMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanEnterMapWithPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanEnterMapWithPrompt, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapPreTaskName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapPreTaskName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHookMapsInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHookMapsInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaTotalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGamePlayerSubRewardsInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGamePlayerSubRewardsInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaOriginalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaOriginalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharAttributeCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharAttributeCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleCurrentLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleCurrentLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleFightingTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleFightingTotalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipTotalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetStandardCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetStandardCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillTotalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipScoreI3(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipScoreI3, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipReinforceScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipReinforceScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipScoreByItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipScoreByItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneEquipBaseScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneEquipBaseScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemSuitTotalScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemSuitTotalScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEffectDesp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEffectDesp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEffectFuncInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEffectFuncInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBaseEffectInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBaseEffectInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOpenBagData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOpenBagData, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetExternWarehouseData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetExternWarehouseData, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShopItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShopItemInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemUnBindPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemUnBindPrice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPowerUpInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPowerUpInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsEquipMostSuitable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsEquipMostSuitable, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaItemInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaSkillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaSkillInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaDisplaySkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaDisplaySkillID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurrentCanLearnSkillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurrentCanLearnSkillCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCConversationSequenceCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCConversationSequenceCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCConversationCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCConversationCharID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCConversationContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCConversationContent, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCConversationName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCConversationName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetConversationTypeByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetConversationTypeByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetConversationTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetConversationTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetConversationSoundKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetConversationSoundKey, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PlayCameraTrackAnim(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayCameraTrackAnim, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PlayCameraMaxTrackAnim(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayCameraMaxTrackAnim, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_StopCameraTrackAnim(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StopCameraTrackAnim, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RestoreFollowCamera(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RestoreFollowCamera, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_MoveCameraToNpcCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::MoveCameraToNpcCharType, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_MoveCameraToTarget(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::MoveCameraToTarget, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_MoveCameraToMC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::MoveCameraToMC, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_MoveCameraToNoUnLock(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::MoveCameraToNoUnLock, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetAnimModelPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAnimModelPath, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SceeenFadeIn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SceeenFadeIn, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_EyeExecuteSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::EyeExecuteSkill, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SceeenFadeOut(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SceeenFadeOut, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_Crash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::Crash, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetGlobleWarGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGlobleWarGuildID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsDomainWarGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsDomainWarGuild, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDataString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDataString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWildPrincesData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWildPrincesData, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAchievementData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAchievementData, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSystemTitlePeriod(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSystemTitlePeriod, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommonStatRewardList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommonStatRewardList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_FindNPCbylID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FindNPCbylID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_FindNPCByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FindNPCByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_FindNPCByNumberCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FindNPCByNumberCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PathtoTreasure(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PathtoTreasure, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PathtoTreasureToy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PathtoTreasureToy, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskMgr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskMgr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskCurChapter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskCurChapter, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllChapterInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllChapterInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllTaskReachInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllTaskReachInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskReachName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskReachName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChapterTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChapterTaskInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskRankInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllTaskRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllTaskRankInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurTaskRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurTaskRank, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskChapterRewardEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskChapterRewardEndTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetReachTaskChapterInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetReachTaskChapterInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTaskReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTaskReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildClashBossName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildClashBossName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildClashBossLocationID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildClashBossLocationID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNPCLevelByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNPCLevelByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRaidBossPublicLinkID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRaidBossPublicLinkID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBossLinkID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBossLinkID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RequestUseGuildTransportItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestUseGuildTransportItem, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_RequestGuildWorship(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RequestGuildWorship, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetGuildWorshipReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildWorshipReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildWorshipCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildWorshipCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildWorshipVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildWorshipVipLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ShowMessage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowMessage, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetErrorString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetErrorString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDistanceFromNpc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDistanceFromNpc, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_OnPlayNPCSound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::OnPlayNPCSound, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_AttachClientGameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::AttachClientGameEvent, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsRunInMiniLauncher(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsRunInMiniLauncher, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CommitPatchProgress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CommitPatchProgress, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsMapCanGuildTransport(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsMapCanGuildTransport, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_StopCurrentBGM(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StopCurrentBGM, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetCurrentNPCTalkTaskFunction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurrentNPCTalkTaskFunction, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetClientRumorManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetClientRumorManager, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipProfitDefineExtraBeginID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipProfitDefineExtraBeginID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWorld2RadarPositionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWorld2RadarPositionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsItemAutoUseByPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsItemAutoUseByPlayer, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsItemAutoShowByPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsItemAutoShowByPlayer, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsItemTrueAutoUseByPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsItemTrueAutoUseByPlayer, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUseGranuLimitCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUseGranuLimitCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNextColdDownTimeByCronStr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNextColdDownTimeByCronStr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_StopDownloadImageResources(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::StopDownloadImageResources, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsNeedShowFly(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsNeedShowFly, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOpenLevelInfoByKeyID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOpenLevelInfoByKeyID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_RaidMapCanRecordPK(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::RaidMapCanRecordPK, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWorldObjecDescID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWorldObjecDescID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsPkPunishArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsPkPunishArea, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanChangePKMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanChangePKMode, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetFixPKMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetFixPKMode, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEnterPKMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEnterPKMode, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDefaultConfigLevelOfGPU(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDefaultConfigLevelOfGPU, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOpenLevelOnlineTimeByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOpenLevelOnlineTimeByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOpenLvelTotoalTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOpenLvelTotoalTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBatchMaxItemCountByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBatchMaxItemCountByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDisplayCharTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDisplayCharTypeID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTreasureCostByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTreasureCostByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharTypeByFabaoID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharTypeByFabaoID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSubTransformSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSubTransformSkillID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSubTransformType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSubTransformType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckGuildWarTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckGuildWarTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildWarEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildWarEndTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckActivitySchedule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckActivitySchedule, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckSecretPoolValueID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckSecretPoolValueID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildDonateInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildDonateInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckRichManTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckRichManTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetScretTreasureTotalTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetScretTreasureTotalTimes, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetScretLimitTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetScretLimitTimes, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetScretTimesValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetScretTimesValue, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaLevelInOpenLevelByOpenID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaLevelInOpenLevelByOpenID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSecretTypeByBookID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSecretTypeByBookID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetQQGirlsCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetQQGirlsCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetFabaoIdByCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetFabaoIdByCharType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_showWebWindowBuyItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::showWebWindowBuyItem, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_showWebWindowYellowVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::showWebWindowYellowVip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_showWebWindowBlueVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::showWebWindowBlueVip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetYunyingPlatform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetYunyingPlatform, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetYunyingPlatformPage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetYunyingPlatformPage, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetYunyingTxSubPlatform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetYunyingTxSubPlatform, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBaseLevelExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBaseLevelExp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPlayerMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPlayerMaxLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetFashionSuitCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetFashionSuitCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllSkillBooks(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllSkillBooks, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEverySkillBooks(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEverySkillBooks, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookNodeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookNodeInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapIDByStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapIDByStoryID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTestDataBaseByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTestDataBaseByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookAttribs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookAttribs, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookAttribsByNodeLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookAttribsByNodeLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookItemChangeAttribs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookItemChangeAttribs, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckSkillBookUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckSkillBookUpgrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillBookGridInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillBookGridInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaInitAttribInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaInitAttribInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaTransformAttribInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaTransformAttribInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCimeliaTransformElementAttribInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCimeliaTransformElementAttribInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCategorySkills(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCategorySkills, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ClickOnScreen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ClickOnScreen, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlayVipLevelupFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayVipLevelupFx, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlayVipNewLevelupFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayVipNewLevelupFx, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlayArenaTimerFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayArenaTimerFx, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PlaySkyArenaTimerFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlaySkyArenaTimerFx, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemAttributeString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemAttributeString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCompositionFormulaInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCompositionFormulaInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDecompositionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDecompositionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetArenaRankReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetArenaRankReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemCompositionFuncIDByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemCompositionFuncIDByType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemDeCompositionFuncIDByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemDeCompositionFuncIDByType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetEquipUpgradeCompositionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEquipUpgradeCompositionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNxtEquipUpgradeItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNxtEquipUpgradeItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHookStatePosY(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHookStatePosY, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetInt32tBy2Int16tUnion(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetInt32tBy2Int16tUnion, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ResetItemCompositionTargetInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ResetItemCompositionTargetInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_SetItemCompositionTargetInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetItemCompositionTargetInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetItemCompositionTargetInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemCompositionTargetInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAuctionSellPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAuctionSellPrice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapIndexByResIDAndLogicID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapIndexByResIDAndLogicID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsMapIsNewBeeMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsMapIsNewBeeMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUniqueID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUniqueID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsAllianceMap(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsAllianceMap, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDaysInterval(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDaysInterval, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetServerOpenTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetServerOpenTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsInSelfServer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsInSelfServer, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckVipPrivilege(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckVipPrivilege, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivilegeIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivilegeIcon, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivilegeDespTips(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivilegeDespTips, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipPrivilegeDespTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipPrivilegeDespTitle, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetShopIDShopType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetShopIDShopType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetForceBattleMapIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetForceBattleMapIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_DecodePlatformVipInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::DecodePlatformVipInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetProcessName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetProcessName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_LuaShellExecute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::LuaShellExecute, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_CheckLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckLocation, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameServerInfoIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameServerInfoIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActivityRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActivityRewardInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActivityRewardInfoWithChoice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActivityRewardInfoWithChoice, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMultiSelectGiftChoices(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMultiSelectGiftChoices, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMultiSelectGiftChoicesCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMultiSelectGiftChoicesCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameStoryBossInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameStoryBossInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetServerUnionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetServerUnionID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_SetLockLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::SetLockLevel, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_LockLockedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::LockLockedLevel, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetPeakArenaLevelByScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPeakArenaLevelByScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPeakArenaSectionScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPeakArenaSectionScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPeakLevelAttr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPeakLevelAttr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPercentAttrCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPercentAttrCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetStringMd5(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetStringMd5, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBoneSoulSkillIconAndTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBoneSoulSkillIconAndTip, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBoneSoulCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBoneSoulCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsItemMelt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsItemMelt, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDateTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDateTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CanStarsRune(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CanStarsRune, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetStarsRuneCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetStarsRuneCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChessMatrixActiveScheduleID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChessMatrixActiveScheduleID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ScriptActionExecute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ScriptActionExecute, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_FindAndFileterForbiddenText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::FindAndFileterForbiddenText, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_ShowGameUIByKeyName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowGameUIByKeyName, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_ShowGameUIByKeyNameAndPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::ShowGameUIByKeyNameAndPath, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_DestroyGameUI(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::DestroyGameUI, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_IsBoss(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsBoss, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBackPackEmptyEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBackPackEmptyEntry, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyInfoList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyInfoList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyUpgradeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyUpgradeInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyTalent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyTalent, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddySpareItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddySpareItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyMaxLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyAttributeShow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyAttributeShow, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyGridUnlockLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyGridUnlockLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CheckUseItemOpenSkillBook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CheckUseItemOpenSkillBook, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCoreInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCoreInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCoreGoalInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCoreGoalInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCoreAttribs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCoreAttribs, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderTitleAttribs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderTitleAttribs, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderTitleName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderTitleName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsCommanderTitleCanShow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsCommanderTitleCanShow, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetStigmasUnlockInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetStigmasUnlockInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDrawCardRewardDisplay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDrawCardRewardDisplay, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetItemEffectValueStr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetItemEffectValueStr, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetActiveSkillItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetActiveSkillItemID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyChainOpenInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyChainOpenInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildLevelRewards(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildLevelRewards, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_PlayFailTaskUeFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayFailTaskUeFx, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_PlayTaskChapterOpenFx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::PlayTaskChapterOpenFx, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetEntrustTaskStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetEntrustTaskStarLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLevelUpRuneCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLevelUpRuneCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneCommanderLevelLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneCommanderLevelLimit, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetIsRuneSkillUp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetIsRuneSkillUp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneCollectionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneCollectionInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneAttributes, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneStarInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneStarInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneEquipNxtLevelOfAffiliatedSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneEquipNxtLevelOfAffiliatedSkill, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneEquipSkillIDByItemIDAndItemLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneEquipSkillIDByItemIDAndItemLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneMaxLevelInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneMaxLevelInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyShowTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyShowTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharShowRewards(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharShowRewards, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRaidGloryChapterNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRaidGloryChapterNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVipNewMaxNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVipNewMaxNum, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBestGuildItemLinkID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBestGuildItemLinkID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeActivityTaskTabNames(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeActivityTaskTabNames, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeActivityTaskScheduleId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeActivityTaskScheduleId, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRuneEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRuneEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyLevelUpCombatScoreBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyLevelUpCombatScoreBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyOriginalCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyOriginalCombatScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyStarUpCombatScoreBonus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyStarUpCombatScoreBonus, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCustomCommandList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCustomCommandList, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDebugMaterialListInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDebugMaterialListInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_CalculateBeBetterMaxScores(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::CalculateBeBetterMaxScores, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientSkillInterface_GetAllHeroLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllHeroLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllHeroStarMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllHeroStarMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllHeroSkillMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllHeroSkillMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllHeroCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllHeroCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedHeroLevelScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedHeroLevelScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedHeroStarScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedHeroStarScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedHeroSkillScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedHeroSkillScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedHeroCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedHeroCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllRuneLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllRuneLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllRuneStarMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllRuneStarMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllRuneCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllRuneCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedRuneLevelScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedRuneLevelScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedRuneStarScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedRuneStarScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedRuneCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedRuneCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllEquipMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllEquipMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllEquipLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllEquipLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllEquipStarMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllEquipStarMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedEquipLevelScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedEquipLevelScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedEquipStarScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedEquipStarScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllToyPetMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllToyPetMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAllToyPetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAllToyPetCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedToyPetScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedToyPetScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedToyPetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedToyPetCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleAttrLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleAttrLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleSkinMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleSkinMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleEquipMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleEquipMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetVehicleDrugMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetVehicleDrugMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedVehicleAttrScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedVehicleAttrScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedVehicleSkinScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedVehicleSkinScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedVehicleEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedVehicleEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedVehicleDrugScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedVehicleDrugScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWingAttrLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWingAttrLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWingSkinMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWingSkinMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWingEquipMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWingEquipMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWingDrugMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWingDrugMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedWingAttrScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedWingAttrScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedWingSkinScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedWingSkinScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedWingEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedWingEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedWingDrugScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedWingDrugScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDevaEyeAttrLevelMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDevaEyeAttrLevelMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDevaEyeSkinMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDevaEyeSkinMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDevaEyeEquipMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDevaEyeEquipMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDevaEyeDrugMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDevaEyeDrugMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedDevaEyeAttrScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedDevaEyeAttrScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedDevaEyeSkinScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedDevaEyeSkinScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedDevaEyeEquipScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedDevaEyeEquipScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedDevaEyeDrugScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedDevaEyeDrugScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipAttrMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipAttrMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipStrengthenMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipStrengthenMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipStarMaxScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipStarMaxScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipAttrScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedCommanderEquipAttrScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipStrengthenScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedCommanderEquipStrengthenScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipStarScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOwnedCommanderEquipStarScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDELTodayEndTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDELTodayEndTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsTimestampEndToday(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsTimestampEndToday, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDeltaDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDeltaDay, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSevendaysDetailCidByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSevendaysDetailCidByIndex, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMapLeaveCountDown(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMapLeaveCountDown, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTreasureAddAward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTreasureAddAward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetWeekDayByTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetWeekDayByTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkillDirection(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkillDirection, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBattleTaskOpenSchedule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBattleTaskOpenSchedule, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBestGuildRankStageInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBestGuildRankStageInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBestGuildGoalCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBestGuildGoalCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSevendaysRewardEndTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSevendaysRewardEndTime, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetToyIsLandBossLink(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetToyIsLandBossLink, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetExpAccessWayInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetExpAccessWayInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCurrentProcessId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCurrentProcessId, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGloryRewardLinkInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGloryRewardLinkInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCommanderEquipSuitCollectInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCommanderEquipSuitCollectInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetResourceRetrieveInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetResourceRetrieveInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRatioByLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRatioByLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAchievementTypeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAchievementTypeInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyTransformInfoByCid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyTransformInfoByCid, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyTransformName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyTransformName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyTransformGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyTransformGrade, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuddyTransformBuddyId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuddyTransformBuddyId, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAchievementBigType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAchievementBigType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetAchievementSmallTypeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetAchievementSmallTypeName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTreasureItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTreasureItemInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetBuyRareSubInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetBuyRareSubInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMustBuyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMustBuyInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildBossRankReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildBossRankReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRestraintJob(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRestraintJob, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildProfitMaxExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildProfitMaxExp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCrystalQuality(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCrystalQuality, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildCrystalMaxExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildCrystalMaxExp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuildProfitMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuildProfitMaxLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsScheduleValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsScheduleValid, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeMainActivityInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeMainActivityInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeSubActivityInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeSubActivityInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetACTShopAInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetACTShopAInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeActivityRaidBossRankRwd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeActivityRaidBossRankRwd, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeRaidBossType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeRaidBossType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetThemeRaidBossTypeSchedule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetThemeRaidBossTypeSchedule, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGameDir(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGameDir, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetOpenTimeByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetOpenTimeByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetUnLockTimeByID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetUnLockTimeByID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChargeRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChargeRate, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetChargeProfitCashType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetChargeProfitCashType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTimeStrByTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTimeStrByTimeStamp, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRobotScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRobotScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRobotHead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRobotHead, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRobotLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRobotLevel, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetRobotName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetRobotName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetMailText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetMailText, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetDecodeScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetDecodeScore, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSubCharString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSubCharString, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetCharCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetCharCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetTutorialRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetTutorialRewardInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkyArenaRankRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkyArenaRankRewardInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSkyArenaRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSkyArenaRankInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSpecialTaskInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSpecialTaskInfo, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuessCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuessCost, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetGuessProfit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetGuessProfit, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSummitArenaMatchName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSummitArenaMatchName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetSummitArenaRankReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetSummitArenaRankReward, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_IsSoloduleRobotPlayerId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::IsSoloduleRobotPlayerId, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetHight32(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetHight32, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetLow32(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetLow32, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetPreStoryId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetPreStoryId, L, 2);
		return 1;
	}
	static int bnd_SC_ClientSkillInterface_GetNextStoryTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientSkillInterface* pkAPI = (SC_ClientSkillInterface*)binder.CheckUserType(1, "SC_ClientSkillInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientSkillInterface::GetNextStoryTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_SC_ClientSkillInterface[] = {
	{"Create", bnd_LuaCreate_SC_ClientSkillInterface},
	{"ResetDownloadInfo", bnd_SC_ClientSkillInterface_ResetDownloadInfo},
	{"GetDownloadInfo", bnd_SC_ClientSkillInterface_GetDownloadInfo},
	{"GetDownloadPercent", bnd_SC_ClientSkillInterface_GetDownloadPercent},
	{"GetGameTime", bnd_SC_ClientSkillInterface_GetGameTime},
	{"GetGameDeltaTime", bnd_SC_ClientSkillInterface_GetGameDeltaTime},
	{"GetProfileTimeStamp", bnd_SC_ClientSkillInterface_GetProfileTimeStamp},
	{"GetCalendarToday", bnd_SC_ClientSkillInterface_GetCalendarToday},
	{"GetTimeStamp", bnd_SC_ClientSkillInterface_GetTimeStamp},
	{"GetTimeString", bnd_SC_ClientSkillInterface_GetTimeString},
	{"GetAchievementInfo", bnd_SC_ClientSkillInterface_GetAchievementInfo},
	{"GetActTimeShopInfoByID", bnd_SC_ClientSkillInterface_GetActTimeShopInfoByID},
	{"GetGameStoryRaidRewardByMapresID", bnd_SC_ClientSkillInterface_GetGameStoryRaidRewardByMapresID},
	{"GetLoginType", bnd_SC_ClientSkillInterface_GetLoginType},
	{"GetGameStage", bnd_SC_ClientSkillInterface_GetGameStage},
	{"RaidMapCanPk", bnd_SC_ClientSkillInterface_RaidMapCanPk},
	{"GetPlayerPtr", bnd_SC_ClientSkillInterface_GetPlayerPtr},
	{"GetNetPlayerPtr", bnd_SC_ClientSkillInterface_GetNetPlayerPtr},
	{"GetNetPlayerPtrByPlayerID", bnd_SC_ClientSkillInterface_GetNetPlayerPtrByPlayerID},
	{"GetNetPlayerCount", bnd_SC_ClientSkillInterface_GetNetPlayerCount},
	{"GetNetPlayerByIndex", bnd_SC_ClientSkillInterface_GetNetPlayerByIndex},
	{"GetNPCCount", bnd_SC_ClientSkillInterface_GetNPCCount},
	{"GetNPCByIndex", bnd_SC_ClientSkillInterface_GetNPCByIndex},
	{"GetNPCPtr", bnd_SC_ClientSkillInterface_GetNPCPtr},
	{"GetChestPtr", bnd_SC_ClientSkillInterface_GetChestPtr},
	{"GetNPCHeadIcon", bnd_SC_ClientSkillInterface_GetNPCHeadIcon},
	{"GetNeighborPlayerCount", bnd_SC_ClientSkillInterface_GetNeighborPlayerCount},
	{"GetTrueNeighborPlayerCount", bnd_SC_ClientSkillInterface_GetTrueNeighborPlayerCount},
	{"GetNeighborPlayerPtrByIndex", bnd_SC_ClientSkillInterface_GetNeighborPlayerPtrByIndex},
	{"FindNPCPtrInCircleByCharType", bnd_SC_ClientSkillInterface_FindNPCPtrInCircleByCharType},
	{"GetWatchedTargetID", bnd_SC_ClientSkillInterface_GetWatchedTargetID},
	{"GetPreLockedTargetID", bnd_SC_ClientSkillInterface_GetPreLockedTargetID},
	{"SetLockedTargetID", bnd_SC_ClientSkillInterface_SetLockedTargetID},
	{"FreezeLockTargetID", bnd_SC_ClientSkillInterface_FreezeLockTargetID},
	{"IsFreezeLockTargetID", bnd_SC_ClientSkillInterface_IsFreezeLockTargetID},
	{"GetSubordinateAttriLevel", bnd_SC_ClientSkillInterface_GetSubordinateAttriLevel},
	{"CleanChangeLockedFlag", bnd_SC_ClientSkillInterface_CleanChangeLockedFlag},
	{"GetCharShowRank", bnd_SC_ClientSkillInterface_GetCharShowRank},
	{"GetElementDamageType", bnd_SC_ClientSkillInterface_GetElementDamageType},
	{"GetIsWildBoss", bnd_SC_ClientSkillInterface_GetIsWildBoss},
	{"GetLevelExp", bnd_SC_ClientSkillInterface_GetLevelExp},
	{"GetBuddyLevelExp", bnd_SC_ClientSkillInterface_GetBuddyLevelExp},
	{"GetChangeServerCash", bnd_SC_ClientSkillInterface_GetChangeServerCash},
	{"GetAttributeBase", bnd_SC_ClientSkillInterface_GetAttributeBase},
	{"GetToyPetCharTypeBycID", bnd_SC_ClientSkillInterface_GetToyPetCharTypeBycID},
	{"GetToyPetInfoByCID", bnd_SC_ClientSkillInterface_GetToyPetInfoByCID},
	{"GetShopCityGroupInfo", bnd_SC_ClientSkillInterface_GetShopCityGroupInfo},
	{"GetAttributeRateBase", bnd_SC_ClientSkillInterface_GetAttributeRateBase},
	{"GetAttributeRate", bnd_SC_ClientSkillInterface_GetAttributeRate},
	{"GetAttributeRateUpgrade", bnd_SC_ClientSkillInterface_GetAttributeRateUpgrade},
	{"GetNetAttributeRate", bnd_SC_ClientSkillInterface_GetNetAttributeRate},
	{"GetNetAttributeRateUpgrade", bnd_SC_ClientSkillInterface_GetNetAttributeRateUpgrade},
	{"GetShortcutBarPtr", bnd_SC_ClientSkillInterface_GetShortcutBarPtr},
	{"GetNPCShopPtr", bnd_SC_ClientSkillInterface_GetNPCShopPtr},
	{"GetNPCTransferPtr", bnd_SC_ClientSkillInterface_GetNPCTransferPtr},
	{"GetDakTransferAreaNum", bnd_SC_ClientSkillInterface_GetDakTransferAreaNum},
	{"GetTransferMapID", bnd_SC_ClientSkillInterface_GetTransferMapID},
	{"GetTransferAreaID", bnd_SC_ClientSkillInterface_GetTransferAreaID},
	{"GetSkillCoolDownMap", bnd_SC_ClientSkillInterface_GetSkillCoolDownMap},
	{"GetItemCoolDownMap", bnd_SC_ClientSkillInterface_GetItemCoolDownMap},
	{"OnGotoUserLogin", bnd_SC_ClientSkillInterface_OnGotoUserLogin},
	{"OnQuitLogin", bnd_SC_ClientSkillInterface_OnQuitLogin},
	{"OnGotoUrl", bnd_SC_ClientSkillInterface_OnGotoUrl},
	{"OnshowWebWindow", bnd_SC_ClientSkillInterface_OnshowWebWindow},
	{"ShowShunWangWebWindow", bnd_SC_ClientSkillInterface_ShowShunWangWebWindow},
	{"OnHideWebWindow", bnd_SC_ClientSkillInterface_OnHideWebWindow},
	{"OnResetWebWindow", bnd_SC_ClientSkillInterface_OnResetWebWindow},
	{"ScriptJzCmdlineHasValue", bnd_SC_ClientSkillInterface_ScriptJzCmdlineHasValue},
	{"ScriptJzCmdlineGetValue", bnd_SC_ClientSkillInterface_ScriptJzCmdlineGetValue},
	{"GetLastLoginServerID", bnd_SC_ClientSkillInterface_GetLastLoginServerID},
	{"SaveLastLoginServerID", bnd_SC_ClientSkillInterface_SaveLastLoginServerID},
	{"GetLastLoginCharID", bnd_SC_ClientSkillInterface_GetLastLoginCharID},
	{"SaveLastLoginCharID", bnd_SC_ClientSkillInterface_SaveLastLoginCharID},
	{"OnCheckForceLogin", bnd_SC_ClientSkillInterface_OnCheckForceLogin},
	{"OnUserLogin", bnd_SC_ClientSkillInterface_OnUserLogin},
	{"SelectLoginZone", bnd_SC_ClientSkillInterface_SelectLoginZone},
	{"OnGotoSelChar", bnd_SC_ClientSkillInterface_OnGotoSelChar},
	{"OnGotoCreateChar", bnd_SC_ClientSkillInterface_OnGotoCreateChar},
	{"OnGotoSelServer", bnd_SC_ClientSkillInterface_OnGotoSelServer},
	{"OnEnterGame", bnd_SC_ClientSkillInterface_OnEnterGame},
	{"PlayVideo", bnd_SC_ClientSkillInterface_PlayVideo},
	{"EndVideo", bnd_SC_ClientSkillInterface_EndVideo},
	{"GetCreateCharServerID", bnd_SC_ClientSkillInterface_GetCreateCharServerID},
	{"OnCreateChar", bnd_SC_ClientSkillInterface_OnCreateChar},
	{"OnLoadingToGameStage", bnd_SC_ClientSkillInterface_OnLoadingToGameStage},
	{"GetPreStateType", bnd_SC_ClientSkillInterface_GetPreStateType},
	{"GetNamePwdFromConfig", bnd_SC_ClientSkillInterface_GetNamePwdFromConfig},
	{"GetLoginServerIDList", bnd_SC_ClientSkillInterface_GetLoginServerIDList},
	{"GetLoginZoneIDList", bnd_SC_ClientSkillInterface_GetLoginZoneIDList},
	{"GetLoginServerInfo", bnd_SC_ClientSkillInterface_GetLoginServerInfo},
	{"GetLoginZoneInfo", bnd_SC_ClientSkillInterface_GetLoginZoneInfo},
	{"GetGameServerCount", bnd_SC_ClientSkillInterface_GetGameServerCount},
	{"GetGameServerList", bnd_SC_ClientSkillInterface_GetGameServerList},
	{"GetGameServerInfo", bnd_SC_ClientSkillInterface_GetGameServerInfo},
	{"GetGameServerName", bnd_SC_ClientSkillInterface_GetGameServerName},
	{"GetCurGameServer", bnd_SC_ClientSkillInterface_GetCurGameServer},
	{"GetCurGameServerNode", bnd_SC_ClientSkillInterface_GetCurGameServerNode},
	{"GetUserCharCount", bnd_SC_ClientSkillInterface_GetUserCharCount},
	{"GetCurCharList", bnd_SC_ClientSkillInterface_GetCurCharList},
	{"GetCharInfo", bnd_SC_ClientSkillInterface_GetCharInfo},
	{"GetParamForCreateChar", bnd_SC_ClientSkillInterface_GetParamForCreateChar},
	{"RotateChar", bnd_SC_ClientSkillInterface_RotateChar},
	{"RotateActorAndVehiclePreview", bnd_SC_ClientSkillInterface_RotateActorAndVehiclePreview},
	{"DeteachAllAttachFxAnim", bnd_SC_ClientSkillInterface_DeteachAllAttachFxAnim},
	{"RotateAvatarModel", bnd_SC_ClientSkillInterface_RotateAvatarModel},
	{"SetShaderConstF", bnd_SC_ClientSkillInterface_SetShaderConstF},
	{"GetShaderConstF", bnd_SC_ClientSkillInterface_GetShaderConstF},
	{"UpdateAvatarBloomParams", bnd_SC_ClientSkillInterface_UpdateAvatarBloomParams},
	{"SetModelRotation", bnd_SC_ClientSkillInterface_SetModelRotation},
	{"SendReqServerListMsg", bnd_SC_ClientSkillInterface_SendReqServerListMsg},
	{"WorldMapLoaded", bnd_SC_ClientSkillInterface_WorldMapLoaded},
	{"ConfirmAction", bnd_SC_ClientSkillInterface_ConfirmAction},
	{"StartCountDown", bnd_SC_ClientSkillInterface_StartCountDown},
	{"CancleCountDown", bnd_SC_ClientSkillInterface_CancleCountDown},
	{"RequestLeaveGame", bnd_SC_ClientSkillInterface_RequestLeaveGame},
	{"RequestResetGame", bnd_SC_ClientSkillInterface_RequestResetGame},
	{"RequestReLoginGame", bnd_SC_ClientSkillInterface_RequestReLoginGame},
	{"OnLowScoreConfirm", bnd_SC_ClientSkillInterface_OnLowScoreConfirm},
	{"ResetUINameArrage", bnd_SC_ClientSkillInterface_ResetUINameArrage},
	{"GetGameNetState", bnd_SC_ClientSkillInterface_GetGameNetState},
	{"GetCurrentDayTime", bnd_SC_ClientSkillInterface_GetCurrentDayTime},
	{"GetActivityScheduleDeltaTimeStamp", bnd_SC_ClientSkillInterface_GetActivityScheduleDeltaTimeStamp},
	{"GetActivityScheduleStat", bnd_SC_ClientSkillInterface_GetActivityScheduleStat},
	{"RequestRespawnOnCurrentLocation", bnd_SC_ClientSkillInterface_RequestRespawnOnCurrentLocation},
	{"RequestRespawnOnSafeLocation", bnd_SC_ClientSkillInterface_RequestRespawnOnSafeLocation},
	{"RequestRespawnByItem", bnd_SC_ClientSkillInterface_RequestRespawnByItem},
	{"CheckCanRespawnByItem", bnd_SC_ClientSkillInterface_CheckCanRespawnByItem},
	{"CanRespawnOnSafe", bnd_SC_ClientSkillInterface_CanRespawnOnSafe},
	{"GetEnterMapItemInfo", bnd_SC_ClientSkillInterface_GetEnterMapItemInfo},
	{"GetRespawnProtectTime", bnd_SC_ClientSkillInterface_GetRespawnProtectTime},
	{"GetNpcConversationHeadIcon", bnd_SC_ClientSkillInterface_GetNpcConversationHeadIcon},
	{"GetLogicAreaName", bnd_SC_ClientSkillInterface_GetLogicAreaName},
	{"GetLogicAreaSpawnPos", bnd_SC_ClientSkillInterface_GetLogicAreaSpawnPos},
	{"ChangeLockedTarget", bnd_SC_ClientSkillInterface_ChangeLockedTarget},
	{"GetSkillUpGradeNeedCash", bnd_SC_ClientSkillInterface_GetSkillUpGradeNeedCash},
	{"GetSkillUpgradeNeedBuddyStar", bnd_SC_ClientSkillInterface_GetSkillUpgradeNeedBuddyStar},
	{"GetSkillCanUpGrade", bnd_SC_ClientSkillInterface_GetSkillCanUpGrade},
	{"GetSkillCanWakeUp", bnd_SC_ClientSkillInterface_GetSkillCanWakeUp},
	{"RobotRequestRespawnOnCurrentLocation", bnd_SC_ClientSkillInterface_RobotRequestRespawnOnCurrentLocation},
	{"GetNPCLevelTypeByCharType", bnd_SC_ClientSkillInterface_GetNPCLevelTypeByCharType},
	{"GetNPCLevelType", bnd_SC_ClientSkillInterface_GetNPCLevelType},
	{"GetNPCEliteType", bnd_SC_ClientSkillInterface_GetNPCEliteType},
	{"Change2NextPos", bnd_SC_ClientSkillInterface_Change2NextPos},
	{"CheckCanUseItem", bnd_SC_ClientSkillInterface_CheckCanUseItem},
	{"IsEquipReinStar", bnd_SC_ClientSkillInterface_IsEquipReinStar},
	{"GetPlayerLocation", bnd_SC_ClientSkillInterface_GetPlayerLocation},
	{"GetLinkInfoIDByLogicID", bnd_SC_ClientSkillInterface_GetLinkInfoIDByLogicID},
	{"GetLinkInfoID", bnd_SC_ClientSkillInterface_GetLinkInfoID},
	{"GetLinkType", bnd_SC_ClientSkillInterface_GetLinkType},
	{"GetLinkObjectTypeID", bnd_SC_ClientSkillInterface_GetLinkObjectTypeID},
	{"GetLinkMapResID", bnd_SC_ClientSkillInterface_GetLinkMapResID},
	{"IsSameMapGroup", bnd_SC_ClientSkillInterface_IsSameMapGroup},
	{"IsTravelBoots", bnd_SC_ClientSkillInterface_IsTravelBoots},
	{"IsNoGainJudge", bnd_SC_ClientSkillInterface_IsNoGainJudge},
	{"GetTransferPosition", bnd_SC_ClientSkillInterface_GetTransferPosition},
	{"GetLinkKeyWord", bnd_SC_ClientSkillInterface_GetLinkKeyWord},
	{"GetLinkLevelInfo", bnd_SC_ClientSkillInterface_GetLinkLevelInfo},
	{"GetLinkPosition", bnd_SC_ClientSkillInterface_GetLinkPosition},
	{"GetLocationTip", bnd_SC_ClientSkillInterface_GetLocationTip},
	{"PathToObject", bnd_SC_ClientSkillInterface_PathToObject},
	{"PathToLocation", bnd_SC_ClientSkillInterface_PathToLocation},
	{"WalkToObject", bnd_SC_ClientSkillInterface_WalkToObject},
	{"WalkToLocation", bnd_SC_ClientSkillInterface_WalkToLocation},
	{"GetEnhanceLimitFuncID", bnd_SC_ClientSkillInterface_GetEnhanceLimitFuncID},
	{"GetGetSpecialTrainingCount", bnd_SC_ClientSkillInterface_GetGetSpecialTrainingCount},
	{"GetEnhanceNeedMaterialID", bnd_SC_ClientSkillInterface_GetEnhanceNeedMaterialID},
	{"GetEnhanceNeedMaterialNum", bnd_SC_ClientSkillInterface_GetEnhanceNeedMaterialNum},
	{"GetItemEnhanceLevel", bnd_SC_ClientSkillInterface_GetItemEnhanceLevel},
	{"GetItemEnhanceLevelLimit", bnd_SC_ClientSkillInterface_GetItemEnhanceLevelLimit},
	{"GetEnhanceNeedRuneNum", bnd_SC_ClientSkillInterface_GetEnhanceNeedRuneNum},
	{"StartIdentifySkill", bnd_SC_ClientSkillInterface_StartIdentifySkill},
	{"GetTaskPtr", bnd_SC_ClientSkillInterface_GetTaskPtr},
	{"GetTaskBuddyExpBonus", bnd_SC_ClientSkillInterface_GetTaskBuddyExpBonus},
	{"GetTaskCommanderExpBonus", bnd_SC_ClientSkillInterface_GetTaskCommanderExpBonus},
	{"GetTaskGoldBonus", bnd_SC_ClientSkillInterface_GetTaskGoldBonus},
	{"GetTaskGuildPointBonus", bnd_SC_ClientSkillInterface_GetTaskGuildPointBonus},
	{"GetNPCID", bnd_SC_ClientSkillInterface_GetNPCID},
	{"GetNPCName", bnd_SC_ClientSkillInterface_GetNPCName},
	{"GetNPCNameColor", bnd_SC_ClientSkillInterface_GetNPCNameColor},
	{"GetNPCMaxHp", bnd_SC_ClientSkillInterface_GetNPCMaxHp},
	{"GetNPClElite", bnd_SC_ClientSkillInterface_GetNPClElite},
	{"GetProductionTypeName", bnd_SC_ClientSkillInterface_GetProductionTypeName},
	{"GetProductionInfo", bnd_SC_ClientSkillInterface_GetProductionInfo},
	{"GetItemEnhanceFuncDescript", bnd_SC_ClientSkillInterface_GetItemEnhanceFuncDescript},
	{"IsEnhanceRune", bnd_SC_ClientSkillInterface_IsEnhanceRune},
	{"CheckNeedUnBindCashDialog", bnd_SC_ClientSkillInterface_CheckNeedUnBindCashDialog},
	{"GetEnhanceEquipLevelProperty", bnd_SC_ClientSkillInterface_GetEnhanceEquipLevelProperty},
	{"GetEnhanceEquipCost", bnd_SC_ClientSkillInterface_GetEnhanceEquipCost},
	{"GetEnhanceEquipNeedLevel", bnd_SC_ClientSkillInterface_GetEnhanceEquipNeedLevel},
	{"GetEnhanceEquipNeedEquipLevel", bnd_SC_ClientSkillInterface_GetEnhanceEquipNeedEquipLevel},
	{"GetEquipSlotMaxLevel", bnd_SC_ClientSkillInterface_GetEquipSlotMaxLevel},
	{"GetEquipSlotScore", bnd_SC_ClientSkillInterface_GetEquipSlotScore},
	{"GetCommanderReinforceEquipProperty", bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipProperty},
	{"GetCommanderReinforceEquipCost", bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipCost},
	{"GetCommanderReinforceEquipNeedLevel", bnd_SC_ClientSkillInterface_GetCommanderReinforceEquipNeedLevel},
	{"GetCommanderEquipSlotMaxLevel", bnd_SC_ClientSkillInterface_GetCommanderEquipSlotMaxLevel},
	{"GetCommanderRefineEquipInfo", bnd_SC_ClientSkillInterface_GetCommanderRefineEquipInfo},
	{"GetCommanderRefineEquipCostInfo", bnd_SC_ClientSkillInterface_GetCommanderRefineEquipCostInfo},
	{"GetReinforceSuitInfo", bnd_SC_ClientSkillInterface_GetReinforceSuitInfo},
	{"GetRefineSuitInfo", bnd_SC_ClientSkillInterface_GetRefineSuitInfo},
	{"GetCommanderModingSpiritEquipCostInfo", bnd_SC_ClientSkillInterface_GetCommanderModingSpiritEquipCostInfo},
	{"GetModingSpiritSuitInfo", bnd_SC_ClientSkillInterface_GetModingSpiritSuitInfo},
	{"GetCommanderEquipScore", bnd_SC_ClientSkillInterface_GetCommanderEquipScore},
	{"GetMaxValidLevelInVIPProfit", bnd_SC_ClientSkillInterface_GetMaxValidLevelInVIPProfit},
	{"GetItemNonpareilEffect", bnd_SC_ClientSkillInterface_GetItemNonpareilEffect},
	{"GetItemNonpareilEffectBase", bnd_SC_ClientSkillInterface_GetItemNonpareilEffectBase},
	{"GetGuildBattleBossRankReward", bnd_SC_ClientSkillInterface_GetGuildBattleBossRankReward},
	{"GetGuildBattleBossBaseReward", bnd_SC_ClientSkillInterface_GetGuildBattleBossBaseReward},
	{"GetGuildBattleTowerBuff", bnd_SC_ClientSkillInterface_GetGuildBattleTowerBuff},
	{"GetGuildBattleTowerIntegralAdd", bnd_SC_ClientSkillInterface_GetGuildBattleTowerIntegralAdd},
	{"GetGuildBattleTowerVipBonusPercent", bnd_SC_ClientSkillInterface_GetGuildBattleTowerVipBonusPercent},
	{"GetGuildBattleBossInfoByType", bnd_SC_ClientSkillInterface_GetGuildBattleBossInfoByType},
	{"GetGuildBattleBossInfoByCharType", bnd_SC_ClientSkillInterface_GetGuildBattleBossInfoByCharType},
	{"GetGuildBattleRobRewardInfo", bnd_SC_ClientSkillInterface_GetGuildBattleRobRewardInfo},
	{"GetBreakEquipLevelProperty", bnd_SC_ClientSkillInterface_GetBreakEquipLevelProperty},
	{"GetBreakEquipPropertySpecialChange", bnd_SC_ClientSkillInterface_GetBreakEquipPropertySpecialChange},
	{"GetBreakEquipProperty", bnd_SC_ClientSkillInterface_GetBreakEquipProperty},
	{"GetBreakEquipDescription", bnd_SC_ClientSkillInterface_GetBreakEquipDescription},
	{"GetItemBaseAttributes", bnd_SC_ClientSkillInterface_GetItemBaseAttributes},
	{"GetItemName", bnd_SC_ClientSkillInterface_GetItemName},
	{"GetCurLevelMaxMastery", bnd_SC_ClientSkillInterface_GetCurLevelMaxMastery},
	{"GetProductionNeedLevel", bnd_SC_ClientSkillInterface_GetProductionNeedLevel},
	{"GetCanProductionNum", bnd_SC_ClientSkillInterface_GetCanProductionNum},
	{"GetMadeItemGrade", bnd_SC_ClientSkillInterface_GetMadeItemGrade},
	{"AddCanLearnFormulaEntry", bnd_SC_ClientSkillInterface_AddCanLearnFormulaEntry},
	{"RequestInterruptProduction", bnd_SC_ClientSkillInterface_RequestInterruptProduction},
	{"StartProduceSkill", bnd_SC_ClientSkillInterface_StartProduceSkill},
	{"LearnProduction", bnd_SC_ClientSkillInterface_LearnProduction},
	{"ForgetProduction", bnd_SC_ClientSkillInterface_ForgetProduction},
	{"UpgradeProduction", bnd_SC_ClientSkillInterface_UpgradeProduction},
	{"LearnBaseFormula", bnd_SC_ClientSkillInterface_LearnBaseFormula},
	{"IsLearnedProduction", bnd_SC_ClientSkillInterface_IsLearnedProduction},
	{"SetBitVec", bnd_SC_ClientSkillInterface_SetBitVec},
	{"IsEquipID", bnd_SC_ClientSkillInterface_IsEquipID},
	{"IsQinggongSkillID", bnd_SC_ClientSkillInterface_IsQinggongSkillID},
	{"IsMedicineID", bnd_SC_ClientSkillInterface_IsMedicineID},
	{"IsGemID", bnd_SC_ClientSkillInterface_IsGemID},
	{"IsCanEnChantItem", bnd_SC_ClientSkillInterface_IsCanEnChantItem},
	{"IsNpc", bnd_SC_ClientSkillInterface_IsNpc},
	{"IsSkillBookID", bnd_SC_ClientSkillInterface_IsSkillBookID},
	{"TriggerNPCFunc", bnd_SC_ClientSkillInterface_TriggerNPCFunc},
	{"IsCanLevelUp", bnd_SC_ClientSkillInterface_IsCanLevelUp},
	{"InsertNPCFuncEvent", bnd_SC_ClientSkillInterface_InsertNPCFuncEvent},
	{"StampASpecialBubble", bnd_SC_ClientSkillInterface_StampASpecialBubble},
	{"UpdateUIScreenPosByLogicObject", bnd_SC_ClientSkillInterface_UpdateUIScreenPosByLogicObject},
	{"GetLogicIDByCharType", bnd_SC_ClientSkillInterface_GetLogicIDByCharType},
	{"CanGetTaskItem", bnd_SC_ClientSkillInterface_CanGetTaskItem},
	{"IsTaskInCurrentArea", bnd_SC_ClientSkillInterface_IsTaskInCurrentArea},
	{"GetItemEquipLimit", bnd_SC_ClientSkillInterface_GetItemEquipLimit},
	{"SwitchShieldVisibility", bnd_SC_ClientSkillInterface_SwitchShieldVisibility},
	{"GetItemID", bnd_SC_ClientSkillInterface_GetItemID},
	{"GetItemCategoryID", bnd_SC_ClientSkillInterface_GetItemCategoryID},
	{"IsIMEOpen", bnd_SC_ClientSkillInterface_IsIMEOpen},
	{"ConfirmSendMail", bnd_SC_ClientSkillInterface_ConfirmSendMail},
	{"ConfirmExitGuild", bnd_SC_ClientSkillInterface_ConfirmExitGuild},
	{"ConfirmDismissGuild", bnd_SC_ClientSkillInterface_ConfirmDismissGuild},
	{"UseItemInPackByIndex", bnd_SC_ClientSkillInterface_UseItemInPackByIndex},
	{"GetSkillStateCombatScoreBySkillID", bnd_SC_ClientSkillInterface_GetSkillStateCombatScoreBySkillID},
	{"GetSkillStateUseResult", bnd_SC_ClientSkillInterface_GetSkillStateUseResult},
	{"GetSevenDaysRewardInfo", bnd_SC_ClientSkillInterface_GetSevenDaysRewardInfo},
	{"GetItemUseUIOpenFuncID", bnd_SC_ClientSkillInterface_GetItemUseUIOpenFuncID},
	{"GetItembShowUseIconByItemID", bnd_SC_ClientSkillInterface_GetItembShowUseIconByItemID},
	{"GetItemPropertyFuncSkills", bnd_SC_ClientSkillInterface_GetItemPropertyFuncSkills},
	{"EquipItemInPackage", bnd_SC_ClientSkillInterface_EquipItemInPackage},
	{"PickItemInChestByIndex", bnd_SC_ClientSkillInterface_PickItemInChestByIndex},
	{"RollButtonDown", bnd_SC_ClientSkillInterface_RollButtonDown},
	{"GetActorHatredList", bnd_SC_ClientSkillInterface_GetActorHatredList},
	{"Snapshot", bnd_SC_ClientSkillInterface_Snapshot},
	{"NoticeMessage", bnd_SC_ClientSkillInterface_NoticeMessage},
	{"AddNoticeTask", bnd_SC_ClientSkillInterface_AddNoticeTask},
	{"RemoveNoticeTask", bnd_SC_ClientSkillInterface_RemoveNoticeTask},
	{"SetTargetLocation", bnd_SC_ClientSkillInterface_SetTargetLocation},
	{"GetComputerTime", bnd_SC_ClientSkillInterface_GetComputerTime},
	{"CookingDish", bnd_SC_ClientSkillInterface_CookingDish},
	{"PlaySound", bnd_SC_ClientSkillInterface_PlaySound},
	{"GetShowBloodBarType", bnd_SC_ClientSkillInterface_GetShowBloodBarType},
	{"CheckOperationValid", bnd_SC_ClientSkillInterface_CheckOperationValid},
	{"CheckOperationExecute", bnd_SC_ClientSkillInterface_CheckOperationExecute},
	{"GetItemText1CharFuncDescript", bnd_SC_ClientSkillInterface_GetItemText1CharFuncDescript},
	{"GetItemText2CharFuncDescript", bnd_SC_ClientSkillInterface_GetItemText2CharFuncDescript},
	{"GetItemText4CharFuncDescript", bnd_SC_ClientSkillInterface_GetItemText4CharFuncDescript},
	{"GetAttributeFuncDescript", bnd_SC_ClientSkillInterface_GetAttributeFuncDescript},
	{"RequstInterruptCooking", bnd_SC_ClientSkillInterface_RequstInterruptCooking},
	{"CanContinueCookDish", bnd_SC_ClientSkillInterface_CanContinueCookDish},
	{"ReqSetOperationParameter", bnd_SC_ClientSkillInterface_ReqSetOperationParameter},
	{"ReqResetOperationParameter", bnd_SC_ClientSkillInterface_ReqResetOperationParameter},
	{"GetHookItemCostID", bnd_SC_ClientSkillInterface_GetHookItemCostID},
	{"GetHookItemCostAmount", bnd_SC_ClientSkillInterface_GetHookItemCostAmount},
	{"GetHookItemCostTime", bnd_SC_ClientSkillInterface_GetHookItemCostTime},
	{"GetMapNameByMapResID", bnd_SC_ClientSkillInterface_GetMapNameByMapResID},
	{"GetMapLineCount", bnd_SC_ClientSkillInterface_GetMapLineCount},
	{"GetMapEnterConditionInfo", bnd_SC_ClientSkillInterface_GetMapEnterConditionInfo},
	{"GetMaxItemEnduranceValue", bnd_SC_ClientSkillInterface_GetMaxItemEnduranceValue},
	{"ShowUIFrame", bnd_SC_ClientSkillInterface_ShowUIFrame},
	{"ShowUIError", bnd_SC_ClientSkillInterface_ShowUIError},
	{"ShowUIErrorByCode", bnd_SC_ClientSkillInterface_ShowUIErrorByCode},
	{"ShowNoticeMessage", bnd_SC_ClientSkillInterface_ShowNoticeMessage},
	{"ShowMouseTips", bnd_SC_ClientSkillInterface_ShowMouseTips},
	{"ShowNotifyMessage", bnd_SC_ClientSkillInterface_ShowNotifyMessage},
	{"ShowNotifyMessageWithType", bnd_SC_ClientSkillInterface_ShowNotifyMessageWithType},
	{"ShowSystemTip", bnd_SC_ClientSkillInterface_ShowSystemTip},
	{"ShowAttriActive", bnd_SC_ClientSkillInterface_ShowAttriActive},
	{"GetInfoFromConfig", bnd_SC_ClientSkillInterface_GetInfoFromConfig},
	{"SaveInfoToConfig", bnd_SC_ClientSkillInterface_SaveInfoToConfig},
	{"GetSuperShopCustomizeTodayPrompt", bnd_SC_ClientSkillInterface_GetSuperShopCustomizeTodayPrompt},
	{"OPItemInTempPack", bnd_SC_ClientSkillInterface_OPItemInTempPack},
	{"ShowUIContentFunc", bnd_SC_ClientSkillInterface_ShowUIContentFunc},
	{"GetShowUITypeID", bnd_SC_ClientSkillInterface_GetShowUITypeID},
	{"GetShowUIIconDesc", bnd_SC_ClientSkillInterface_GetShowUIIconDesc},
	{"GetDescriptType", bnd_SC_ClientSkillInterface_GetDescriptType},
	{"GetNPCShopNameByFuncID", bnd_SC_ClientSkillInterface_GetNPCShopNameByFuncID},
	{"GetTokenCompositeItemSlot", bnd_SC_ClientSkillInterface_GetTokenCompositeItemSlot},
	{"GetTokenCompositedItemID", bnd_SC_ClientSkillInterface_GetTokenCompositedItemID},
	{"RequestInterruptTokenComposite", bnd_SC_ClientSkillInterface_RequestInterruptTokenComposite},
	{"GetMapTransDataEntryByMapID", bnd_SC_ClientSkillInterface_GetMapTransDataEntryByMapID},
	{"StopUICutScenes", bnd_SC_ClientSkillInterface_StopUICutScenes},
	{"GetUICutScenesPlayTime", bnd_SC_ClientSkillInterface_GetUICutScenesPlayTime},
	{"GetUICutScenesTimeStep", bnd_SC_ClientSkillInterface_GetUICutScenesTimeStep},
	{"GetUICutScenesIcon", bnd_SC_ClientSkillInterface_GetUICutScenesIcon},
	{"GetSitRecoverVipGfx", bnd_SC_ClientSkillInterface_GetSitRecoverVipGfx},
	{"GetSkillOpenLevelInfo", bnd_SC_ClientSkillInterface_GetSkillOpenLevelInfo},
	{"GetTwToZn", bnd_SC_ClientSkillInterface_GetTwToZn},
	{"CanEquipOrUseItem", bnd_SC_ClientSkillInterface_CanEquipOrUseItem},
	{"CanEquipSubItem", bnd_SC_ClientSkillInterface_CanEquipSubItem},
	{"CanDecomposition", bnd_SC_ClientSkillInterface_CanDecomposition},
	{"GetItemDisassembleUseFuncResult", bnd_SC_ClientSkillInterface_GetItemDisassembleUseFuncResult},
	{"GetItemDisassembleMustDropItems", bnd_SC_ClientSkillInterface_GetItemDisassembleMustDropItems},
	{"GetSkillIconPath", bnd_SC_ClientSkillInterface_GetSkillIconPath},
	{"GetSkillUseResult", bnd_SC_ClientSkillInterface_GetSkillUseResult},
	{"GetItemShowID", bnd_SC_ClientSkillInterface_GetItemShowID},
	{"GetBuddyExpDrugs", bnd_SC_ClientSkillInterface_GetBuddyExpDrugs},
	{"RequestRandomPlayerName", bnd_SC_ClientSkillInterface_RequestRandomPlayerName},
	{"GetAutoCommitTeamRequest", bnd_SC_ClientSkillInterface_GetAutoCommitTeamRequest},
	{"SaveAutoCommitTeamRequest", bnd_SC_ClientSkillInterface_SaveAutoCommitTeamRequest},
	{"GetAutoCommitTeamInvite", bnd_SC_ClientSkillInterface_GetAutoCommitTeamInvite},
	{"SaveAutoCommitTeamInvite", bnd_SC_ClientSkillInterface_SaveAutoCommitTeamInvite},
	{"GetShowBattleBuddyEquip", bnd_SC_ClientSkillInterface_GetShowBattleBuddyEquip},
	{"SaveShowBattleBuddyEquip", bnd_SC_ClientSkillInterface_SaveShowBattleBuddyEquip},
	{"GetShowBattleBuddyRune", bnd_SC_ClientSkillInterface_GetShowBattleBuddyRune},
	{"SaveShowBattleBuddyRune", bnd_SC_ClientSkillInterface_SaveShowBattleBuddyRune},
	{"GetArenaDailyRewardParam", bnd_SC_ClientSkillInterface_GetArenaDailyRewardParam},
	{"GetFirstSkillIDByShortcutSlot", bnd_SC_ClientSkillInterface_GetFirstSkillIDByShortcutSlot},
	{"GetGuildCreateRequireLevel", bnd_SC_ClientSkillInterface_GetGuildCreateRequireLevel},
	{"GetGuildCreateRequireMoney", bnd_SC_ClientSkillInterface_GetGuildCreateRequireMoney},
	{"GetGuildCreateRequireYuanbao", bnd_SC_ClientSkillInterface_GetGuildCreateRequireYuanbao},
	{"GetGuildCreateRequireVip", bnd_SC_ClientSkillInterface_GetGuildCreateRequireVip},
	{"GetBossIdList", bnd_SC_ClientSkillInterface_GetBossIdList},
	{"IsUnbindItem", bnd_SC_ClientSkillInterface_IsUnbindItem},
	{"CanBeBatchUsed", bnd_SC_ClientSkillInterface_CanBeBatchUsed},
	{"GetMapShowType", bnd_SC_ClientSkillInterface_GetMapShowType},
	{"GetUIMapShowType", bnd_SC_ClientSkillInterface_GetUIMapShowType},
	{"GetSchemeGroupID", bnd_SC_ClientSkillInterface_GetSchemeGroupID},
	{"GetHarmQuantity", bnd_SC_ClientSkillInterface_GetHarmQuantity},
	{"GetMapBelongStoryID", bnd_SC_ClientSkillInterface_GetMapBelongStoryID},
	{"GetMapSchemeTeamCount", bnd_SC_ClientSkillInterface_GetMapSchemeTeamCount},
	{"GetMapAutoTask", bnd_SC_ClientSkillInterface_GetMapAutoTask},
	{"GetVipAuthorityString", bnd_SC_ClientSkillInterface_GetVipAuthorityString},
	{"GetVipNameString", bnd_SC_ClientSkillInterface_GetVipNameString},
	{"GetVipPrivelegeInfo", bnd_SC_ClientSkillInterface_GetVipPrivelegeInfo},
	{"GetVipPrivelegeInfoByType", bnd_SC_ClientSkillInterface_GetVipPrivelegeInfoByType},
	{"GetVipPrivelegeInfoByTypeAndLevel", bnd_SC_ClientSkillInterface_GetVipPrivelegeInfoByTypeAndLevel},
	{"GetShowVipPrivelegeInfoByType", bnd_SC_ClientSkillInterface_GetShowVipPrivelegeInfoByType},
	{"GetFlowerSendInfo", bnd_SC_ClientSkillInterface_GetFlowerSendInfo},
	{"GetMaxGuildSearchNum", bnd_SC_ClientSkillInterface_GetMaxGuildSearchNum},
	{"GetLivenessByLevel", bnd_SC_ClientSkillInterface_GetLivenessByLevel},
	{"GetChoosePetIds", bnd_SC_ClientSkillInterface_GetChoosePetIds},
	{"GetIconByNPCFuntionType", bnd_SC_ClientSkillInterface_GetIconByNPCFuntionType},
	{"GetProgressInfo", bnd_SC_ClientSkillInterface_GetProgressInfo},
	{"GetMapCateGoryInfo", bnd_SC_ClientSkillInterface_GetMapCateGoryInfo},
	{"GetMapRwdInfo", bnd_SC_ClientSkillInterface_GetMapRwdInfo},
	{"GetShowRaidStage", bnd_SC_ClientSkillInterface_GetShowRaidStage},
	{"GetRespawnItemNum", bnd_SC_ClientSkillInterface_GetRespawnItemNum},
	{"GetYuanbaoOriginalPrice", bnd_SC_ClientSkillInterface_GetYuanbaoOriginalPrice},
	{"GetYuanbaoCurPrice", bnd_SC_ClientSkillInterface_GetYuanbaoCurPrice},
	{"GetAccessWayBuyPrice", bnd_SC_ClientSkillInterface_GetAccessWayBuyPrice},
	{"GetItemidInShopList", bnd_SC_ClientSkillInterface_GetItemidInShopList},
	{"GetItemInShopList", bnd_SC_ClientSkillInterface_GetItemInShopList},
	{"CanScreenPosMoveTo", bnd_SC_ClientSkillInterface_CanScreenPosMoveTo},
	{"URLEncode", bnd_SC_ClientSkillInterface_URLEncode},
	{"GetCrossRealmMapInfo", bnd_SC_ClientSkillInterface_GetCrossRealmMapInfo},
	{"GetKungFuMasterID", bnd_SC_ClientSkillInterface_GetKungFuMasterID},
	{"GetCrossKungFuMasterID", bnd_SC_ClientSkillInterface_GetCrossKungFuMasterID},
	{"GetCrossRealWarServerID", bnd_SC_ClientSkillInterface_GetCrossRealWarServerID},
	{"GetKungFuMasterDress", bnd_SC_ClientSkillInterface_GetKungFuMasterDress},
	{"GetKungFuMasterDress2", bnd_SC_ClientSkillInterface_GetKungFuMasterDress2},
	{"GetPowerGuildID", bnd_SC_ClientSkillInterface_GetPowerGuildID},
	{"GetDirtyFlagRevisionID", bnd_SC_ClientSkillInterface_GetDirtyFlagRevisionID},
	{"GetMapDomainInfo", bnd_SC_ClientSkillInterface_GetMapDomainInfo},
	{"IsDomainActive", bnd_SC_ClientSkillInterface_IsDomainActive},
	{"IsDomainMap", bnd_SC_ClientSkillInterface_IsDomainMap},
	{"CheckDomainReward", bnd_SC_ClientSkillInterface_CheckDomainReward},
	{"GetDomainMapResIDByIndex", bnd_SC_ClientSkillInterface_GetDomainMapResIDByIndex},
	{"GetDomainFlagPos", bnd_SC_ClientSkillInterface_GetDomainFlagPos},
	{"GetPlayerCombatScore", bnd_SC_ClientSkillInterface_GetPlayerCombatScore},
	{"NumberPlus", bnd_SC_ClientSkillInterface_NumberPlus},
	{"IsKungFuMasterID", bnd_SC_ClientSkillInterface_IsKungFuMasterID},
	{"GetGuildWarCatapultList", bnd_SC_ClientSkillInterface_GetGuildWarCatapultList},
	{"IsCrossRealmMap", bnd_SC_ClientSkillInterface_IsCrossRealmMap},
	{"IsSpecialAffixItemID", bnd_SC_ClientSkillInterface_IsSpecialAffixItemID},
	{"IsGuildRaidMap", bnd_SC_ClientSkillInterface_IsGuildRaidMap},
	{"GetCharTalkIcon", bnd_SC_ClientSkillInterface_GetCharTalkIcon},
	{"GetCharNameColor", bnd_SC_ClientSkillInterface_GetCharNameColor},
	{"GetDungeonTime", bnd_SC_ClientSkillInterface_GetDungeonTime},
	{"GetMapNeedLevel", bnd_SC_ClientSkillInterface_GetMapNeedLevel},
	{"CanEnterMap", bnd_SC_ClientSkillInterface_CanEnterMap},
	{"CanEnterMapWithPrompt", bnd_SC_ClientSkillInterface_CanEnterMapWithPrompt},
	{"GetMapPreTaskName", bnd_SC_ClientSkillInterface_GetMapPreTaskName},
	{"GetHookMapsInfo", bnd_SC_ClientSkillInterface_GetHookMapsInfo},
	{"GetCimeliaTotalScore", bnd_SC_ClientSkillInterface_GetCimeliaTotalScore},
	{"GetGamePlayerSubRewardsInfo", bnd_SC_ClientSkillInterface_GetGamePlayerSubRewardsInfo},
	{"GetCimeliaOriginalScore", bnd_SC_ClientSkillInterface_GetCimeliaOriginalScore},
	{"GetCharAttributeCombatScore", bnd_SC_ClientSkillInterface_GetCharAttributeCombatScore},
	{"GetVehicleCurrentLevel", bnd_SC_ClientSkillInterface_GetVehicleCurrentLevel},
	{"GetVehicleFightingTotalScore", bnd_SC_ClientSkillInterface_GetVehicleFightingTotalScore},
	{"GetEquipTotalScore", bnd_SC_ClientSkillInterface_GetEquipTotalScore},
	{"GetStandardCombatScore", bnd_SC_ClientSkillInterface_GetStandardCombatScore},
	{"GetSkillTotalScore", bnd_SC_ClientSkillInterface_GetSkillTotalScore},
	{"GetSkillScore", bnd_SC_ClientSkillInterface_GetSkillScore},
	{"GetEquipScore", bnd_SC_ClientSkillInterface_GetEquipScore},
	{"GetEquipScoreI3", bnd_SC_ClientSkillInterface_GetEquipScoreI3},
	{"GetEquipReinforceScore", bnd_SC_ClientSkillInterface_GetEquipReinforceScore},
	{"GetEquipScoreByItemID", bnd_SC_ClientSkillInterface_GetEquipScoreByItemID},
	{"GetRuneEquipBaseScore", bnd_SC_ClientSkillInterface_GetRuneEquipBaseScore},
	{"GetItemSuitTotalScore", bnd_SC_ClientSkillInterface_GetItemSuitTotalScore},
	{"GetEffectDesp", bnd_SC_ClientSkillInterface_GetEffectDesp},
	{"GetItemEffectFuncInfo", bnd_SC_ClientSkillInterface_GetItemEffectFuncInfo},
	{"GetBaseEffectInfo", bnd_SC_ClientSkillInterface_GetBaseEffectInfo},
	{"GetOpenBagData", bnd_SC_ClientSkillInterface_GetOpenBagData},
	{"GetExternWarehouseData", bnd_SC_ClientSkillInterface_GetExternWarehouseData},
	{"GetShopItemInfo", bnd_SC_ClientSkillInterface_GetShopItemInfo},
	{"GetItemUnBindPrice", bnd_SC_ClientSkillInterface_GetItemUnBindPrice},
	{"GetPowerUpInfo", bnd_SC_ClientSkillInterface_GetPowerUpInfo},
	{"IsEquipMostSuitable", bnd_SC_ClientSkillInterface_IsEquipMostSuitable},
	{"GetCimeliaItemInfo", bnd_SC_ClientSkillInterface_GetCimeliaItemInfo},
	{"GetCimeliaSkillInfo", bnd_SC_ClientSkillInterface_GetCimeliaSkillInfo},
	{"GetCimeliaDisplaySkillID", bnd_SC_ClientSkillInterface_GetCimeliaDisplaySkillID},
	{"GetCurrentCanLearnSkillCount", bnd_SC_ClientSkillInterface_GetCurrentCanLearnSkillCount},
	{"GetNPCConversationSequenceCount", bnd_SC_ClientSkillInterface_GetNPCConversationSequenceCount},
	{"GetNPCConversationCharID", bnd_SC_ClientSkillInterface_GetNPCConversationCharID},
	{"GetNPCConversationContent", bnd_SC_ClientSkillInterface_GetNPCConversationContent},
	{"GetNPCConversationName", bnd_SC_ClientSkillInterface_GetNPCConversationName},
	{"GetConversationTypeByID", bnd_SC_ClientSkillInterface_GetConversationTypeByID},
	{"GetConversationTime", bnd_SC_ClientSkillInterface_GetConversationTime},
	{"GetConversationSoundKey", bnd_SC_ClientSkillInterface_GetConversationSoundKey},
	{"PlayCameraTrackAnim", bnd_SC_ClientSkillInterface_PlayCameraTrackAnim},
	{"PlayCameraMaxTrackAnim", bnd_SC_ClientSkillInterface_PlayCameraMaxTrackAnim},
	{"StopCameraTrackAnim", bnd_SC_ClientSkillInterface_StopCameraTrackAnim},
	{"RestoreFollowCamera", bnd_SC_ClientSkillInterface_RestoreFollowCamera},
	{"MoveCameraToNpcCharType", bnd_SC_ClientSkillInterface_MoveCameraToNpcCharType},
	{"MoveCameraToTarget", bnd_SC_ClientSkillInterface_MoveCameraToTarget},
	{"MoveCameraToMC", bnd_SC_ClientSkillInterface_MoveCameraToMC},
	{"MoveCameraToNoUnLock", bnd_SC_ClientSkillInterface_MoveCameraToNoUnLock},
	{"GetAnimModelPath", bnd_SC_ClientSkillInterface_GetAnimModelPath},
	{"SceeenFadeIn", bnd_SC_ClientSkillInterface_SceeenFadeIn},
	{"EyeExecuteSkill", bnd_SC_ClientSkillInterface_EyeExecuteSkill},
	{"SceeenFadeOut", bnd_SC_ClientSkillInterface_SceeenFadeOut},
	{"Crash", bnd_SC_ClientSkillInterface_Crash},
	{"GetGlobleWarGuildID", bnd_SC_ClientSkillInterface_GetGlobleWarGuildID},
	{"IsDomainWarGuild", bnd_SC_ClientSkillInterface_IsDomainWarGuild},
	{"GetDataString", bnd_SC_ClientSkillInterface_GetDataString},
	{"GetWildPrincesData", bnd_SC_ClientSkillInterface_GetWildPrincesData},
	{"GetAchievementData", bnd_SC_ClientSkillInterface_GetAchievementData},
	{"GetSystemTitlePeriod", bnd_SC_ClientSkillInterface_GetSystemTitlePeriod},
	{"GetCommonStatRewardList", bnd_SC_ClientSkillInterface_GetCommonStatRewardList},
	{"FindNPCbylID", bnd_SC_ClientSkillInterface_FindNPCbylID},
	{"FindNPCByCharType", bnd_SC_ClientSkillInterface_FindNPCByCharType},
	{"FindNPCByNumberCharType", bnd_SC_ClientSkillInterface_FindNPCByNumberCharType},
	{"PathtoTreasure", bnd_SC_ClientSkillInterface_PathtoTreasure},
	{"PathtoTreasureToy", bnd_SC_ClientSkillInterface_PathtoTreasureToy},
	{"GetTaskMgr", bnd_SC_ClientSkillInterface_GetTaskMgr},
	{"GetTaskCurChapter", bnd_SC_ClientSkillInterface_GetTaskCurChapter},
	{"GetAllChapterInfo", bnd_SC_ClientSkillInterface_GetAllChapterInfo},
	{"GetAllTaskReachInfo", bnd_SC_ClientSkillInterface_GetAllTaskReachInfo},
	{"GetTaskReachName", bnd_SC_ClientSkillInterface_GetTaskReachName},
	{"GetChapterTaskInfo", bnd_SC_ClientSkillInterface_GetChapterTaskInfo},
	{"GetTaskRankInfo", bnd_SC_ClientSkillInterface_GetTaskRankInfo},
	{"GetAllTaskRankInfo", bnd_SC_ClientSkillInterface_GetAllTaskRankInfo},
	{"GetCurTaskRank", bnd_SC_ClientSkillInterface_GetCurTaskRank},
	{"GetTaskChapterRewardEndTime", bnd_SC_ClientSkillInterface_GetTaskChapterRewardEndTime},
	{"GetReachTaskChapterInfo", bnd_SC_ClientSkillInterface_GetReachTaskChapterInfo},
	{"GetTaskReward", bnd_SC_ClientSkillInterface_GetTaskReward},
	{"GetGuildClashBossName", bnd_SC_ClientSkillInterface_GetGuildClashBossName},
	{"GetGuildClashBossLocationID", bnd_SC_ClientSkillInterface_GetGuildClashBossLocationID},
	{"GetNPCLevelByCharType", bnd_SC_ClientSkillInterface_GetNPCLevelByCharType},
	{"GetRaidBossPublicLinkID", bnd_SC_ClientSkillInterface_GetRaidBossPublicLinkID},
	{"GetGuildBossLinkID", bnd_SC_ClientSkillInterface_GetGuildBossLinkID},
	{"RequestUseGuildTransportItem", bnd_SC_ClientSkillInterface_RequestUseGuildTransportItem},
	{"RequestGuildWorship", bnd_SC_ClientSkillInterface_RequestGuildWorship},
	{"GetGuildWorshipReward", bnd_SC_ClientSkillInterface_GetGuildWorshipReward},
	{"GetGuildWorshipCost", bnd_SC_ClientSkillInterface_GetGuildWorshipCost},
	{"GetGuildWorshipVipLevel", bnd_SC_ClientSkillInterface_GetGuildWorshipVipLevel},
	{"ShowMessage", bnd_SC_ClientSkillInterface_ShowMessage},
	{"GetErrorString", bnd_SC_ClientSkillInterface_GetErrorString},
	{"GetDistanceFromNpc", bnd_SC_ClientSkillInterface_GetDistanceFromNpc},
	{"OnPlayNPCSound", bnd_SC_ClientSkillInterface_OnPlayNPCSound},
	{"AttachClientGameEvent", bnd_SC_ClientSkillInterface_AttachClientGameEvent},
	{"IsRunInMiniLauncher", bnd_SC_ClientSkillInterface_IsRunInMiniLauncher},
	{"CommitPatchProgress", bnd_SC_ClientSkillInterface_CommitPatchProgress},
	{"IsMapCanGuildTransport", bnd_SC_ClientSkillInterface_IsMapCanGuildTransport},
	{"StopCurrentBGM", bnd_SC_ClientSkillInterface_StopCurrentBGM},
	{"GetCurrentNPCTalkTaskFunction", bnd_SC_ClientSkillInterface_GetCurrentNPCTalkTaskFunction},
	{"GetClientRumorManager", bnd_SC_ClientSkillInterface_GetClientRumorManager},
	{"GetVipProfitDefineExtraBeginID", bnd_SC_ClientSkillInterface_GetVipProfitDefineExtraBeginID},
	{"GetWorld2RadarPositionInfo", bnd_SC_ClientSkillInterface_GetWorld2RadarPositionInfo},
	{"IsItemAutoUseByPlayer", bnd_SC_ClientSkillInterface_IsItemAutoUseByPlayer},
	{"IsItemAutoShowByPlayer", bnd_SC_ClientSkillInterface_IsItemAutoShowByPlayer},
	{"IsItemTrueAutoUseByPlayer", bnd_SC_ClientSkillInterface_IsItemTrueAutoUseByPlayer},
	{"GetUseGranuLimitCount", bnd_SC_ClientSkillInterface_GetUseGranuLimitCount},
	{"GetNextColdDownTimeByCronStr", bnd_SC_ClientSkillInterface_GetNextColdDownTimeByCronStr},
	{"StopDownloadImageResources", bnd_SC_ClientSkillInterface_StopDownloadImageResources},
	{"IsNeedShowFly", bnd_SC_ClientSkillInterface_IsNeedShowFly},
	{"GetOpenLevelInfoByKeyID", bnd_SC_ClientSkillInterface_GetOpenLevelInfoByKeyID},
	{"RaidMapCanRecordPK", bnd_SC_ClientSkillInterface_RaidMapCanRecordPK},
	{"GetWorldObjecDescID", bnd_SC_ClientSkillInterface_GetWorldObjecDescID},
	{"IsPkPunishArea", bnd_SC_ClientSkillInterface_IsPkPunishArea},
	{"CanChangePKMode", bnd_SC_ClientSkillInterface_CanChangePKMode},
	{"GetFixPKMode", bnd_SC_ClientSkillInterface_GetFixPKMode},
	{"GetEnterPKMode", bnd_SC_ClientSkillInterface_GetEnterPKMode},
	{"GetDefaultConfigLevelOfGPU", bnd_SC_ClientSkillInterface_GetDefaultConfigLevelOfGPU},
	{"GetOpenLevelOnlineTimeByID", bnd_SC_ClientSkillInterface_GetOpenLevelOnlineTimeByID},
	{"GetOpenLvelTotoalTime", bnd_SC_ClientSkillInterface_GetOpenLvelTotoalTime},
	{"GetBatchMaxItemCountByID", bnd_SC_ClientSkillInterface_GetBatchMaxItemCountByID},
	{"GetDisplayCharTypeID", bnd_SC_ClientSkillInterface_GetDisplayCharTypeID},
	{"GetTreasureCostByID", bnd_SC_ClientSkillInterface_GetTreasureCostByID},
	{"GetCharTypeByFabaoID", bnd_SC_ClientSkillInterface_GetCharTypeByFabaoID},
	{"GetSubTransformSkillID", bnd_SC_ClientSkillInterface_GetSubTransformSkillID},
	{"GetSubTransformType", bnd_SC_ClientSkillInterface_GetSubTransformType},
	{"CheckGuildWarTime", bnd_SC_ClientSkillInterface_CheckGuildWarTime},
	{"GetGuildWarEndTime", bnd_SC_ClientSkillInterface_GetGuildWarEndTime},
	{"CheckActivitySchedule", bnd_SC_ClientSkillInterface_CheckActivitySchedule},
	{"CheckSecretPoolValueID", bnd_SC_ClientSkillInterface_CheckSecretPoolValueID},
	{"GetGuildDonateInfo", bnd_SC_ClientSkillInterface_GetGuildDonateInfo},
	{"CheckRichManTime", bnd_SC_ClientSkillInterface_CheckRichManTime},
	{"GetScretTreasureTotalTimes", bnd_SC_ClientSkillInterface_GetScretTreasureTotalTimes},
	{"GetScretLimitTimes", bnd_SC_ClientSkillInterface_GetScretLimitTimes},
	{"GetScretTimesValue", bnd_SC_ClientSkillInterface_GetScretTimesValue},
	{"GetCimeliaLevelInOpenLevelByOpenID", bnd_SC_ClientSkillInterface_GetCimeliaLevelInOpenLevelByOpenID},
	{"GetSkillBookID", bnd_SC_ClientSkillInterface_GetSkillBookID},
	{"GetSecretTypeByBookID", bnd_SC_ClientSkillInterface_GetSecretTypeByBookID},
	{"GetQQGirlsCount", bnd_SC_ClientSkillInterface_GetQQGirlsCount},
	{"GetFabaoIdByCharType", bnd_SC_ClientSkillInterface_GetFabaoIdByCharType},
	{"showWebWindowBuyItem", bnd_SC_ClientSkillInterface_showWebWindowBuyItem},
	{"showWebWindowYellowVip", bnd_SC_ClientSkillInterface_showWebWindowYellowVip},
	{"showWebWindowBlueVip", bnd_SC_ClientSkillInterface_showWebWindowBlueVip},
	{"GetYunyingPlatform", bnd_SC_ClientSkillInterface_GetYunyingPlatform},
	{"GetYunyingPlatformPage", bnd_SC_ClientSkillInterface_GetYunyingPlatformPage},
	{"GetYunyingTxSubPlatform", bnd_SC_ClientSkillInterface_GetYunyingTxSubPlatform},
	{"GetBaseLevelExp", bnd_SC_ClientSkillInterface_GetBaseLevelExp},
	{"GetSkillLevel", bnd_SC_ClientSkillInterface_GetSkillLevel},
	{"GetPlayerMaxLevel", bnd_SC_ClientSkillInterface_GetPlayerMaxLevel},
	{"GetFashionSuitCount", bnd_SC_ClientSkillInterface_GetFashionSuitCount},
	{"GetAllSkillBooks", bnd_SC_ClientSkillInterface_GetAllSkillBooks},
	{"GetEverySkillBooks", bnd_SC_ClientSkillInterface_GetEverySkillBooks},
	{"GetSkillBookNodeInfo", bnd_SC_ClientSkillInterface_GetSkillBookNodeInfo},
	{"GetSkillBookInfo", bnd_SC_ClientSkillInterface_GetSkillBookInfo},
	{"GetMapIDByStoryID", bnd_SC_ClientSkillInterface_GetMapIDByStoryID},
	{"GetTestDataBaseByIndex", bnd_SC_ClientSkillInterface_GetTestDataBaseByIndex},
	{"GetSkillBookAttribs", bnd_SC_ClientSkillInterface_GetSkillBookAttribs},
	{"GetSkillBookAttribsByNodeLevel", bnd_SC_ClientSkillInterface_GetSkillBookAttribsByNodeLevel},
	{"GetSkillBookItemChangeAttribs", bnd_SC_ClientSkillInterface_GetSkillBookItemChangeAttribs},
	{"GetSkillBookCombatScore", bnd_SC_ClientSkillInterface_GetSkillBookCombatScore},
	{"CheckSkillBookUpgrade", bnd_SC_ClientSkillInterface_CheckSkillBookUpgrade},
	{"GetSkillBookGridInfo", bnd_SC_ClientSkillInterface_GetSkillBookGridInfo},
	{"GetCimeliaInitAttribInfo", bnd_SC_ClientSkillInterface_GetCimeliaInitAttribInfo},
	{"GetCimeliaTransformAttribInfo", bnd_SC_ClientSkillInterface_GetCimeliaTransformAttribInfo},
	{"GetCimeliaTransformElementAttribInfo", bnd_SC_ClientSkillInterface_GetCimeliaTransformElementAttribInfo},
	{"GetCategorySkills", bnd_SC_ClientSkillInterface_GetCategorySkills},
	{"ClickOnScreen", bnd_SC_ClientSkillInterface_ClickOnScreen},
	{"PlayVipLevelupFx", bnd_SC_ClientSkillInterface_PlayVipLevelupFx},
	{"PlayVipNewLevelupFx", bnd_SC_ClientSkillInterface_PlayVipNewLevelupFx},
	{"PlayArenaTimerFx", bnd_SC_ClientSkillInterface_PlayArenaTimerFx},
	{"PlaySkyArenaTimerFx", bnd_SC_ClientSkillInterface_PlaySkyArenaTimerFx},
	{"GetItemAttributeString", bnd_SC_ClientSkillInterface_GetItemAttributeString},
	{"GetCompositionFormulaInfo", bnd_SC_ClientSkillInterface_GetCompositionFormulaInfo},
	{"GetDecompositionInfo", bnd_SC_ClientSkillInterface_GetDecompositionInfo},
	{"GetArenaRankReward", bnd_SC_ClientSkillInterface_GetArenaRankReward},
	{"GetItemCompositionFuncIDByType", bnd_SC_ClientSkillInterface_GetItemCompositionFuncIDByType},
	{"GetItemDeCompositionFuncIDByType", bnd_SC_ClientSkillInterface_GetItemDeCompositionFuncIDByType},
	{"GetEquipUpgradeCompositionInfo", bnd_SC_ClientSkillInterface_GetEquipUpgradeCompositionInfo},
	{"GetNxtEquipUpgradeItemID", bnd_SC_ClientSkillInterface_GetNxtEquipUpgradeItemID},
	{"GetHookStatePosY", bnd_SC_ClientSkillInterface_GetHookStatePosY},
	{"GetInt32tBy2Int16tUnion", bnd_SC_ClientSkillInterface_GetInt32tBy2Int16tUnion},
	{"ResetItemCompositionTargetInfo", bnd_SC_ClientSkillInterface_ResetItemCompositionTargetInfo},
	{"SetItemCompositionTargetInfo", bnd_SC_ClientSkillInterface_SetItemCompositionTargetInfo},
	{"GetItemCompositionTargetInfo", bnd_SC_ClientSkillInterface_GetItemCompositionTargetInfo},
	{"GetAuctionSellPrice", bnd_SC_ClientSkillInterface_GetAuctionSellPrice},
	{"GetMapIndexByResIDAndLogicID", bnd_SC_ClientSkillInterface_GetMapIndexByResIDAndLogicID},
	{"IsMapIsNewBeeMap", bnd_SC_ClientSkillInterface_IsMapIsNewBeeMap},
	{"GetUniqueID", bnd_SC_ClientSkillInterface_GetUniqueID},
	{"IsAllianceMap", bnd_SC_ClientSkillInterface_IsAllianceMap},
	{"GetDaysInterval", bnd_SC_ClientSkillInterface_GetDaysInterval},
	{"GetServerOpenTime", bnd_SC_ClientSkillInterface_GetServerOpenTime},
	{"IsInSelfServer", bnd_SC_ClientSkillInterface_IsInSelfServer},
	{"CheckVipPrivilege", bnd_SC_ClientSkillInterface_CheckVipPrivilege},
	{"GetVipPrivilegeIcon", bnd_SC_ClientSkillInterface_GetVipPrivilegeIcon},
	{"GetVipPrivilegeDespTips", bnd_SC_ClientSkillInterface_GetVipPrivilegeDespTips},
	{"GetVipPrivilegeDespTitle", bnd_SC_ClientSkillInterface_GetVipPrivilegeDespTitle},
	{"GetShopIDShopType", bnd_SC_ClientSkillInterface_GetShopIDShopType},
	{"GetForceBattleMapIndex", bnd_SC_ClientSkillInterface_GetForceBattleMapIndex},
	{"DecodePlatformVipInfo", bnd_SC_ClientSkillInterface_DecodePlatformVipInfo},
	{"GetProcessName", bnd_SC_ClientSkillInterface_GetProcessName},
	{"LuaShellExecute", bnd_SC_ClientSkillInterface_LuaShellExecute},
	{"CheckLocation", bnd_SC_ClientSkillInterface_CheckLocation},
	{"GetGameServerInfoIndex", bnd_SC_ClientSkillInterface_GetGameServerInfoIndex},
	{"GetActivityRewardInfo", bnd_SC_ClientSkillInterface_GetActivityRewardInfo},
	{"GetActivityRewardInfoWithChoice", bnd_SC_ClientSkillInterface_GetActivityRewardInfoWithChoice},
	{"GetMultiSelectGiftChoices", bnd_SC_ClientSkillInterface_GetMultiSelectGiftChoices},
	{"GetMultiSelectGiftChoicesCost", bnd_SC_ClientSkillInterface_GetMultiSelectGiftChoicesCost},
	{"GetGameStoryBossInfo", bnd_SC_ClientSkillInterface_GetGameStoryBossInfo},
	{"GetServerUnionID", bnd_SC_ClientSkillInterface_GetServerUnionID},
	{"SetLockLevel", bnd_SC_ClientSkillInterface_SetLockLevel},
	{"LockLockedLevel", bnd_SC_ClientSkillInterface_LockLockedLevel},
	{"GetPeakArenaLevelByScore", bnd_SC_ClientSkillInterface_GetPeakArenaLevelByScore},
	{"GetPeakArenaSectionScore", bnd_SC_ClientSkillInterface_GetPeakArenaSectionScore},
	{"GetPeakLevelAttr", bnd_SC_ClientSkillInterface_GetPeakLevelAttr},
	{"GetPercentAttrCombatScore", bnd_SC_ClientSkillInterface_GetPercentAttrCombatScore},
	{"GetStringMd5", bnd_SC_ClientSkillInterface_GetStringMd5},
	{"GetBoneSoulSkillIconAndTip", bnd_SC_ClientSkillInterface_GetBoneSoulSkillIconAndTip},
	{"GetBoneSoulCost", bnd_SC_ClientSkillInterface_GetBoneSoulCost},
	{"IsItemMelt", bnd_SC_ClientSkillInterface_IsItemMelt},
	{"GetDateTimeStamp", bnd_SC_ClientSkillInterface_GetDateTimeStamp},
	{"CanStarsRune", bnd_SC_ClientSkillInterface_CanStarsRune},
	{"GetStarsRuneCost", bnd_SC_ClientSkillInterface_GetStarsRuneCost},
	{"GetChessMatrixActiveScheduleID", bnd_SC_ClientSkillInterface_GetChessMatrixActiveScheduleID},
	{"ScriptActionExecute", bnd_SC_ClientSkillInterface_ScriptActionExecute},
	{"FindAndFileterForbiddenText", bnd_SC_ClientSkillInterface_FindAndFileterForbiddenText},
	{"ShowGameUIByKeyName", bnd_SC_ClientSkillInterface_ShowGameUIByKeyName},
	{"ShowGameUIByKeyNameAndPath", bnd_SC_ClientSkillInterface_ShowGameUIByKeyNameAndPath},
	{"DestroyGameUI", bnd_SC_ClientSkillInterface_DestroyGameUI},
	{"IsBoss", bnd_SC_ClientSkillInterface_IsBoss},
	{"GetBackPackEmptyEntry", bnd_SC_ClientSkillInterface_GetBackPackEmptyEntry},
	{"GetBuddyInfo", bnd_SC_ClientSkillInterface_GetBuddyInfo},
	{"GetBuddyInfoList", bnd_SC_ClientSkillInterface_GetBuddyInfoList},
	{"GetBuddyUpgradeInfo", bnd_SC_ClientSkillInterface_GetBuddyUpgradeInfo},
	{"GetBuddyTalent", bnd_SC_ClientSkillInterface_GetBuddyTalent},
	{"GetBuddySpareItemID", bnd_SC_ClientSkillInterface_GetBuddySpareItemID},
	{"GetBuddyMaxLevel", bnd_SC_ClientSkillInterface_GetBuddyMaxLevel},
	{"GetBuddyAttributeShow", bnd_SC_ClientSkillInterface_GetBuddyAttributeShow},
	{"GetBuddyGridUnlockLevel", bnd_SC_ClientSkillInterface_GetBuddyGridUnlockLevel},
	{"CheckUseItemOpenSkillBook", bnd_SC_ClientSkillInterface_CheckUseItemOpenSkillBook},
	{"GetCoreInfo", bnd_SC_ClientSkillInterface_GetCoreInfo},
	{"GetCoreGoalInfo", bnd_SC_ClientSkillInterface_GetCoreGoalInfo},
	{"GetCoreAttribs", bnd_SC_ClientSkillInterface_GetCoreAttribs},
	{"GetCommanderTitleAttribs", bnd_SC_ClientSkillInterface_GetCommanderTitleAttribs},
	{"GetCommanderTitleName", bnd_SC_ClientSkillInterface_GetCommanderTitleName},
	{"IsCommanderTitleCanShow", bnd_SC_ClientSkillInterface_IsCommanderTitleCanShow},
	{"GetStigmasUnlockInfo", bnd_SC_ClientSkillInterface_GetStigmasUnlockInfo},
	{"GetDrawCardRewardDisplay", bnd_SC_ClientSkillInterface_GetDrawCardRewardDisplay},
	{"GetItemEffectValueStr", bnd_SC_ClientSkillInterface_GetItemEffectValueStr},
	{"GetActiveSkillItemID", bnd_SC_ClientSkillInterface_GetActiveSkillItemID},
	{"GetBuddyChainOpenInfo", bnd_SC_ClientSkillInterface_GetBuddyChainOpenInfo},
	{"GetGuildLevelRewards", bnd_SC_ClientSkillInterface_GetGuildLevelRewards},
	{"PlayFailTaskUeFx", bnd_SC_ClientSkillInterface_PlayFailTaskUeFx},
	{"PlayTaskChapterOpenFx", bnd_SC_ClientSkillInterface_PlayTaskChapterOpenFx},
	{"GetEntrustTaskStarLevel", bnd_SC_ClientSkillInterface_GetEntrustTaskStarLevel},
	{"GetRuneInfo", bnd_SC_ClientSkillInterface_GetRuneInfo},
	{"GetLevelUpRuneCost", bnd_SC_ClientSkillInterface_GetLevelUpRuneCost},
	{"GetRuneCommanderLevelLimit", bnd_SC_ClientSkillInterface_GetRuneCommanderLevelLimit},
	{"GetIsRuneSkillUp", bnd_SC_ClientSkillInterface_GetIsRuneSkillUp},
	{"GetRuneCollectionInfo", bnd_SC_ClientSkillInterface_GetRuneCollectionInfo},
	{"GetRuneAttributes", bnd_SC_ClientSkillInterface_GetRuneAttributes},
	{"GetRuneStarInfo", bnd_SC_ClientSkillInterface_GetRuneStarInfo},
	{"GetRuneEquipNxtLevelOfAffiliatedSkill", bnd_SC_ClientSkillInterface_GetRuneEquipNxtLevelOfAffiliatedSkill},
	{"GetRuneEquipSkillIDByItemIDAndItemLevel", bnd_SC_ClientSkillInterface_GetRuneEquipSkillIDByItemIDAndItemLevel},
	{"GetRuneMaxLevelInfo", bnd_SC_ClientSkillInterface_GetRuneMaxLevelInfo},
	{"GetBuddyShowTime", bnd_SC_ClientSkillInterface_GetBuddyShowTime},
	{"GetCharShowRewards", bnd_SC_ClientSkillInterface_GetCharShowRewards},
	{"GetRaidGloryChapterNum", bnd_SC_ClientSkillInterface_GetRaidGloryChapterNum},
	{"GetVipNewMaxNum", bnd_SC_ClientSkillInterface_GetVipNewMaxNum},
	{"GetBestGuildItemLinkID", bnd_SC_ClientSkillInterface_GetBestGuildItemLinkID},
	{"GetThemeActivityTaskTabNames", bnd_SC_ClientSkillInterface_GetThemeActivityTaskTabNames},
	{"GetThemeActivityTaskScheduleId", bnd_SC_ClientSkillInterface_GetThemeActivityTaskScheduleId},
	{"GetRuneEquipScore", bnd_SC_ClientSkillInterface_GetRuneEquipScore},
	{"GetBuddyLevelUpCombatScoreBonus", bnd_SC_ClientSkillInterface_GetBuddyLevelUpCombatScoreBonus},
	{"GetBuddyOriginalCombatScore", bnd_SC_ClientSkillInterface_GetBuddyOriginalCombatScore},
	{"GetBuddyStarUpCombatScoreBonus", bnd_SC_ClientSkillInterface_GetBuddyStarUpCombatScoreBonus},
	{"GetCustomCommandList", bnd_SC_ClientSkillInterface_GetCustomCommandList},
	{"GetDebugMaterialListInfo", bnd_SC_ClientSkillInterface_GetDebugMaterialListInfo},
	{"CalculateBeBetterMaxScores", bnd_SC_ClientSkillInterface_CalculateBeBetterMaxScores},
	{"GetAllHeroLevelMaxScore", bnd_SC_ClientSkillInterface_GetAllHeroLevelMaxScore},
	{"GetAllHeroStarMaxScore", bnd_SC_ClientSkillInterface_GetAllHeroStarMaxScore},
	{"GetAllHeroSkillMaxScore", bnd_SC_ClientSkillInterface_GetAllHeroSkillMaxScore},
	{"GetAllHeroCount", bnd_SC_ClientSkillInterface_GetAllHeroCount},
	{"GetOwnedHeroLevelScore", bnd_SC_ClientSkillInterface_GetOwnedHeroLevelScore},
	{"GetOwnedHeroStarScore", bnd_SC_ClientSkillInterface_GetOwnedHeroStarScore},
	{"GetOwnedHeroSkillScore", bnd_SC_ClientSkillInterface_GetOwnedHeroSkillScore},
	{"GetOwnedHeroCount", bnd_SC_ClientSkillInterface_GetOwnedHeroCount},
	{"GetAllRuneLevelMaxScore", bnd_SC_ClientSkillInterface_GetAllRuneLevelMaxScore},
	{"GetAllRuneStarMaxScore", bnd_SC_ClientSkillInterface_GetAllRuneStarMaxScore},
	{"GetAllRuneCount", bnd_SC_ClientSkillInterface_GetAllRuneCount},
	{"GetOwnedRuneLevelScore", bnd_SC_ClientSkillInterface_GetOwnedRuneLevelScore},
	{"GetOwnedRuneStarScore", bnd_SC_ClientSkillInterface_GetOwnedRuneStarScore},
	{"GetOwnedRuneCount", bnd_SC_ClientSkillInterface_GetOwnedRuneCount},
	{"GetAllEquipMaxScore", bnd_SC_ClientSkillInterface_GetAllEquipMaxScore},
	{"GetAllEquipLevelMaxScore", bnd_SC_ClientSkillInterface_GetAllEquipLevelMaxScore},
	{"GetAllEquipStarMaxScore", bnd_SC_ClientSkillInterface_GetAllEquipStarMaxScore},
	{"GetOwnedEquipScore", bnd_SC_ClientSkillInterface_GetOwnedEquipScore},
	{"GetOwnedEquipLevelScore", bnd_SC_ClientSkillInterface_GetOwnedEquipLevelScore},
	{"GetOwnedEquipStarScore", bnd_SC_ClientSkillInterface_GetOwnedEquipStarScore},
	{"GetAllToyPetMaxScore", bnd_SC_ClientSkillInterface_GetAllToyPetMaxScore},
	{"GetAllToyPetCount", bnd_SC_ClientSkillInterface_GetAllToyPetCount},
	{"GetOwnedToyPetScore", bnd_SC_ClientSkillInterface_GetOwnedToyPetScore},
	{"GetOwnedToyPetCount", bnd_SC_ClientSkillInterface_GetOwnedToyPetCount},
	{"GetVehicleAttrLevelMaxScore", bnd_SC_ClientSkillInterface_GetVehicleAttrLevelMaxScore},
	{"GetVehicleSkinMaxScore", bnd_SC_ClientSkillInterface_GetVehicleSkinMaxScore},
	{"GetVehicleEquipMaxScore", bnd_SC_ClientSkillInterface_GetVehicleEquipMaxScore},
	{"GetVehicleDrugMaxScore", bnd_SC_ClientSkillInterface_GetVehicleDrugMaxScore},
	{"GetOwnedVehicleAttrScore", bnd_SC_ClientSkillInterface_GetOwnedVehicleAttrScore},
	{"GetOwnedVehicleSkinScore", bnd_SC_ClientSkillInterface_GetOwnedVehicleSkinScore},
	{"GetOwnedVehicleEquipScore", bnd_SC_ClientSkillInterface_GetOwnedVehicleEquipScore},
	{"GetOwnedVehicleDrugScore", bnd_SC_ClientSkillInterface_GetOwnedVehicleDrugScore},
	{"GetWingAttrLevelMaxScore", bnd_SC_ClientSkillInterface_GetWingAttrLevelMaxScore},
	{"GetWingSkinMaxScore", bnd_SC_ClientSkillInterface_GetWingSkinMaxScore},
	{"GetWingEquipMaxScore", bnd_SC_ClientSkillInterface_GetWingEquipMaxScore},
	{"GetWingDrugMaxScore", bnd_SC_ClientSkillInterface_GetWingDrugMaxScore},
	{"GetOwnedWingAttrScore", bnd_SC_ClientSkillInterface_GetOwnedWingAttrScore},
	{"GetOwnedWingSkinScore", bnd_SC_ClientSkillInterface_GetOwnedWingSkinScore},
	{"GetOwnedWingEquipScore", bnd_SC_ClientSkillInterface_GetOwnedWingEquipScore},
	{"GetOwnedWingDrugScore", bnd_SC_ClientSkillInterface_GetOwnedWingDrugScore},
	{"GetDevaEyeAttrLevelMaxScore", bnd_SC_ClientSkillInterface_GetDevaEyeAttrLevelMaxScore},
	{"GetDevaEyeSkinMaxScore", bnd_SC_ClientSkillInterface_GetDevaEyeSkinMaxScore},
	{"GetDevaEyeEquipMaxScore", bnd_SC_ClientSkillInterface_GetDevaEyeEquipMaxScore},
	{"GetDevaEyeDrugMaxScore", bnd_SC_ClientSkillInterface_GetDevaEyeDrugMaxScore},
	{"GetOwnedDevaEyeAttrScore", bnd_SC_ClientSkillInterface_GetOwnedDevaEyeAttrScore},
	{"GetOwnedDevaEyeSkinScore", bnd_SC_ClientSkillInterface_GetOwnedDevaEyeSkinScore},
	{"GetOwnedDevaEyeEquipScore", bnd_SC_ClientSkillInterface_GetOwnedDevaEyeEquipScore},
	{"GetOwnedDevaEyeDrugScore", bnd_SC_ClientSkillInterface_GetOwnedDevaEyeDrugScore},
	{"GetCommanderEquipAttrMaxScore", bnd_SC_ClientSkillInterface_GetCommanderEquipAttrMaxScore},
	{"GetCommanderEquipStrengthenMaxScore", bnd_SC_ClientSkillInterface_GetCommanderEquipStrengthenMaxScore},
	{"GetCommanderEquipStarMaxScore", bnd_SC_ClientSkillInterface_GetCommanderEquipStarMaxScore},
	{"GetOwnedCommanderEquipAttrScore", bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipAttrScore},
	{"GetOwnedCommanderEquipStrengthenScore", bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipStrengthenScore},
	{"GetOwnedCommanderEquipStarScore", bnd_SC_ClientSkillInterface_GetOwnedCommanderEquipStarScore},
	{"GetDELTodayEndTimeStamp", bnd_SC_ClientSkillInterface_GetDELTodayEndTimeStamp},
	{"IsTimestampEndToday", bnd_SC_ClientSkillInterface_IsTimestampEndToday},
	{"GetDeltaDay", bnd_SC_ClientSkillInterface_GetDeltaDay},
	{"GetSevendaysDetailCidByIndex", bnd_SC_ClientSkillInterface_GetSevendaysDetailCidByIndex},
	{"GetMapLeaveCountDown", bnd_SC_ClientSkillInterface_GetMapLeaveCountDown},
	{"GetTreasureAddAward", bnd_SC_ClientSkillInterface_GetTreasureAddAward},
	{"GetWeekDayByTime", bnd_SC_ClientSkillInterface_GetWeekDayByTime},
	{"GetSkillDirection", bnd_SC_ClientSkillInterface_GetSkillDirection},
	{"GetGuildBattleTaskOpenSchedule", bnd_SC_ClientSkillInterface_GetGuildBattleTaskOpenSchedule},
	{"GetBestGuildRankStageInfo", bnd_SC_ClientSkillInterface_GetBestGuildRankStageInfo},
	{"GetBestGuildGoalCount", bnd_SC_ClientSkillInterface_GetBestGuildGoalCount},
	{"GetSevendaysRewardEndTime", bnd_SC_ClientSkillInterface_GetSevendaysRewardEndTime},
	{"GetToyIsLandBossLink", bnd_SC_ClientSkillInterface_GetToyIsLandBossLink},
	{"GetExpAccessWayInfo", bnd_SC_ClientSkillInterface_GetExpAccessWayInfo},
	{"GetCurrentProcessId", bnd_SC_ClientSkillInterface_GetCurrentProcessId},
	{"GetGloryRewardLinkInfo", bnd_SC_ClientSkillInterface_GetGloryRewardLinkInfo},
	{"GetCommanderEquipSuitCollectInfo", bnd_SC_ClientSkillInterface_GetCommanderEquipSuitCollectInfo},
	{"GetResourceRetrieveInfo", bnd_SC_ClientSkillInterface_GetResourceRetrieveInfo},
	{"GetRatioByLevel", bnd_SC_ClientSkillInterface_GetRatioByLevel},
	{"GetAchievementTypeInfo", bnd_SC_ClientSkillInterface_GetAchievementTypeInfo},
	{"GetBuddyTransformInfoByCid", bnd_SC_ClientSkillInterface_GetBuddyTransformInfoByCid},
	{"GetBuddyTransformName", bnd_SC_ClientSkillInterface_GetBuddyTransformName},
	{"GetBuddyTransformGrade", bnd_SC_ClientSkillInterface_GetBuddyTransformGrade},
	{"GetBuddyTransformBuddyId", bnd_SC_ClientSkillInterface_GetBuddyTransformBuddyId},
	{"GetAchievementBigType", bnd_SC_ClientSkillInterface_GetAchievementBigType},
	{"GetAchievementSmallTypeName", bnd_SC_ClientSkillInterface_GetAchievementSmallTypeName},
	{"GetTreasureItemInfo", bnd_SC_ClientSkillInterface_GetTreasureItemInfo},
	{"GetBuyRareSubInfo", bnd_SC_ClientSkillInterface_GetBuyRareSubInfo},
	{"GetMustBuyInfo", bnd_SC_ClientSkillInterface_GetMustBuyInfo},
	{"GetGuildBossRankReward", bnd_SC_ClientSkillInterface_GetGuildBossRankReward},
	{"GetRestraintJob", bnd_SC_ClientSkillInterface_GetRestraintJob},
	{"GetGuildProfitMaxExp", bnd_SC_ClientSkillInterface_GetGuildProfitMaxExp},
	{"GetGuildCrystalQuality", bnd_SC_ClientSkillInterface_GetGuildCrystalQuality},
	{"GetGuildCrystalMaxExp", bnd_SC_ClientSkillInterface_GetGuildCrystalMaxExp},
	{"GetGuildProfitMaxLevel", bnd_SC_ClientSkillInterface_GetGuildProfitMaxLevel},
	{"IsScheduleValid", bnd_SC_ClientSkillInterface_IsScheduleValid},
	{"GetThemeMainActivityInfo", bnd_SC_ClientSkillInterface_GetThemeMainActivityInfo},
	{"GetThemeSubActivityInfo", bnd_SC_ClientSkillInterface_GetThemeSubActivityInfo},
	{"GetACTShopAInfo", bnd_SC_ClientSkillInterface_GetACTShopAInfo},
	{"GetThemeActivityRaidBossRankRwd", bnd_SC_ClientSkillInterface_GetThemeActivityRaidBossRankRwd},
	{"GetThemeRaidBossType", bnd_SC_ClientSkillInterface_GetThemeRaidBossType},
	{"GetThemeRaidBossTypeSchedule", bnd_SC_ClientSkillInterface_GetThemeRaidBossTypeSchedule},
	{"GetGameDir", bnd_SC_ClientSkillInterface_GetGameDir},
	{"GetOpenTimeByID", bnd_SC_ClientSkillInterface_GetOpenTimeByID},
	{"GetUnLockTimeByID", bnd_SC_ClientSkillInterface_GetUnLockTimeByID},
	{"GetChargeRate", bnd_SC_ClientSkillInterface_GetChargeRate},
	{"GetChargeProfitCashType", bnd_SC_ClientSkillInterface_GetChargeProfitCashType},
	{"GetTimeStrByTimeStamp", bnd_SC_ClientSkillInterface_GetTimeStrByTimeStamp},
	{"GetRobotScore", bnd_SC_ClientSkillInterface_GetRobotScore},
	{"GetRobotHead", bnd_SC_ClientSkillInterface_GetRobotHead},
	{"GetRobotLevel", bnd_SC_ClientSkillInterface_GetRobotLevel},
	{"GetRobotName", bnd_SC_ClientSkillInterface_GetRobotName},
	{"GetMailText", bnd_SC_ClientSkillInterface_GetMailText},
	{"GetDecodeScore", bnd_SC_ClientSkillInterface_GetDecodeScore},
	{"GetSubCharString", bnd_SC_ClientSkillInterface_GetSubCharString},
	{"GetCharCount", bnd_SC_ClientSkillInterface_GetCharCount},
	{"GetTutorialRewardInfo", bnd_SC_ClientSkillInterface_GetTutorialRewardInfo},
	{"GetSkyArenaRankRewardInfo", bnd_SC_ClientSkillInterface_GetSkyArenaRankRewardInfo},
	{"GetSkyArenaRankInfo", bnd_SC_ClientSkillInterface_GetSkyArenaRankInfo},
	{"GetSpecialTaskInfo", bnd_SC_ClientSkillInterface_GetSpecialTaskInfo},
	{"GetGuessCost", bnd_SC_ClientSkillInterface_GetGuessCost},
	{"GetGuessProfit", bnd_SC_ClientSkillInterface_GetGuessProfit},
	{"GetSummitArenaMatchName", bnd_SC_ClientSkillInterface_GetSummitArenaMatchName},
	{"GetSummitArenaRankReward", bnd_SC_ClientSkillInterface_GetSummitArenaRankReward},
	{"IsSoloduleRobotPlayerId", bnd_SC_ClientSkillInterface_IsSoloduleRobotPlayerId},
	{"GetHight32", bnd_SC_ClientSkillInterface_GetHight32},
	{"GetLow32", bnd_SC_ClientSkillInterface_GetLow32},
	{"GetPreStoryId", bnd_SC_ClientSkillInterface_GetPreStoryId},
	{"GetNextStoryTime", bnd_SC_ClientSkillInterface_GetNextStoryTime},
	{NULL, NULL}
	};
	static int luaopen_SC_ClientSkillInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("SC_ClientSkillInterface", "SC_SkillInterface", lib_SC_ClientSkillInterface, bnd_LuaDestroy_SC_ClientSkillInterface);
		return 1;
	}
	///////////////////////////////////////////////
	////////SC_ClientDebugInterface Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_SC_ClientDebugInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "SC_ClientDebugInterface");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_SC_ClientDebugInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//SC_ClientDebugInterface* h = (SC_ClientDebugInterface*) binder.CheckUserType(1, "SC_ClientDebugInterface");
		binder.CheckUserType(1, "SC_ClientDebugInterface");
		return 0;
	}
	static int bnd_SC_ClientDebugInterface_SetGrassRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetGrassRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetShadowRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetShadowRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetModelRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetModelRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetWaterRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetWaterRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetSceneFxRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetSceneFxRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetTerrainRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTerrainRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetActorRenderingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetActorRenderingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetFogEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetFogEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetPathFindingEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetPathFindingEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetStatEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetStatEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetCharacterUpdateEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetCharacterUpdateEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetFreeCameraModeEnalbe(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetFreeCameraModeEnalbe, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetTianlongCameraEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTianlongCameraEnable, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetTianlongCameraEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetTianlongCameraEnable, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_SetTrackAnimTrackKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTrackAnimTrackKey, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetTrackAnimTrackKeyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetTrackAnimTrackKeyCount, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_ModifyTrackAnimKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ModifyTrackAnimKey, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_RemoveTrackAnimKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::RemoveTrackAnimKey, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_AddTrackAnimKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::AddTrackAnimKey, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SaveTrackAnimToFile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SaveTrackAnimToFile, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LoadTrackAnimFromFile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LoadTrackAnimFromFile, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetTrackAnimTimeSpin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTrackAnimTimeSpin, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetTrackAnimTimeSpin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetTrackAnimTimeSpin, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_SetTargetDebugInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTargetDebugInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ShowProfile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ShowProfile, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ChangeVehicle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ChangeVehicle, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ChangeESCVehicle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ChangeESCVehicle, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ChangeUIVehicleCamera(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ChangeUIVehicleCamera, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_DebugCharacterAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::DebugCharacterAvatar, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_DebugBossDetailCamera(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::DebugBossDetailCamera, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ChangeVehicleWeapon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ChangeVehicleWeapon, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SendToDebugConsole(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SendToDebugConsole, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LogError(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LogError, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SaveFbx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SaveFbx, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_PlayCutScene(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::PlayCutScene, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_PauseCutScene(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::PauseCutScene, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_StopCutScene(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::StopCutScene, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadSkyDome(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadSkyDome, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetUIVisibility(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetUIVisibility, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetUIDebugMode(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetUIDebugMode, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetActorUpdateThread(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetActorUpdateThread, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetBackPackTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetBackPackTypeID, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_FindOwerType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::FindOwerType, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_GetAniName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetAniName, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_SendDebugCommandToGameServer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SendDebugCommandToGameServer, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_TestEffentForRepeat(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::TestEffentForRepeat, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadUIScript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadUIScript, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadLuaFile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadLuaFile, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadCSV(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadCSV, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadSkillScript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadSkillScript, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetAllUIImgAllocSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetAllUIImgAllocSize, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_SetCurrentLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetCurrentLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ChangeCurrentLocation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ChangeCurrentLocation, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetCurrentLocationDirectly(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetCurrentLocationDirectly, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_AcceptTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::AcceptTask, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_FinishTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::FinishTask, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_DeleteTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::DeleteTask, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_SaveActiveMemLog(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SaveActiveMemLog, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetTempStringDump(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetTempStringDump, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetUseLastUIRender(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetUseLastUIRender, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_Transform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::Transform, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReqActorAIInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReqActorAIInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ReloadControlScript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ReloadControlScript, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetSupremacyGfxPlayInterval(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetSupremacyGfxPlayInterval, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SignUpTeamPlatform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SignUpTeamPlatform, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LogCurrentFxList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LogCurrentFxList, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetHooking(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetHooking, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetHookingParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetHookingParam, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_ParseCommand(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::ParseCommand, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GuessCommand(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GuessCommand, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_GuessCmdFile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GuessCmdFile, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_MD5String(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::MD5String, L, 2);
		return 1;
	}
	static int bnd_SC_ClientDebugInterface_OpenMapList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::OpenMapList, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetMyPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetMyPos, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_DumpScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::DumpScore, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetACInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetACInfo, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetAllUnits(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetAllUnits, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetAllFX(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetAllFX, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_WingRot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::WingRot, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_WingXYZ(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::WingXYZ, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_WingLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::WingLevel, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetSkillDeadForce(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetSkillDeadForce, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetCameraType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetCameraType, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_FBUpdate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::FBUpdate, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LCUpdate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LCUpdate, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LCWeaponUpdate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LCWeaponUpdate, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_LCFollowLoad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::LCFollowLoad, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_AQUpdate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::AQUpdate, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetCounter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetCounter, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_SetSuiteCounter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::SetSuiteCounter, L, 2);
		return 0;
	}		
	static int bnd_SC_ClientDebugInterface_GetServerVersionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		SC_ClientDebugInterface* pkAPI = (SC_ClientDebugInterface*)binder.CheckUserType(1, "SC_ClientDebugInterface");
		Utility::LuaCall(*pkAPI, &SC_ClientDebugInterface::GetServerVersionInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_SC_ClientDebugInterface[] = {
	{"Create", bnd_LuaCreate_SC_ClientDebugInterface},
	{"SetGrassRenderingEnable", bnd_SC_ClientDebugInterface_SetGrassRenderingEnable},
	{"SetShadowRenderingEnable", bnd_SC_ClientDebugInterface_SetShadowRenderingEnable},
	{"SetModelRenderingEnable", bnd_SC_ClientDebugInterface_SetModelRenderingEnable},
	{"SetWaterRenderingEnable", bnd_SC_ClientDebugInterface_SetWaterRenderingEnable},
	{"SetSceneFxRenderingEnable", bnd_SC_ClientDebugInterface_SetSceneFxRenderingEnable},
	{"SetTerrainRenderingEnable", bnd_SC_ClientDebugInterface_SetTerrainRenderingEnable},
	{"SetActorRenderingEnable", bnd_SC_ClientDebugInterface_SetActorRenderingEnable},
	{"SetFogEnable", bnd_SC_ClientDebugInterface_SetFogEnable},
	{"SetPathFindingEnable", bnd_SC_ClientDebugInterface_SetPathFindingEnable},
	{"SetStatEnable", bnd_SC_ClientDebugInterface_SetStatEnable},
	{"SetCharacterUpdateEnable", bnd_SC_ClientDebugInterface_SetCharacterUpdateEnable},
	{"SetFreeCameraModeEnalbe", bnd_SC_ClientDebugInterface_SetFreeCameraModeEnalbe},
	{"SetTianlongCameraEnable", bnd_SC_ClientDebugInterface_SetTianlongCameraEnable},
	{"GetTianlongCameraEnable", bnd_SC_ClientDebugInterface_GetTianlongCameraEnable},
	{"SetTrackAnimTrackKey", bnd_SC_ClientDebugInterface_SetTrackAnimTrackKey},
	{"GetTrackAnimTrackKeyCount", bnd_SC_ClientDebugInterface_GetTrackAnimTrackKeyCount},
	{"ModifyTrackAnimKey", bnd_SC_ClientDebugInterface_ModifyTrackAnimKey},
	{"RemoveTrackAnimKey", bnd_SC_ClientDebugInterface_RemoveTrackAnimKey},
	{"AddTrackAnimKey", bnd_SC_ClientDebugInterface_AddTrackAnimKey},
	{"SaveTrackAnimToFile", bnd_SC_ClientDebugInterface_SaveTrackAnimToFile},
	{"LoadTrackAnimFromFile", bnd_SC_ClientDebugInterface_LoadTrackAnimFromFile},
	{"SetTrackAnimTimeSpin", bnd_SC_ClientDebugInterface_SetTrackAnimTimeSpin},
	{"GetTrackAnimTimeSpin", bnd_SC_ClientDebugInterface_GetTrackAnimTimeSpin},
	{"SetTargetDebugInfo", bnd_SC_ClientDebugInterface_SetTargetDebugInfo},
	{"ShowProfile", bnd_SC_ClientDebugInterface_ShowProfile},
	{"ChangeVehicle", bnd_SC_ClientDebugInterface_ChangeVehicle},
	{"ChangeESCVehicle", bnd_SC_ClientDebugInterface_ChangeESCVehicle},
	{"ChangeUIVehicleCamera", bnd_SC_ClientDebugInterface_ChangeUIVehicleCamera},
	{"DebugCharacterAvatar", bnd_SC_ClientDebugInterface_DebugCharacterAvatar},
	{"DebugBossDetailCamera", bnd_SC_ClientDebugInterface_DebugBossDetailCamera},
	{"ChangeVehicleWeapon", bnd_SC_ClientDebugInterface_ChangeVehicleWeapon},
	{"SendToDebugConsole", bnd_SC_ClientDebugInterface_SendToDebugConsole},
	{"LogError", bnd_SC_ClientDebugInterface_LogError},
	{"SaveFbx", bnd_SC_ClientDebugInterface_SaveFbx},
	{"PlayCutScene", bnd_SC_ClientDebugInterface_PlayCutScene},
	{"PauseCutScene", bnd_SC_ClientDebugInterface_PauseCutScene},
	{"StopCutScene", bnd_SC_ClientDebugInterface_StopCutScene},
	{"ReloadSkyDome", bnd_SC_ClientDebugInterface_ReloadSkyDome},
	{"SetUIVisibility", bnd_SC_ClientDebugInterface_SetUIVisibility},
	{"SetUIDebugMode", bnd_SC_ClientDebugInterface_SetUIDebugMode},
	{"SetActorUpdateThread", bnd_SC_ClientDebugInterface_SetActorUpdateThread},
	{"GetBackPackTypeID", bnd_SC_ClientDebugInterface_GetBackPackTypeID},
	{"FindOwerType", bnd_SC_ClientDebugInterface_FindOwerType},
	{"GetAniName", bnd_SC_ClientDebugInterface_GetAniName},
	{"SendDebugCommandToGameServer", bnd_SC_ClientDebugInterface_SendDebugCommandToGameServer},
	{"TestEffentForRepeat", bnd_SC_ClientDebugInterface_TestEffentForRepeat},
	{"ReloadUIScript", bnd_SC_ClientDebugInterface_ReloadUIScript},
	{"ReloadLuaFile", bnd_SC_ClientDebugInterface_ReloadLuaFile},
	{"ReloadCSV", bnd_SC_ClientDebugInterface_ReloadCSV},
	{"ReloadSkillScript", bnd_SC_ClientDebugInterface_ReloadSkillScript},
	{"GetAllUIImgAllocSize", bnd_SC_ClientDebugInterface_GetAllUIImgAllocSize},
	{"SetCurrentLocation", bnd_SC_ClientDebugInterface_SetCurrentLocation},
	{"ChangeCurrentLocation", bnd_SC_ClientDebugInterface_ChangeCurrentLocation},
	{"SetCurrentLocationDirectly", bnd_SC_ClientDebugInterface_SetCurrentLocationDirectly},
	{"AcceptTask", bnd_SC_ClientDebugInterface_AcceptTask},
	{"FinishTask", bnd_SC_ClientDebugInterface_FinishTask},
	{"DeleteTask", bnd_SC_ClientDebugInterface_DeleteTask},
	{"SaveActiveMemLog", bnd_SC_ClientDebugInterface_SaveActiveMemLog},
	{"SetTempStringDump", bnd_SC_ClientDebugInterface_SetTempStringDump},
	{"SetUseLastUIRender", bnd_SC_ClientDebugInterface_SetUseLastUIRender},
	{"Transform", bnd_SC_ClientDebugInterface_Transform},
	{"ReqActorAIInfo", bnd_SC_ClientDebugInterface_ReqActorAIInfo},
	{"ReloadControlScript", bnd_SC_ClientDebugInterface_ReloadControlScript},
	{"SetSupremacyGfxPlayInterval", bnd_SC_ClientDebugInterface_SetSupremacyGfxPlayInterval},
	{"SignUpTeamPlatform", bnd_SC_ClientDebugInterface_SignUpTeamPlatform},
	{"LogCurrentFxList", bnd_SC_ClientDebugInterface_LogCurrentFxList},
	{"SetHooking", bnd_SC_ClientDebugInterface_SetHooking},
	{"SetHookingParam", bnd_SC_ClientDebugInterface_SetHookingParam},
	{"ParseCommand", bnd_SC_ClientDebugInterface_ParseCommand},
	{"GuessCommand", bnd_SC_ClientDebugInterface_GuessCommand},
	{"GuessCmdFile", bnd_SC_ClientDebugInterface_GuessCmdFile},
	{"MD5String", bnd_SC_ClientDebugInterface_MD5String},
	{"OpenMapList", bnd_SC_ClientDebugInterface_OpenMapList},
	{"GetMyPos", bnd_SC_ClientDebugInterface_GetMyPos},
	{"DumpScore", bnd_SC_ClientDebugInterface_DumpScore},
	{"GetACInfo", bnd_SC_ClientDebugInterface_GetACInfo},
	{"GetAllUnits", bnd_SC_ClientDebugInterface_GetAllUnits},
	{"GetAllFX", bnd_SC_ClientDebugInterface_GetAllFX},
	{"WingRot", bnd_SC_ClientDebugInterface_WingRot},
	{"WingXYZ", bnd_SC_ClientDebugInterface_WingXYZ},
	{"WingLevel", bnd_SC_ClientDebugInterface_WingLevel},
	{"SetSkillDeadForce", bnd_SC_ClientDebugInterface_SetSkillDeadForce},
	{"SetCameraType", bnd_SC_ClientDebugInterface_SetCameraType},
	{"FBUpdate", bnd_SC_ClientDebugInterface_FBUpdate},
	{"LCUpdate", bnd_SC_ClientDebugInterface_LCUpdate},
	{"LCWeaponUpdate", bnd_SC_ClientDebugInterface_LCWeaponUpdate},
	{"LCFollowLoad", bnd_SC_ClientDebugInterface_LCFollowLoad},
	{"AQUpdate", bnd_SC_ClientDebugInterface_AQUpdate},
	{"SetCounter", bnd_SC_ClientDebugInterface_SetCounter},
	{"SetSuiteCounter", bnd_SC_ClientDebugInterface_SetSuiteCounter},
	{"GetServerVersionInfo", bnd_SC_ClientDebugInterface_GetServerVersionInfo},
	{NULL, NULL}
	};
	static int luaopen_SC_ClientDebugInterface(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("SC_ClientDebugInterface", 0, lib_SC_ClientDebugInterface, bnd_LuaDestroy_SC_ClientDebugInterface);
		return 1;
	}
	///////////////////////////////////////////////
	////////PF_Path Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_PF_Path(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Path::PF_Path* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "PF_Path");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_PF_Path(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Path::PF_Path* h = (Path::PF_Path*) binder.CheckUserType(1, "PF_Path");
		binder.CheckUserType(1, "PF_Path");
		return 0;
	}
	static int bnd_PF_Path_Clear(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Path::PF_Path* pkAPI = (Path::PF_Path*)binder.CheckUserType(1, "PF_Path");
		Utility::LuaCall(*pkAPI, &Path::PF_Path::Clear, L, 2);
		return 0;
	}		
	static int bnd_PF_Path_AddPathForLua(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Path::PF_Path* pkAPI = (Path::PF_Path*)binder.CheckUserType(1, "PF_Path");
		Utility::LuaCall(*pkAPI, &Path::PF_Path::AddPathForLua, L, 2);
		return 0;
	}		
	static int bnd_PF_Path_GetMoveStep(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Path::PF_Path* pkAPI = (Path::PF_Path*)binder.CheckUserType(1, "PF_Path");
		Utility::LuaCall(*pkAPI, &Path::PF_Path::GetMoveStep, L, 2);
		return 1;
	}
	static const luaL_reg lib_PF_Path[] = {
	{"Create", bnd_LuaCreate_PF_Path},
	{"Clear", bnd_PF_Path_Clear},
	{"AddPathForLua", bnd_PF_Path_AddPathForLua},
	{"GetMoveStep", bnd_PF_Path_GetMoveStep},
	{NULL, NULL}
	};
	static int luaopen_PF_Path(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("PF_Path", 0, lib_PF_Path, bnd_LuaDestroy_PF_Path);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillInfoEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillInfoEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillInfoEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillInfoEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SkillInfoEntry* h = (GameLogic::LC_SkillInfoEntry*) binder.CheckUserType(1, "LC_SkillInfoEntry");
		binder.CheckUserType(1, "LC_SkillInfoEntry");
		return 0;
	}
	static int bnd_LC_SkillInfoEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillName, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetIconPath(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetIconPath, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillDescription(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillDescription, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillAttri1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillAttri1, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillAttri2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillAttri2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetUseResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetUseResult, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetUseResult2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetUseResult2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillBook(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillBook, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetActorLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetActorLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetActorStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetActorStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSP, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetMoney, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetItem, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetTopLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetTopLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetPosNegType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetPosNegType, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetRangeType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetRangeType, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetMinExecuteDistance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetMinExecuteDistance, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetMaxExecuteDistance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetMaxExecuteDistance, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetExecuteTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetExecuteTime, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetCoolDownTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetCoolDownTime, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetMPValueCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetMPValueCost, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetNeedItems(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetNeedItems, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetCategory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetCategory, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetCategory2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetCategory2, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetIsLearned(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetIsLearned, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetConstParameter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetConstParameter, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetUpRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetUpRate, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetVideoName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetVideoName, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSkillBookID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSkillBookID, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetPreTask(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetPreTask, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetIsBreakThrough(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetIsBreakThrough, L, 2);
		return 1;
	}
	static int bnd_LC_SkillInfoEntry_GetSubordinate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SkillInfoEntry* pkAPI = (GameLogic::LC_SkillInfoEntry*)binder.CheckUserType(1, "LC_SkillInfoEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SkillInfoEntry::GetSubordinate, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillInfoEntry[] = {
	{"Create", bnd_LuaCreate_LC_SkillInfoEntry},
	{"GetTypeID", bnd_LC_SkillInfoEntry_GetTypeID},
	{"GetSkillName", bnd_LC_SkillInfoEntry_GetSkillName},
	{"GetIconPath", bnd_LC_SkillInfoEntry_GetIconPath},
	{"GetSkillDescription", bnd_LC_SkillInfoEntry_GetSkillDescription},
	{"GetSkillAttri1", bnd_LC_SkillInfoEntry_GetSkillAttri1},
	{"GetSkillAttri2", bnd_LC_SkillInfoEntry_GetSkillAttri2},
	{"GetUseResult", bnd_LC_SkillInfoEntry_GetUseResult},
	{"GetUseResult2", bnd_LC_SkillInfoEntry_GetUseResult2},
	{"GetSkillBook", bnd_LC_SkillInfoEntry_GetSkillBook},
	{"GetActorLevel", bnd_LC_SkillInfoEntry_GetActorLevel},
	{"GetActorStarLevel", bnd_LC_SkillInfoEntry_GetActorStarLevel},
	{"GetSP", bnd_LC_SkillInfoEntry_GetSP},
	{"GetMoney", bnd_LC_SkillInfoEntry_GetMoney},
	{"GetItem", bnd_LC_SkillInfoEntry_GetItem},
	{"GetLevel", bnd_LC_SkillInfoEntry_GetLevel},
	{"GetTopLevel", bnd_LC_SkillInfoEntry_GetTopLevel},
	{"GetPosNegType", bnd_LC_SkillInfoEntry_GetPosNegType},
	{"GetRangeType", bnd_LC_SkillInfoEntry_GetRangeType},
	{"GetMinExecuteDistance", bnd_LC_SkillInfoEntry_GetMinExecuteDistance},
	{"GetMaxExecuteDistance", bnd_LC_SkillInfoEntry_GetMaxExecuteDistance},
	{"GetExecuteTime", bnd_LC_SkillInfoEntry_GetExecuteTime},
	{"GetCoolDownTime", bnd_LC_SkillInfoEntry_GetCoolDownTime},
	{"GetMPValueCost", bnd_LC_SkillInfoEntry_GetMPValueCost},
	{"GetNeedItems", bnd_LC_SkillInfoEntry_GetNeedItems},
	{"GetCategory", bnd_LC_SkillInfoEntry_GetCategory},
	{"GetCategory2", bnd_LC_SkillInfoEntry_GetCategory2},
	{"GetIsLearned", bnd_LC_SkillInfoEntry_GetIsLearned},
	{"GetConstParameter", bnd_LC_SkillInfoEntry_GetConstParameter},
	{"GetUpRate", bnd_LC_SkillInfoEntry_GetUpRate},
	{"GetVideoName", bnd_LC_SkillInfoEntry_GetVideoName},
	{"GetSkillBookID", bnd_LC_SkillInfoEntry_GetSkillBookID},
	{"GetStarLevel", bnd_LC_SkillInfoEntry_GetStarLevel},
	{"GetPreTask", bnd_LC_SkillInfoEntry_GetPreTask},
	{"GetIsBreakThrough", bnd_LC_SkillInfoEntry_GetIsBreakThrough},
	{"GetSubordinate", bnd_LC_SkillInfoEntry_GetSubordinate},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillInfoEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillInfoEntry", 0, lib_LC_SkillInfoEntry, bnd_LuaDestroy_LC_SkillInfoEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_PlayerFlopManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_PlayerFlopManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PlayerFlopManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_PlayerFlopManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_PlayerFlopManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_PlayerFlopManager* h = (LC_PlayerFlopManager*) binder.CheckUserType(1, "LC_PlayerFlopManager");
		binder.CheckUserType(1, "LC_PlayerFlopManager");
		return 0;
	}
	static int bnd_LC_PlayerFlopManager_GetChestDirtyFlagID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PlayerFlopManager* pkAPI = (LC_PlayerFlopManager*)binder.CheckUserType(1, "LC_PlayerFlopManager");
		Utility::LuaCall(*pkAPI, &LC_PlayerFlopManager::GetChestDirtyFlagID, L, 2);
		return 1;
	}
	static int bnd_LC_PlayerFlopManager_GetCurPlaceHolderID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_PlayerFlopManager* pkAPI = (LC_PlayerFlopManager*)binder.CheckUserType(1, "LC_PlayerFlopManager");
		Utility::LuaCall(*pkAPI, &LC_PlayerFlopManager::GetCurPlaceHolderID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_PlayerFlopManager[] = {
	{"Create", bnd_LuaCreate_LC_PlayerFlopManager},
	{"GetChestDirtyFlagID", bnd_LC_PlayerFlopManager_GetChestDirtyFlagID},
	{"GetCurPlaceHolderID", bnd_LC_PlayerFlopManager_GetCurPlaceHolderID},
	{NULL, NULL}
	};
	static int luaopen_LC_PlayerFlopManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_PlayerFlopManager", 0, lib_LC_PlayerFlopManager, bnd_LuaDestroy_LC_PlayerFlopManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////UT_GlobalSettings Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_UT_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* h = Utility::UT_GlobalSettings::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "UT_GlobalSettings");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_UT_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Utility::UT_GlobalSettings* h = (Utility::UT_GlobalSettings*) binder.CheckUserType(1, "UT_GlobalSettings");
		binder.CheckUserType(1, "UT_GlobalSettings");
		return 0;
	}
	static int bnd_UT_GlobalSettings_SetSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::SetSetting, L, 2);
		return 1;
	}
	static int bnd_UT_GlobalSettings_GetSetting(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::GetSetting, L, 2);
		return 1;
	}
	static int bnd_UT_GlobalSettings_Save(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::Save, L, 2);
		return 1;
	}
	static int bnd_UT_GlobalSettings_SaveSoundEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::SaveSoundEnable, L, 2);
		return 1;
	}
	static int bnd_UT_GlobalSettings_Cancel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::Cancel, L, 2);
		return 0;
	}		
	static int bnd_UT_GlobalSettings_Apply(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::Apply, L, 2);
		return 0;
	}		
	static int bnd_UT_GlobalSettings_RestoreDefaultProfile(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::RestoreDefaultProfile, L, 2);
		return 0;
	}		
	static int bnd_UT_GlobalSettings_SetResolution(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::SetResolution, L, 2);
		return 0;
	}		
	static int bnd_UT_GlobalSettings_GetResolutionIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::GetResolutionIndex, L, 2);
		return 1;
	}
	static int bnd_UT_GlobalSettings_GetMaxResolutionIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::UT_GlobalSettings* pkAPI = (Utility::UT_GlobalSettings*)binder.CheckUserType(1, "UT_GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::UT_GlobalSettings::GetMaxResolutionIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_UT_GlobalSettings[] = {
	{"Create", bnd_LuaCreate_UT_GlobalSettings},
	{"SetSetting", bnd_UT_GlobalSettings_SetSetting},
	{"GetSetting", bnd_UT_GlobalSettings_GetSetting},
	{"Save", bnd_UT_GlobalSettings_Save},
	{"SaveSoundEnable", bnd_UT_GlobalSettings_SaveSoundEnable},
	{"Cancel", bnd_UT_GlobalSettings_Cancel},
	{"Apply", bnd_UT_GlobalSettings_Apply},
	{"RestoreDefaultProfile", bnd_UT_GlobalSettings_RestoreDefaultProfile},
	{"SetResolution", bnd_UT_GlobalSettings_SetResolution},
	{"GetResolutionIndex", bnd_UT_GlobalSettings_GetResolutionIndex},
	{"GetMaxResolutionIndex", bnd_UT_GlobalSettings_GetMaxResolutionIndex},
	{NULL, NULL}
	};
	static int luaopen_UT_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("UT_GlobalSettings", 0, lib_UT_GlobalSettings, bnd_LuaDestroy_UT_GlobalSettings);
		return 1;
	}
	///////////////////////////////////////////////
	////////GlobalSettings Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* h = Utility::GlobalSettings::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "GlobalSettings");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//Utility::GlobalSettings* h = (Utility::GlobalSettings*) binder.CheckUserType(1, "GlobalSettings");
		binder.CheckUserType(1, "GlobalSettings");
		return 0;
	}
	static int bnd_GlobalSettings_SetnBuddyReliveId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nBuddyReliveId, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnBuddyReliveId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nBuddyReliveId);
		return 1;
	}
	static int bnd_GlobalSettings_SetnBuddyReliveCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nBuddyReliveCount, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnBuddyReliveCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nBuddyReliveCount);
		return 1;
	}
	static int bnd_GlobalSettings_SetnPlayerReliveId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nPlayerReliveId, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnPlayerReliveId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nPlayerReliveId);
		return 1;
	}
	static int bnd_GlobalSettings_SetnOpenTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nOpenTaskID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnOpenTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nOpenTaskID);
		return 1;
	}
	static int bnd_GlobalSettings_SetnNewPlayerOpenTaskID1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nNewPlayerOpenTaskID1, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnNewPlayerOpenTaskID1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nNewPlayerOpenTaskID1);
		return 1;
	}
	static int bnd_GlobalSettings_SetnNewPlayerOpenTaskID2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nNewPlayerOpenTaskID2, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnNewPlayerOpenTaskID2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nNewPlayerOpenTaskID2);
		return 1;
	}
	static int bnd_GlobalSettings_SetEquipNewReinForceExpToGoldRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->EquipNewReinForceExpToGoldRate, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetEquipNewReinForceExpToGoldRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->EquipNewReinForceExpToGoldRate);
		return 1;
	}
	static int bnd_GlobalSettings_SetiSprintSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->iSprintSkillID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetiSprintSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->iSprintSkillID);
		return 1;
	}
	static int bnd_GlobalSettings_SetnAchivementOpenLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nAchivementOpenLevel, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnAchivementOpenLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nAchivementOpenLevel);
		return 1;
	}
	static int bnd_GlobalSettings_SetnAchivementOpenTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nAchivementOpenTaskID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnAchivementOpenTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nAchivementOpenTaskID);
		return 1;
	}
	static int bnd_GlobalSettings_SetfOwnerMPResumeTimer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->fOwnerMPResumeTimer, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetfOwnerMPResumeTimer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->fOwnerMPResumeTimer);
		return 1;
	}
	static int bnd_GlobalSettings_SetiSprintMPCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->iSprintMPCost, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetiSprintMPCost(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->iSprintMPCost);
		return 1;
	}
	static int bnd_GlobalSettings_SetACTSubordinateScheduleID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->ACTSubordinateScheduleID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetACTSubordinateScheduleID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->ACTSubordinateScheduleID);
		return 1;
	}
	static int bnd_GlobalSettings_GetACTSubPlusScheduleID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetACTSubPlusScheduleID, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetnBotBonusTimerMax(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetnBotBonusTimerMax, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetnBotBonusTimerByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetnBotBonusTimerByIndex, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_SetChallengeCostTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->ChallengeCostTimes, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetChallengeCostTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->ChallengeCostTimes);
		return 1;
	}
	static int bnd_GlobalSettings_SetfAutoRespawnTimer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->fAutoRespawnTimer, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetfAutoRespawnTimer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->fAutoRespawnTimer);
		return 1;
	}
	static int bnd_GlobalSettings_SetRefreshType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->RefreshType, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetRefreshType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->RefreshType);
		return 1;
	}
	static int bnd_GlobalSettings_SetRefreshCostNumInit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->RefreshCostNumInit, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetRefreshCostNumInit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->RefreshCostNumInit);
		return 1;
	}
	static int bnd_GlobalSettings_SetRefreshCostNumPlus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->RefreshCostNumPlus, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetRefreshCostNumPlus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->RefreshCostNumPlus);
		return 1;
	}
	static int bnd_GlobalSettings_SetnKillNpcDropMaxTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->nKillNpcDropMaxTimes, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetnKillNpcDropMaxTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->nKillNpcDropMaxTimes);
		return 1;
	}
	static int bnd_GlobalSettings_SetBossJPCollectCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->BossJPCollectCount, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetBossJPCollectCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->BossJPCollectCount);
		return 1;
	}
	static int bnd_GlobalSettings_GetRuneSlotOpenLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetRuneSlotOpenLevel, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetWingEquipOpenLevelByIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetWingEquipOpenLevelByIdx, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetVehiclEquipOpenLevelByIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetVehiclEquipOpenLevelByIdx, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetDevaEyeEquipOpenLevelByIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetDevaEyeEquipOpenLevelByIdx, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetMaxEquipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetMaxEquipLevel, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_GetEquipUpgradeNeedLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetEquipUpgradeNeedLevel, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_SettopicCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->topicCount, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GettopicCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->topicCount);
		return 1;
	}
	static int bnd_GlobalSettings_SetanswerActivityStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->answerActivityStoryID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetanswerActivityStoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->answerActivityStoryID);
		return 1;
	}
	static int bnd_GlobalSettings_SetanswerReadyTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->answerReadyTime, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetanswerReadyTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->answerReadyTime);
		return 1;
	}
	static int bnd_GlobalSettings_SetanswerVaildTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->answerVaildTime, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetanswerVaildTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->answerVaildTime);
		return 1;
	}
	static int bnd_GlobalSettings_SetanswerCountDownTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->answerCountDownTime, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetanswerCountDownTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->answerCountDownTime);
		return 1;
	}
	static int bnd_GlobalSettings_GetnGMLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaCall(*pkAPI, &Utility::GlobalSettings::GetnGMLevel, L, 2);
		return 1;
	}
	static int bnd_GlobalSettings_SetFirstDayLoginRewardTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->FirstDayLoginRewardTime, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetFirstDayLoginRewardTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->FirstDayLoginRewardTime);
		return 1;
	}
	static int bnd_GlobalSettings_SetRareSubDevaEyeShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->RareSubDevaEyeShopID, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetRareSubDevaEyeShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->RareSubDevaEyeShopID);
		return 1;
	}
	static int bnd_GlobalSettings_SetBestGuildWatchTowerOwerRewardTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->BestGuildWatchTowerOwerRewardTime, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetBestGuildWatchTowerOwerRewardTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->BestGuildWatchTowerOwerRewardTime);
		return 1;
	}
	static int bnd_GlobalSettings_SetBuddyStarLevelLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaSetProperty(pkAPI->BuddyStarLevelLimit, L, 2);
		return 0;
	}
	static int bnd_GlobalSettings_GetBuddyStarLevelLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		Utility::GlobalSettings* pkAPI = (Utility::GlobalSettings*)binder.CheckUserType(1, "GlobalSettings");
		Utility::LuaPushValue(L, pkAPI->BuddyStarLevelLimit);
		return 1;
	}
	static const luaL_reg lib_GlobalSettings[] = {
	{"Create", bnd_LuaCreate_GlobalSettings},
	{"GetnBuddyReliveId", bnd_GlobalSettings_GetnBuddyReliveId},
	{"SetnBuddyReliveId", bnd_GlobalSettings_SetnBuddyReliveId},
	{"GetnBuddyReliveCount", bnd_GlobalSettings_GetnBuddyReliveCount},
	{"SetnBuddyReliveCount", bnd_GlobalSettings_SetnBuddyReliveCount},
	{"GetnPlayerReliveId", bnd_GlobalSettings_GetnPlayerReliveId},
	{"SetnPlayerReliveId", bnd_GlobalSettings_SetnPlayerReliveId},
	{"GetnOpenTaskID", bnd_GlobalSettings_GetnOpenTaskID},
	{"SetnOpenTaskID", bnd_GlobalSettings_SetnOpenTaskID},
	{"GetnNewPlayerOpenTaskID1", bnd_GlobalSettings_GetnNewPlayerOpenTaskID1},
	{"SetnNewPlayerOpenTaskID1", bnd_GlobalSettings_SetnNewPlayerOpenTaskID1},
	{"GetnNewPlayerOpenTaskID2", bnd_GlobalSettings_GetnNewPlayerOpenTaskID2},
	{"SetnNewPlayerOpenTaskID2", bnd_GlobalSettings_SetnNewPlayerOpenTaskID2},
	{"GetEquipNewReinForceExpToGoldRate", bnd_GlobalSettings_GetEquipNewReinForceExpToGoldRate},
	{"SetEquipNewReinForceExpToGoldRate", bnd_GlobalSettings_SetEquipNewReinForceExpToGoldRate},
	{"GetiSprintSkillID", bnd_GlobalSettings_GetiSprintSkillID},
	{"SetiSprintSkillID", bnd_GlobalSettings_SetiSprintSkillID},
	{"GetnAchivementOpenLevel", bnd_GlobalSettings_GetnAchivementOpenLevel},
	{"SetnAchivementOpenLevel", bnd_GlobalSettings_SetnAchivementOpenLevel},
	{"GetnAchivementOpenTaskID", bnd_GlobalSettings_GetnAchivementOpenTaskID},
	{"SetnAchivementOpenTaskID", bnd_GlobalSettings_SetnAchivementOpenTaskID},
	{"GetfOwnerMPResumeTimer", bnd_GlobalSettings_GetfOwnerMPResumeTimer},
	{"SetfOwnerMPResumeTimer", bnd_GlobalSettings_SetfOwnerMPResumeTimer},
	{"GetiSprintMPCost", bnd_GlobalSettings_GetiSprintMPCost},
	{"SetiSprintMPCost", bnd_GlobalSettings_SetiSprintMPCost},
	{"GetACTSubordinateScheduleID", bnd_GlobalSettings_GetACTSubordinateScheduleID},
	{"SetACTSubordinateScheduleID", bnd_GlobalSettings_SetACTSubordinateScheduleID},
	{"GetACTSubPlusScheduleID", bnd_GlobalSettings_GetACTSubPlusScheduleID},
	{"GetnBotBonusTimerMax", bnd_GlobalSettings_GetnBotBonusTimerMax},
	{"GetnBotBonusTimerByIndex", bnd_GlobalSettings_GetnBotBonusTimerByIndex},
	{"GetChallengeCostTimes", bnd_GlobalSettings_GetChallengeCostTimes},
	{"SetChallengeCostTimes", bnd_GlobalSettings_SetChallengeCostTimes},
	{"GetfAutoRespawnTimer", bnd_GlobalSettings_GetfAutoRespawnTimer},
	{"SetfAutoRespawnTimer", bnd_GlobalSettings_SetfAutoRespawnTimer},
	{"GetRefreshType", bnd_GlobalSettings_GetRefreshType},
	{"SetRefreshType", bnd_GlobalSettings_SetRefreshType},
	{"GetRefreshCostNumInit", bnd_GlobalSettings_GetRefreshCostNumInit},
	{"SetRefreshCostNumInit", bnd_GlobalSettings_SetRefreshCostNumInit},
	{"GetRefreshCostNumPlus", bnd_GlobalSettings_GetRefreshCostNumPlus},
	{"SetRefreshCostNumPlus", bnd_GlobalSettings_SetRefreshCostNumPlus},
	{"GetnKillNpcDropMaxTimes", bnd_GlobalSettings_GetnKillNpcDropMaxTimes},
	{"SetnKillNpcDropMaxTimes", bnd_GlobalSettings_SetnKillNpcDropMaxTimes},
	{"GetBossJPCollectCount", bnd_GlobalSettings_GetBossJPCollectCount},
	{"SetBossJPCollectCount", bnd_GlobalSettings_SetBossJPCollectCount},
	{"GetRuneSlotOpenLevel", bnd_GlobalSettings_GetRuneSlotOpenLevel},
	{"GetWingEquipOpenLevelByIdx", bnd_GlobalSettings_GetWingEquipOpenLevelByIdx},
	{"GetVehiclEquipOpenLevelByIdx", bnd_GlobalSettings_GetVehiclEquipOpenLevelByIdx},
	{"GetDevaEyeEquipOpenLevelByIdx", bnd_GlobalSettings_GetDevaEyeEquipOpenLevelByIdx},
	{"GetMaxEquipLevel", bnd_GlobalSettings_GetMaxEquipLevel},
	{"GetEquipUpgradeNeedLevel", bnd_GlobalSettings_GetEquipUpgradeNeedLevel},
	{"GettopicCount", bnd_GlobalSettings_GettopicCount},
	{"SettopicCount", bnd_GlobalSettings_SettopicCount},
	{"GetanswerActivityStoryID", bnd_GlobalSettings_GetanswerActivityStoryID},
	{"SetanswerActivityStoryID", bnd_GlobalSettings_SetanswerActivityStoryID},
	{"GetanswerReadyTime", bnd_GlobalSettings_GetanswerReadyTime},
	{"SetanswerReadyTime", bnd_GlobalSettings_SetanswerReadyTime},
	{"GetanswerVaildTime", bnd_GlobalSettings_GetanswerVaildTime},
	{"SetanswerVaildTime", bnd_GlobalSettings_SetanswerVaildTime},
	{"GetanswerCountDownTime", bnd_GlobalSettings_GetanswerCountDownTime},
	{"SetanswerCountDownTime", bnd_GlobalSettings_SetanswerCountDownTime},
	{"GetnGMLevel", bnd_GlobalSettings_GetnGMLevel},
	{"GetFirstDayLoginRewardTime", bnd_GlobalSettings_GetFirstDayLoginRewardTime},
	{"SetFirstDayLoginRewardTime", bnd_GlobalSettings_SetFirstDayLoginRewardTime},
	{"GetRareSubDevaEyeShopID", bnd_GlobalSettings_GetRareSubDevaEyeShopID},
	{"SetRareSubDevaEyeShopID", bnd_GlobalSettings_SetRareSubDevaEyeShopID},
	{"GetBestGuildWatchTowerOwerRewardTime", bnd_GlobalSettings_GetBestGuildWatchTowerOwerRewardTime},
	{"SetBestGuildWatchTowerOwerRewardTime", bnd_GlobalSettings_SetBestGuildWatchTowerOwerRewardTime},
	{"GetBuddyStarLevelLimit", bnd_GlobalSettings_GetBuddyStarLevelLimit},
	{"SetBuddyStarLevelLimit", bnd_GlobalSettings_SetBuddyStarLevelLimit},
	{NULL, NULL}
	};
	static int luaopen_GlobalSettings(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("GlobalSettings", 0, lib_GlobalSettings, bnd_LuaDestroy_GlobalSettings);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ProductionAssetEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ProductionAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ProductionAssetEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ProductionAssetEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ProductionAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ProductionAssetEntry* h = (LC_ProductionAssetEntry*) binder.CheckUserType(1, "LC_ProductionAssetEntry");
		binder.CheckUserType(1, "LC_ProductionAssetEntry");
		return 0;
	}
	static int bnd_LC_ProductionAssetEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ProductionAssetEntry* pkAPI = (LC_ProductionAssetEntry*)binder.CheckUserType(1, "LC_ProductionAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ProductionAssetEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ProductionAssetEntry_GetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ProductionAssetEntry* pkAPI = (LC_ProductionAssetEntry*)binder.CheckUserType(1, "LC_ProductionAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ProductionAssetEntry::GetTypeID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ProductionAssetEntry[] = {
	{"Create", bnd_LuaCreate_LC_ProductionAssetEntry},
	{"GetValid", bnd_LC_ProductionAssetEntry_GetValid},
	{"GetTypeID", bnd_LC_ProductionAssetEntry_GetTypeID},
	{NULL, NULL}
	};
	static int luaopen_LC_ProductionAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ProductionAssetEntry", 0, lib_LC_ProductionAssetEntry, bnd_LuaDestroy_LC_ProductionAssetEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientProduction Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientProduction* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientProduction");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientProduction* h = (LC_ClientProduction*) binder.CheckUserType(1, "LC_ClientProduction");
		binder.CheckUserType(1, "LC_ClientProduction");
		return 0;
	}
	static int bnd_LC_ClientProduction_GetProductionAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientProduction* pkAPI = (LC_ClientProduction*)binder.CheckUserType(1, "LC_ClientProduction");
		Utility::LuaCall(*pkAPI, &LC_ClientProduction::GetProductionAssetEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientProduction_GetSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientProduction* pkAPI = (LC_ClientProduction*)binder.CheckUserType(1, "LC_ClientProduction");
		Utility::LuaCall(*pkAPI, &LC_ClientProduction::GetSize, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientProduction[] = {
	{"Create", bnd_LuaCreate_LC_ClientProduction},
	{"GetProductionAssetEntry", bnd_LC_ClientProduction_GetProductionAssetEntry},
	{"GetSize", bnd_LC_ClientProduction_GetSize},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientProduction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientProduction", 0, lib_LC_ClientProduction, bnd_LuaDestroy_LC_ClientProduction);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientDialogManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientDialogManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientDialogManager* h = LC_ClientDialogManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientDialogManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientDialogManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientDialogManager* h = (LC_ClientDialogManager*) binder.CheckUserType(1, "LC_ClientDialogManager");
		binder.CheckUserType(1, "LC_ClientDialogManager");
		return 0;
	}
	static int bnd_LC_ClientDialogManager_GetNPCDialogInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientDialogManager* pkAPI = (LC_ClientDialogManager*)binder.CheckUserType(1, "LC_ClientDialogManager");
		Utility::LuaCall(*pkAPI, &LC_ClientDialogManager::GetNPCDialogInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientDialogManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientDialogManager},
	{"GetNPCDialogInfo", bnd_LC_ClientDialogManager_GetNPCDialogInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientDialogManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientDialogManager", 0, lib_LC_ClientDialogManager, bnd_LuaDestroy_LC_ClientDialogManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientDialogInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientDialogInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientDialogInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientDialogInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientDialogInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientDialogInfo* h = (LC_ClientDialogInfo*) binder.CheckUserType(1, "LC_ClientDialogInfo");
		binder.CheckUserType(1, "LC_ClientDialogInfo");
		return 0;
	}
	static int bnd_LC_ClientDialogInfo_GetDialogSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientDialogInfo* pkAPI = (LC_ClientDialogInfo*)binder.CheckUserType(1, "LC_ClientDialogInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientDialogInfo::GetDialogSet, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientDialogInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientDialogInfo},
	{"GetDialogSet", bnd_LC_ClientDialogInfo_GetDialogSet},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientDialogInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientDialogInfo", "MM_BaseObject", lib_LC_ClientDialogInfo, bnd_LuaDestroy_LC_ClientDialogInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_DialogSet Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_DialogSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogSet* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_DialogSet");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_DialogSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_DialogSet* h = (LC_DialogSet*) binder.CheckUserType(1, "LC_DialogSet");
		binder.CheckUserType(1, "LC_DialogSet");
		return 0;
	}
	static int bnd_LC_DialogSet_GetDialogNodeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogSet* pkAPI = (LC_DialogSet*)binder.CheckUserType(1, "LC_DialogSet");
		Utility::LuaCall(*pkAPI, &LC_DialogSet::GetDialogNodeData, L, 2);
		return 1;
	}
	static int bnd_LC_DialogSet_GetParamType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogSet* pkAPI = (LC_DialogSet*)binder.CheckUserType(1, "LC_DialogSet");
		Utility::LuaCall(*pkAPI, &LC_DialogSet::GetParamType, L, 2);
		return 1;
	}
	static int bnd_LC_DialogSet_GetParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogSet* pkAPI = (LC_DialogSet*)binder.CheckUserType(1, "LC_DialogSet");
		Utility::LuaCall(*pkAPI, &LC_DialogSet::GetParam, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_DialogSet[] = {
	{"Create", bnd_LuaCreate_LC_DialogSet},
	{"GetDialogNodeData", bnd_LC_DialogSet_GetDialogNodeData},
	{"GetParamType", bnd_LC_DialogSet_GetParamType},
	{"GetParam", bnd_LC_DialogSet_GetParam},
	{NULL, NULL}
	};
	static int luaopen_LC_DialogSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_DialogSet", "MM_BaseObject", lib_LC_DialogSet, bnd_LuaDestroy_LC_DialogSet);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_DialogNodeData Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_DialogNodeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_DialogNodeData");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_DialogNodeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_DialogNodeData* h = (LC_DialogNodeData*) binder.CheckUserType(1, "LC_DialogNodeData");
		binder.CheckUserType(1, "LC_DialogNodeData");
		return 0;
	}
	static int bnd_LC_DialogNodeData_GetDialogEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogEvent, L, 2);
		return 1;
	}
	static int bnd_LC_DialogNodeData_GetDialogEventParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogEventParam, L, 2);
		return 1;
	}
	static int bnd_LC_DialogNodeData_GetDialogShowLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogShowLimit, L, 2);
		return 1;
	}
	static int bnd_LC_DialogNodeData_GetDialogTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogTitle, L, 2);
		return 1;
	}
	static int bnd_LC_DialogNodeData_GetDialogContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogContent, L, 2);
		return 1;
	}
	static int bnd_LC_DialogNodeData_GetDialogSelectIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_DialogNodeData* pkAPI = (LC_DialogNodeData*)binder.CheckUserType(1, "LC_DialogNodeData");
		Utility::LuaCall(*pkAPI, &LC_DialogNodeData::GetDialogSelectIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_DialogNodeData[] = {
	{"Create", bnd_LuaCreate_LC_DialogNodeData},
	{"GetDialogEvent", bnd_LC_DialogNodeData_GetDialogEvent},
	{"GetDialogEventParam", bnd_LC_DialogNodeData_GetDialogEventParam},
	{"GetDialogShowLimit", bnd_LC_DialogNodeData_GetDialogShowLimit},
	{"GetDialogTitle", bnd_LC_DialogNodeData_GetDialogTitle},
	{"GetDialogContent", bnd_LC_DialogNodeData_GetDialogContent},
	{"GetDialogSelectIndex", bnd_LC_DialogNodeData_GetDialogSelectIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_DialogNodeData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_DialogNodeData", 0, lib_LC_DialogNodeData, bnd_LuaDestroy_LC_DialogNodeData);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientMailManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientMailManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* h = GameLogic::LC_ClientMailManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientMailManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientMailManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientMailManager* h = (GameLogic::LC_ClientMailManager*) binder.CheckUserType(1, "LC_ClientMailManager");
		binder.CheckUserType(1, "LC_ClientMailManager");
		return 0;
	}
	static int bnd_LC_ClientMailManager_RequestMailAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestMailAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestWriteMailContentCheck(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestWriteMailContentCheck, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestWriteMailPostageCheck(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestWriteMailPostageCheck, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestWriteMailExcute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestWriteMailExcute, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_RequestItemAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestItemAffix, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestAllItemAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestAllItemAffix, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestAllItemAffixByMailIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestAllItemAffixByMailIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestCashAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestCashAffix, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestUntreadMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestUntreadMail, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestUntreadMailByMailID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestUntreadMailByMailID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestOpenMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestOpenMail, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestCloseMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestCloseMail, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestAddAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestAddAffix, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_RequestDeleletAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::RequestDeleletAffix, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_GetMailAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetMailAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_SetSelectedMailIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::SetSelectedMailIndex, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_GetSelectedMailIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetSelectedMailIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_CompleteWriteMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::CompleteWriteMail, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_ClearWriteFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::ClearWriteFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_GetSendingFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetSendingFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_GetCompleteFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetCompleteFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_GetClientItemAffixInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetClientItemAffixInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_CheckReceiverName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::CheckReceiverName, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_GetMailCharge(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetMailCharge, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_SetMailHintFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::SetMailHintFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_GetMailHintFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetMailHintFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_GetMailboxFullFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetMailboxFullFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_SetIsReadingMailFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::SetIsReadingMailFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientMailManager_GetIsReadingMailFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetIsReadingMailFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMailManager_GetItemAffixCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientMailManager* pkAPI = (GameLogic::LC_ClientMailManager*)binder.CheckUserType(1, "LC_ClientMailManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientMailManager::GetItemAffixCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientMailManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientMailManager},
	{"RequestMailAsset", bnd_LC_ClientMailManager_RequestMailAsset},
	{"RequestWriteMailContentCheck", bnd_LC_ClientMailManager_RequestWriteMailContentCheck},
	{"RequestWriteMailPostageCheck", bnd_LC_ClientMailManager_RequestWriteMailPostageCheck},
	{"RequestWriteMailExcute", bnd_LC_ClientMailManager_RequestWriteMailExcute},
	{"RequestItemAffix", bnd_LC_ClientMailManager_RequestItemAffix},
	{"RequestAllItemAffix", bnd_LC_ClientMailManager_RequestAllItemAffix},
	{"RequestAllItemAffixByMailIndex", bnd_LC_ClientMailManager_RequestAllItemAffixByMailIndex},
	{"RequestCashAffix", bnd_LC_ClientMailManager_RequestCashAffix},
	{"RequestUntreadMail", bnd_LC_ClientMailManager_RequestUntreadMail},
	{"RequestUntreadMailByMailID", bnd_LC_ClientMailManager_RequestUntreadMailByMailID},
	{"RequestOpenMail", bnd_LC_ClientMailManager_RequestOpenMail},
	{"RequestCloseMail", bnd_LC_ClientMailManager_RequestCloseMail},
	{"RequestAddAffix", bnd_LC_ClientMailManager_RequestAddAffix},
	{"RequestDeleletAffix", bnd_LC_ClientMailManager_RequestDeleletAffix},
	{"GetMailAsset", bnd_LC_ClientMailManager_GetMailAsset},
	{"SetSelectedMailIndex", bnd_LC_ClientMailManager_SetSelectedMailIndex},
	{"GetSelectedMailIndex", bnd_LC_ClientMailManager_GetSelectedMailIndex},
	{"CompleteWriteMail", bnd_LC_ClientMailManager_CompleteWriteMail},
	{"ClearWriteFlag", bnd_LC_ClientMailManager_ClearWriteFlag},
	{"GetSendingFlag", bnd_LC_ClientMailManager_GetSendingFlag},
	{"GetCompleteFlag", bnd_LC_ClientMailManager_GetCompleteFlag},
	{"GetClientItemAffixInfo", bnd_LC_ClientMailManager_GetClientItemAffixInfo},
	{"CheckReceiverName", bnd_LC_ClientMailManager_CheckReceiverName},
	{"GetMailCharge", bnd_LC_ClientMailManager_GetMailCharge},
	{"SetMailHintFlag", bnd_LC_ClientMailManager_SetMailHintFlag},
	{"GetMailHintFlag", bnd_LC_ClientMailManager_GetMailHintFlag},
	{"GetMailboxFullFlag", bnd_LC_ClientMailManager_GetMailboxFullFlag},
	{"SetIsReadingMailFlag", bnd_LC_ClientMailManager_SetIsReadingMailFlag},
	{"GetIsReadingMailFlag", bnd_LC_ClientMailManager_GetIsReadingMailFlag},
	{"GetItemAffixCount", bnd_LC_ClientMailManager_GetItemAffixCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientMailManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientMailManager", 0, lib_LC_ClientMailManager, bnd_LuaDestroy_LC_ClientMailManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MailAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MailAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MailAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MailAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_MailAsset* h = (GameLogic::LC_MailAsset*) binder.CheckUserType(1, "LC_MailAsset");
		binder.CheckUserType(1, "LC_MailAsset");
		return 0;
	}
	static int bnd_LC_MailAsset_GetMailCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailAsset* pkAPI = (GameLogic::LC_MailAsset*)binder.CheckUserType(1, "LC_MailAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailAsset::GetMailCount, L, 2);
		return 1;
	}
	static int bnd_LC_MailAsset_GetMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailAsset* pkAPI = (GameLogic::LC_MailAsset*)binder.CheckUserType(1, "LC_MailAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailAsset::GetMail, L, 2);
		return 1;
	}
	static int bnd_LC_MailAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailAsset* pkAPI = (GameLogic::LC_MailAsset*)binder.CheckUserType(1, "LC_MailAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_MailAsset_GetNotReadMailCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailAsset* pkAPI = (GameLogic::LC_MailAsset*)binder.CheckUserType(1, "LC_MailAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailAsset::GetNotReadMailCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MailAsset[] = {
	{"Create", bnd_LuaCreate_LC_MailAsset},
	{"GetMailCount", bnd_LC_MailAsset_GetMailCount},
	{"GetMail", bnd_LC_MailAsset_GetMail},
	{"GetDirtyFlagRevisionID", bnd_LC_MailAsset_GetDirtyFlagRevisionID},
	{"GetNotReadMailCount", bnd_LC_MailAsset_GetNotReadMailCount},
	{NULL, NULL}
	};
	static int luaopen_LC_MailAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MailAsset", 0, lib_LC_MailAsset, bnd_LuaDestroy_LC_MailAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MailInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MailInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_MailInfo* h = (GameLogic::LC_MailInfo*) binder.CheckUserType(1, "LC_MailInfo");
		binder.CheckUserType(1, "LC_MailInfo");
		return 0;
	}
	static int bnd_LC_MailInfo_GetPayFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetPayFlag, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetReadFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetReadFlag, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetUntreadFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetUntreadFlag, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetMailID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetMailID, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetSenderCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetSenderCharID, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetReceiverCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetReceiverCharID, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetLeftDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetLeftDay, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetGold, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetSilver(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetSilver, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetCopper(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetCopper, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetMailType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetMailType, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_IsNeedDelete(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::IsNeedDelete, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_IsCanDelete(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::IsCanDelete, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetSubject(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetSubject, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetContent, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetSenderCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetSenderCharName, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetReceiverCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetReceiverCharName, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetItemAffix(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetItemAffix, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_IsFromPlayer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::IsFromPlayer, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetMailAffixType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetMailAffixType, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetAffixItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetAffixItemID, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetType, L, 2);
		return 1;
	}
	static int bnd_LC_MailInfo_GetCompleteMail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MailInfo* pkAPI = (GameLogic::LC_MailInfo*)binder.CheckUserType(1, "LC_MailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MailInfo::GetCompleteMail, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MailInfo[] = {
	{"Create", bnd_LuaCreate_LC_MailInfo},
	{"GetPayFlag", bnd_LC_MailInfo_GetPayFlag},
	{"GetReadFlag", bnd_LC_MailInfo_GetReadFlag},
	{"GetUntreadFlag", bnd_LC_MailInfo_GetUntreadFlag},
	{"GetMailID", bnd_LC_MailInfo_GetMailID},
	{"GetSenderCharID", bnd_LC_MailInfo_GetSenderCharID},
	{"GetReceiverCharID", bnd_LC_MailInfo_GetReceiverCharID},
	{"GetLeftDay", bnd_LC_MailInfo_GetLeftDay},
	{"GetGold", bnd_LC_MailInfo_GetGold},
	{"GetSilver", bnd_LC_MailInfo_GetSilver},
	{"GetCopper", bnd_LC_MailInfo_GetCopper},
	{"GetMailType", bnd_LC_MailInfo_GetMailType},
	{"IsNeedDelete", bnd_LC_MailInfo_IsNeedDelete},
	{"IsCanDelete", bnd_LC_MailInfo_IsCanDelete},
	{"GetSubject", bnd_LC_MailInfo_GetSubject},
	{"GetContent", bnd_LC_MailInfo_GetContent},
	{"GetSenderCharName", bnd_LC_MailInfo_GetSenderCharName},
	{"GetReceiverCharName", bnd_LC_MailInfo_GetReceiverCharName},
	{"GetItemAffix", bnd_LC_MailInfo_GetItemAffix},
	{"IsFromPlayer", bnd_LC_MailInfo_IsFromPlayer},
	{"GetMailAffixType", bnd_LC_MailInfo_GetMailAffixType},
	{"GetAffixItemID", bnd_LC_MailInfo_GetAffixItemID},
	{"GetType", bnd_LC_MailInfo_GetType},
	{"GetCompleteMail", bnd_LC_MailInfo_GetCompleteMail},
	{NULL, NULL}
	};
	static int luaopen_LC_MailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MailInfo", 0, lib_LC_MailInfo, bnd_LuaDestroy_LC_MailInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientItemAffixInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientItemAffixInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientItemAffixInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientItemAffixInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientItemAffixInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientItemAffixInfo* h = (GameLogic::LC_ClientItemAffixInfo*) binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		return 0;
	}
	static int bnd_LC_ClientItemAffixInfo_IsValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientItemAffixInfo* pkAPI = (GameLogic::LC_ClientItemAffixInfo*)binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientItemAffixInfo::IsValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientItemAffixInfo_GetPackType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientItemAffixInfo* pkAPI = (GameLogic::LC_ClientItemAffixInfo*)binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientItemAffixInfo::GetPackType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientItemAffixInfo_GetIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientItemAffixInfo* pkAPI = (GameLogic::LC_ClientItemAffixInfo*)binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientItemAffixInfo::GetIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientItemAffixInfo_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientItemAffixInfo* pkAPI = (GameLogic::LC_ClientItemAffixInfo*)binder.CheckUserType(1, "LC_ClientItemAffixInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientItemAffixInfo::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientItemAffixInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientItemAffixInfo},
	{"IsValid", bnd_LC_ClientItemAffixInfo_IsValid},
	{"GetPackType", bnd_LC_ClientItemAffixInfo_GetPackType},
	{"GetIndex", bnd_LC_ClientItemAffixInfo_GetIndex},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientItemAffixInfo_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientItemAffixInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientItemAffixInfo", 0, lib_LC_ClientItemAffixInfo, bnd_LuaDestroy_LC_ClientItemAffixInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientAuctionManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientAuctionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* h = GameLogic::LC_ClientAuctionManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientAuctionManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientAuctionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientAuctionManager* h = (GameLogic::LC_ClientAuctionManager*) binder.CheckUserType(1, "LC_ClientAuctionManager");
		binder.CheckUserType(1, "LC_ClientAuctionManager");
		return 0;
	}
	static int bnd_LC_ClientAuctionManager_RequestAuctionSell(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::RequestAuctionSell, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAuctionManager_RequestCancelAuction(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::RequestCancelAuction, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_RequestAuctionBuyByAuctionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::RequestAuctionBuyByAuctionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_RequestAuctionList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::RequestAuctionList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_Search(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::Search, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAuctionManager_GetAddItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAddItemInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionBuyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionBuyCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionBuyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionBuyData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_IsSellItemInBuyList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::IsSellItemInBuyList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionSellCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionSellCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionSellData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionSellData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionSearchCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionSearchCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetAuctionSearchData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetAuctionSearchData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetCategoryCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetCategoryCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetCategoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetCategoryID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetCategoryName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetCategoryName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetCategoryPic(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetCategoryPic, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetCategoryParentID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetCategoryParentID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_ReqGetReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::ReqGetReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAuctionManager_ReqOnekeyGetReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::ReqOnekeyGetReward, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientAuctionManager_IsInit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::IsInit, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_IsRewardPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::IsRewardPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetHistoryCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetHistoryCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionManager_GetHistoryStr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionManager* pkAPI = (GameLogic::LC_ClientAuctionManager*)binder.CheckUserType(1, "LC_ClientAuctionManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionManager::GetHistoryStr, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientAuctionManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientAuctionManager},
	{"RequestAuctionSell", bnd_LC_ClientAuctionManager_RequestAuctionSell},
	{"RequestCancelAuction", bnd_LC_ClientAuctionManager_RequestCancelAuction},
	{"RequestAuctionBuyByAuctionID", bnd_LC_ClientAuctionManager_RequestAuctionBuyByAuctionID},
	{"RequestAuctionList", bnd_LC_ClientAuctionManager_RequestAuctionList},
	{"Search", bnd_LC_ClientAuctionManager_Search},
	{"GetAddItemInfo", bnd_LC_ClientAuctionManager_GetAddItemInfo},
	{"GetAuctionBuyCount", bnd_LC_ClientAuctionManager_GetAuctionBuyCount},
	{"GetAuctionBuyData", bnd_LC_ClientAuctionManager_GetAuctionBuyData},
	{"IsSellItemInBuyList", bnd_LC_ClientAuctionManager_IsSellItemInBuyList},
	{"GetAuctionSellCount", bnd_LC_ClientAuctionManager_GetAuctionSellCount},
	{"GetAuctionSellData", bnd_LC_ClientAuctionManager_GetAuctionSellData},
	{"GetAuctionSearchCount", bnd_LC_ClientAuctionManager_GetAuctionSearchCount},
	{"GetAuctionSearchData", bnd_LC_ClientAuctionManager_GetAuctionSearchData},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientAuctionManager_GetDirtyFlagRevisionID},
	{"GetCategoryCount", bnd_LC_ClientAuctionManager_GetCategoryCount},
	{"GetCategoryID", bnd_LC_ClientAuctionManager_GetCategoryID},
	{"GetCategoryName", bnd_LC_ClientAuctionManager_GetCategoryName},
	{"GetCategoryPic", bnd_LC_ClientAuctionManager_GetCategoryPic},
	{"GetCategoryParentID", bnd_LC_ClientAuctionManager_GetCategoryParentID},
	{"ReqGetReward", bnd_LC_ClientAuctionManager_ReqGetReward},
	{"ReqOnekeyGetReward", bnd_LC_ClientAuctionManager_ReqOnekeyGetReward},
	{"IsInit", bnd_LC_ClientAuctionManager_IsInit},
	{"IsRewardPrompt", bnd_LC_ClientAuctionManager_IsRewardPrompt},
	{"GetHistoryCount", bnd_LC_ClientAuctionManager_GetHistoryCount},
	{"GetHistoryStr", bnd_LC_ClientAuctionManager_GetHistoryStr},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientAuctionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientAuctionManager", 0, lib_LC_ClientAuctionManager, bnd_LuaDestroy_LC_ClientAuctionManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientAddItemInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientAddItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAddItemInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientAddItemInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientAddItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientAddItemInfo* h = (GameLogic::LC_ClientAddItemInfo*) binder.CheckUserType(1, "LC_ClientAddItemInfo");
		binder.CheckUserType(1, "LC_ClientAddItemInfo");
		return 0;
	}
	static int bnd_LC_ClientAddItemInfo_IsValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAddItemInfo* pkAPI = (GameLogic::LC_ClientAddItemInfo*)binder.CheckUserType(1, "LC_ClientAddItemInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAddItemInfo::IsValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAddItemInfo_GetPackType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAddItemInfo* pkAPI = (GameLogic::LC_ClientAddItemInfo*)binder.CheckUserType(1, "LC_ClientAddItemInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAddItemInfo::GetPackType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAddItemInfo_GetIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAddItemInfo* pkAPI = (GameLogic::LC_ClientAddItemInfo*)binder.CheckUserType(1, "LC_ClientAddItemInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAddItemInfo::GetIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAddItemInfo_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAddItemInfo* pkAPI = (GameLogic::LC_ClientAddItemInfo*)binder.CheckUserType(1, "LC_ClientAddItemInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAddItemInfo::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientAddItemInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientAddItemInfo},
	{"IsValid", bnd_LC_ClientAddItemInfo_IsValid},
	{"GetPackType", bnd_LC_ClientAddItemInfo_GetPackType},
	{"GetIndex", bnd_LC_ClientAddItemInfo_GetIndex},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientAddItemInfo_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientAddItemInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientAddItemInfo", 0, lib_LC_ClientAddItemInfo, bnd_LuaDestroy_LC_ClientAddItemInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientAuctionBuyData Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientAuctionBuyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientAuctionBuyData");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientAuctionBuyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientAuctionBuyData* h = (GameLogic::LC_ClientAuctionBuyData*) binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		return 0;
	}
	static int bnd_LC_ClientAuctionBuyData_GetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* pkAPI = (GameLogic::LC_ClientAuctionBuyData*)binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionBuyData::GetEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionBuyData_GetLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* pkAPI = (GameLogic::LC_ClientAuctionBuyData*)binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionBuyData::GetLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionBuyData_GetFixedPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* pkAPI = (GameLogic::LC_ClientAuctionBuyData*)binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionBuyData::GetFixedPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionBuyData_GetCashType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* pkAPI = (GameLogic::LC_ClientAuctionBuyData*)binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionBuyData::GetCashType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionBuyData_GetStatus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionBuyData* pkAPI = (GameLogic::LC_ClientAuctionBuyData*)binder.CheckUserType(1, "LC_ClientAuctionBuyData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionBuyData::GetStatus, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientAuctionBuyData[] = {
	{"Create", bnd_LuaCreate_LC_ClientAuctionBuyData},
	{"GetEntry", bnd_LC_ClientAuctionBuyData_GetEntry},
	{"GetLeftTime", bnd_LC_ClientAuctionBuyData_GetLeftTime},
	{"GetFixedPrice", bnd_LC_ClientAuctionBuyData_GetFixedPrice},
	{"GetCashType", bnd_LC_ClientAuctionBuyData_GetCashType},
	{"GetStatus", bnd_LC_ClientAuctionBuyData_GetStatus},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientAuctionBuyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientAuctionBuyData", 0, lib_LC_ClientAuctionBuyData, bnd_LuaDestroy_LC_ClientAuctionBuyData);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientAuctionSellData Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientAuctionSellData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientAuctionSellData");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientAuctionSellData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientAuctionSellData* h = (GameLogic::LC_ClientAuctionSellData*) binder.CheckUserType(1, "LC_ClientAuctionSellData");
		binder.CheckUserType(1, "LC_ClientAuctionSellData");
		return 0;
	}
	static int bnd_LC_ClientAuctionSellData_GetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetFixedPrice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetFixedPrice, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetCashType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetCashType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetAuctionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetAuctionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientAuctionSellData_GetIsItemOwner(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientAuctionSellData* pkAPI = (GameLogic::LC_ClientAuctionSellData*)binder.CheckUserType(1, "LC_ClientAuctionSellData");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientAuctionSellData::GetIsItemOwner, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientAuctionSellData[] = {
	{"Create", bnd_LuaCreate_LC_ClientAuctionSellData},
	{"GetEntry", bnd_LC_ClientAuctionSellData_GetEntry},
	{"GetLeftTime", bnd_LC_ClientAuctionSellData_GetLeftTime},
	{"GetFixedPrice", bnd_LC_ClientAuctionSellData_GetFixedPrice},
	{"GetCashType", bnd_LC_ClientAuctionSellData_GetCashType},
	{"GetName", bnd_LC_ClientAuctionSellData_GetName},
	{"GetAuctionID", bnd_LC_ClientAuctionSellData_GetAuctionID},
	{"GetIsItemOwner", bnd_LC_ClientAuctionSellData_GetIsItemOwner},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientAuctionSellData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientAuctionSellData", 0, lib_LC_ClientAuctionSellData, bnd_LuaDestroy_LC_ClientAuctionSellData);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* h = GameLogic::LC_ClientGuildManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientGuildManager* h = (GameLogic::LC_ClientGuildManager*) binder.CheckUserType(1, "LC_ClientGuildManager");
		binder.CheckUserType(1, "LC_ClientGuildManager");
		return 0;
	}
	static int bnd_LC_ClientGuildManager_RequestGuildAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestGuildAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestCreateGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestCreateGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestApplyGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestApplyGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestQuickApplyGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestQuickApplyGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestApplyPlayerGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestApplyPlayerGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestComfirmApplyGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestComfirmApplyGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestComfirmApplyAllGuildEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestComfirmApplyAllGuildEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestForbidApply(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestForbidApply, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestClearApplyList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestClearApplyList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestAutoAddApplyList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestAutoAddApplyList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestExitGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestExitGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestModifyDeclaration(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestModifyDeclaration, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestAppoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestAppoint, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestKickMember(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestKickMember, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestDismissGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestDismissGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestInviteToGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestInviteToGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestSearchGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestSearchGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestConfirmInviteToGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestConfirmInviteToGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_GetGuildMilestone(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildMilestone, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_GetGuildSkillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildSkillInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestDonateMaterial(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestDonateMaterial, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_SetSelectedSkillIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::SetSelectedSkillIndex, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_AddDonateMaterial(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::AddDonateMaterial, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_ClearDonateMaterial(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::ClearDonateMaterial, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_GetDonateMaterialID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetDonateMaterialID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_SetDonateMaterailID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::SetDonateMaterailID, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_GetGuildSearchInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildSearchInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_GetGuildAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildAsset, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_GetPersonalInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetPersonalInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_ClearPage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::ClearPage, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_RequestUpgradeGuild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestUpgradeGuild, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_GetGuildLevelTooltip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildLevelTooltip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestGuildRankNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestGuildRankNumber, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_GetGuildMaxMember(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::GetGuildMaxMember, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildManager_RequestRecruitGuildMember(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestRecruitGuildMember, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientGuildManager_RequestGetGuildReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildManager* pkAPI = (GameLogic::LC_ClientGuildManager*)binder.CheckUserType(1, "LC_ClientGuildManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildManager::RequestGetGuildReward, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ClientGuildManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildManager},
	{"RequestGuildAsset", bnd_LC_ClientGuildManager_RequestGuildAsset},
	{"RequestCreateGuild", bnd_LC_ClientGuildManager_RequestCreateGuild},
	{"RequestApplyGuild", bnd_LC_ClientGuildManager_RequestApplyGuild},
	{"RequestQuickApplyGuild", bnd_LC_ClientGuildManager_RequestQuickApplyGuild},
	{"RequestApplyPlayerGuild", bnd_LC_ClientGuildManager_RequestApplyPlayerGuild},
	{"RequestComfirmApplyGuild", bnd_LC_ClientGuildManager_RequestComfirmApplyGuild},
	{"RequestComfirmApplyAllGuildEntry", bnd_LC_ClientGuildManager_RequestComfirmApplyAllGuildEntry},
	{"RequestForbidApply", bnd_LC_ClientGuildManager_RequestForbidApply},
	{"RequestClearApplyList", bnd_LC_ClientGuildManager_RequestClearApplyList},
	{"RequestAutoAddApplyList", bnd_LC_ClientGuildManager_RequestAutoAddApplyList},
	{"RequestExitGuild", bnd_LC_ClientGuildManager_RequestExitGuild},
	{"RequestModifyDeclaration", bnd_LC_ClientGuildManager_RequestModifyDeclaration},
	{"RequestAppoint", bnd_LC_ClientGuildManager_RequestAppoint},
	{"RequestKickMember", bnd_LC_ClientGuildManager_RequestKickMember},
	{"RequestDismissGuild", bnd_LC_ClientGuildManager_RequestDismissGuild},
	{"RequestInviteToGuild", bnd_LC_ClientGuildManager_RequestInviteToGuild},
	{"RequestSearchGuild", bnd_LC_ClientGuildManager_RequestSearchGuild},
	{"RequestConfirmInviteToGuild", bnd_LC_ClientGuildManager_RequestConfirmInviteToGuild},
	{"GetGuildMilestone", bnd_LC_ClientGuildManager_GetGuildMilestone},
	{"GetGuildSkillInfo", bnd_LC_ClientGuildManager_GetGuildSkillInfo},
	{"RequestDonateMaterial", bnd_LC_ClientGuildManager_RequestDonateMaterial},
	{"SetSelectedSkillIndex", bnd_LC_ClientGuildManager_SetSelectedSkillIndex},
	{"AddDonateMaterial", bnd_LC_ClientGuildManager_AddDonateMaterial},
	{"ClearDonateMaterial", bnd_LC_ClientGuildManager_ClearDonateMaterial},
	{"GetDonateMaterialID", bnd_LC_ClientGuildManager_GetDonateMaterialID},
	{"SetDonateMaterailID", bnd_LC_ClientGuildManager_SetDonateMaterailID},
	{"GetGuildSearchInfo", bnd_LC_ClientGuildManager_GetGuildSearchInfo},
	{"GetGuildAsset", bnd_LC_ClientGuildManager_GetGuildAsset},
	{"GetPersonalInfo", bnd_LC_ClientGuildManager_GetPersonalInfo},
	{"ClearPage", bnd_LC_ClientGuildManager_ClearPage},
	{"RequestUpgradeGuild", bnd_LC_ClientGuildManager_RequestUpgradeGuild},
	{"GetGuildLevelTooltip", bnd_LC_ClientGuildManager_GetGuildLevelTooltip},
	{"RequestGuildRankNumber", bnd_LC_ClientGuildManager_RequestGuildRankNumber},
	{"GetGuildMaxMember", bnd_LC_ClientGuildManager_GetGuildMaxMember},
	{"RequestRecruitGuildMember", bnd_LC_ClientGuildManager_RequestRecruitGuildMember},
	{"RequestGetGuildReward", bnd_LC_ClientGuildManager_RequestGetGuildReward},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildManager", 0, lib_LC_ClientGuildManager, bnd_LuaDestroy_LC_ClientGuildManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildAsset* h = (GameLogic::LC_GuildAsset*) binder.CheckUserType(1, "LC_GuildAsset");
		binder.CheckUserType(1, "LC_GuildAsset");
		return 0;
	}
	static int bnd_LC_GuildAsset_GetGuildInfoPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildAsset* pkAPI = (GameLogic::LC_GuildAsset*)binder.CheckUserType(1, "LC_GuildAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildAsset::GetGuildInfoPtr, L, 2);
		return 1;
	}
	static int bnd_LC_GuildAsset_GetGuildMemberInfoPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildAsset* pkAPI = (GameLogic::LC_GuildAsset*)binder.CheckUserType(1, "LC_GuildAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildAsset::GetGuildMemberInfoPtr, L, 2);
		return 1;
	}
	static int bnd_LC_GuildAsset_GetGuildApplyInfoPtr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildAsset* pkAPI = (GameLogic::LC_GuildAsset*)binder.CheckUserType(1, "LC_GuildAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildAsset::GetGuildApplyInfoPtr, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildAsset[] = {
	{"Create", bnd_LuaCreate_LC_GuildAsset},
	{"GetGuildInfoPtr", bnd_LC_GuildAsset_GetGuildInfoPtr},
	{"GetGuildMemberInfoPtr", bnd_LC_GuildAsset_GetGuildMemberInfoPtr},
	{"GetGuildApplyInfoPtr", bnd_LC_GuildAsset_GetGuildApplyInfoPtr},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildAsset", 0, lib_LC_GuildAsset, bnd_LuaDestroy_LC_GuildAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildInfo* h = (GameLogic::LC_GuildInfo*) binder.CheckUserType(1, "LC_GuildInfo");
		binder.CheckUserType(1, "LC_GuildInfo");
		return 0;
	}
	static int bnd_LC_GuildInfo_GetGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetGuildRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetGuildRank, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetCreateTimeString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetCreateTimeString, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetCashString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetCashString, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetHistoryInfoString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetHistoryInfoString, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetDeclaration(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetDeclaration, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetForbidApply(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetForbidApply, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetGuildAssetTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetGuildAssetTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetGuildAssetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetGuildAssetCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetGuildAssetCountByTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetGuildAssetCountByTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetValidAssetSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetValidAssetSize, L, 2);
		return 1;
	}
	static int bnd_LC_GuildInfo_GetUpgradeInfoString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildInfo* pkAPI = (GameLogic::LC_GuildInfo*)binder.CheckUserType(1, "LC_GuildInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildInfo::GetUpgradeInfoString, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildInfo[] = {
	{"Create", bnd_LuaCreate_LC_GuildInfo},
	{"GetGuildID", bnd_LC_GuildInfo_GetGuildID},
	{"GetGuildRank", bnd_LC_GuildInfo_GetGuildRank},
	{"GetName", bnd_LC_GuildInfo_GetName},
	{"GetCreateTimeString", bnd_LC_GuildInfo_GetCreateTimeString},
	{"GetCashString", bnd_LC_GuildInfo_GetCashString},
	{"GetHistoryInfoString", bnd_LC_GuildInfo_GetHistoryInfoString},
	{"GetDeclaration", bnd_LC_GuildInfo_GetDeclaration},
	{"GetLevel", bnd_LC_GuildInfo_GetLevel},
	{"GetForbidApply", bnd_LC_GuildInfo_GetForbidApply},
	{"GetDirtyFlagRevisionID", bnd_LC_GuildInfo_GetDirtyFlagRevisionID},
	{"GetGuildAssetTypeID", bnd_LC_GuildInfo_GetGuildAssetTypeID},
	{"GetGuildAssetCount", bnd_LC_GuildInfo_GetGuildAssetCount},
	{"GetGuildAssetCountByTypeID", bnd_LC_GuildInfo_GetGuildAssetCountByTypeID},
	{"GetValidAssetSize", bnd_LC_GuildInfo_GetValidAssetSize},
	{"GetUpgradeInfoString", bnd_LC_GuildInfo_GetUpgradeInfoString},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildInfo", 0, lib_LC_GuildInfo, bnd_LuaDestroy_LC_GuildInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildMilestoneStruct Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildMilestoneStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildMilestoneStruct");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildMilestoneStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientGuildMilestoneStruct* h = (GameLogic::LC_ClientGuildMilestoneStruct*) binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		return 0;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetMilestoneName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetMilestoneName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetMilestoneDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetMilestoneDesc, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetMilestoneTargetDesc(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetMilestoneTargetDesc, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetTargetNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetTargetNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetReward0(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetReward0, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetReward1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetReward1, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetReward2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetReward2, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum0(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetNeedTargetNum0, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetNeedTargetNum1, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetNeedTargetNum2, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildMilestoneStruct_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildMilestoneStruct* pkAPI = (GameLogic::LC_ClientGuildMilestoneStruct*)binder.CheckUserType(1, "LC_ClientGuildMilestoneStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildMilestoneStruct::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuildMilestoneStruct[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildMilestoneStruct},
	{"GetMilestoneName", bnd_LC_ClientGuildMilestoneStruct_GetMilestoneName},
	{"GetMilestoneDesc", bnd_LC_ClientGuildMilestoneStruct_GetMilestoneDesc},
	{"GetMilestoneTargetDesc", bnd_LC_ClientGuildMilestoneStruct_GetMilestoneTargetDesc},
	{"GetTargetNum", bnd_LC_ClientGuildMilestoneStruct_GetTargetNum},
	{"GetReward0", bnd_LC_ClientGuildMilestoneStruct_GetReward0},
	{"GetReward1", bnd_LC_ClientGuildMilestoneStruct_GetReward1},
	{"GetReward2", bnd_LC_ClientGuildMilestoneStruct_GetReward2},
	{"GetNeedTargetNum0", bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum0},
	{"GetNeedTargetNum1", bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum1},
	{"GetNeedTargetNum2", bnd_LC_ClientGuildMilestoneStruct_GetNeedTargetNum2},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientGuildMilestoneStruct_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildMilestoneStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildMilestoneStruct", 0, lib_LC_ClientGuildMilestoneStruct, bnd_LuaDestroy_LC_ClientGuildMilestoneStruct);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildSkillInfoStruct Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildSkillInfoStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSkillInfoStruct* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildSkillInfoStruct");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildSkillInfoStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientGuildSkillInfoStruct* h = (GameLogic::LC_ClientGuildSkillInfoStruct*) binder.CheckUserType(1, "LC_ClientGuildSkillInfoStruct");
		binder.CheckUserType(1, "LC_ClientGuildSkillInfoStruct");
		return 0;
	}
	static int bnd_LC_ClientGuildSkillInfoStruct_GetSingleSkillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSkillInfoStruct* pkAPI = (GameLogic::LC_ClientGuildSkillInfoStruct*)binder.CheckUserType(1, "LC_ClientGuildSkillInfoStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSkillInfoStruct::GetSingleSkillInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSkillInfoStruct_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSkillInfoStruct* pkAPI = (GameLogic::LC_ClientGuildSkillInfoStruct*)binder.CheckUserType(1, "LC_ClientGuildSkillInfoStruct");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSkillInfoStruct::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuildSkillInfoStruct[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildSkillInfoStruct},
	{"GetSingleSkillInfo", bnd_LC_ClientGuildSkillInfoStruct_GetSingleSkillInfo},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientGuildSkillInfoStruct_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildSkillInfoStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildSkillInfoStruct", 0, lib_LC_ClientGuildSkillInfoStruct, bnd_LuaDestroy_LC_ClientGuildSkillInfoStruct);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildSingleSkill Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildSingleSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildSingleSkill");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildSingleSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientGuildSingleSkill* h = (GameLogic::LC_ClientGuildSingleSkill*) binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		return 0;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetCanResearchFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetCanResearchFlag, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetSkillID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetSkillID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetSkillExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetSkillExp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetMaxSkillExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetMaxSkillExp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildSingleSkill_GetSkillPos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildSingleSkill* pkAPI = (GameLogic::LC_ClientGuildSingleSkill*)binder.CheckUserType(1, "LC_ClientGuildSingleSkill");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildSingleSkill::GetSkillPos, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuildSingleSkill[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildSingleSkill},
	{"GetValid", bnd_LC_ClientGuildSingleSkill_GetValid},
	{"GetCanResearchFlag", bnd_LC_ClientGuildSingleSkill_GetCanResearchFlag},
	{"GetSkillID", bnd_LC_ClientGuildSingleSkill_GetSkillID},
	{"GetSkillExp", bnd_LC_ClientGuildSingleSkill_GetSkillExp},
	{"GetMaxSkillExp", bnd_LC_ClientGuildSingleSkill_GetMaxSkillExp},
	{"GetSkillPos", bnd_LC_ClientGuildSingleSkill_GetSkillPos},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildSingleSkill(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildSingleSkill", 0, lib_LC_ClientGuildSingleSkill, bnd_LuaDestroy_LC_ClientGuildSingleSkill);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildMemberEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildMemberEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildMemberEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildMemberEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildMemberEntry* h = (GameLogic::LC_GuildMemberEntry*) binder.CheckUserType(1, "LC_GuildMemberEntry");
		binder.CheckUserType(1, "LC_GuildMemberEntry");
		return 0;
	}
	static int bnd_LC_GuildMemberEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetOnline(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetOnline, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetOfficialPosition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetOfficialPosition, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetCareerType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetCareerType, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetJoinTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetJoinTime, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetBattleScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetBattleScore, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetLastLoginTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetLastLoginTime, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetGoodCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetGoodCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetArenaRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetArenaRank, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberEntry_GetTotalGuildMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberEntry* pkAPI = (GameLogic::LC_GuildMemberEntry*)binder.CheckUserType(1, "LC_GuildMemberEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberEntry::GetTotalGuildMoney, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildMemberEntry[] = {
	{"Create", bnd_LuaCreate_LC_GuildMemberEntry},
	{"GetValid", bnd_LC_GuildMemberEntry_GetValid},
	{"GetOnline", bnd_LC_GuildMemberEntry_GetOnline},
	{"GetOfficialPosition", bnd_LC_GuildMemberEntry_GetOfficialPosition},
	{"GetCareerType", bnd_LC_GuildMemberEntry_GetCareerType},
	{"GetLevel", bnd_LC_GuildMemberEntry_GetLevel},
	{"GetCharID", bnd_LC_GuildMemberEntry_GetCharID},
	{"GetName", bnd_LC_GuildMemberEntry_GetName},
	{"GetJoinTime", bnd_LC_GuildMemberEntry_GetJoinTime},
	{"GetBattleScore", bnd_LC_GuildMemberEntry_GetBattleScore},
	{"GetLastLoginTime", bnd_LC_GuildMemberEntry_GetLastLoginTime},
	{"GetGoodCount", bnd_LC_GuildMemberEntry_GetGoodCount},
	{"GetArenaRank", bnd_LC_GuildMemberEntry_GetArenaRank},
	{"GetTotalGuildMoney", bnd_LC_GuildMemberEntry_GetTotalGuildMoney},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildMemberEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildMemberEntry", 0, lib_LC_GuildMemberEntry, bnd_LuaDestroy_LC_GuildMemberEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildMemberInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildMemberInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildMemberInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildMemberInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildMemberInfo* h = (GameLogic::LC_GuildMemberInfo*) binder.CheckUserType(1, "LC_GuildMemberInfo");
		binder.CheckUserType(1, "LC_GuildMemberInfo");
		return 0;
	}
	static int bnd_LC_GuildMemberInfo_GetMemberEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* pkAPI = (GameLogic::LC_GuildMemberInfo*)binder.CheckUserType(1, "LC_GuildMemberInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberInfo::GetMemberEntry, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberInfo_FindMemeberEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* pkAPI = (GameLogic::LC_GuildMemberInfo*)binder.CheckUserType(1, "LC_GuildMemberInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberInfo::FindMemeberEntry, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberInfo_GetValidMemeberCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* pkAPI = (GameLogic::LC_GuildMemberInfo*)binder.CheckUserType(1, "LC_GuildMemberInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberInfo::GetValidMemeberCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberInfo_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* pkAPI = (GameLogic::LC_GuildMemberInfo*)binder.CheckUserType(1, "LC_GuildMemberInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberInfo::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildMemberInfo_GetMasterName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildMemberInfo* pkAPI = (GameLogic::LC_GuildMemberInfo*)binder.CheckUserType(1, "LC_GuildMemberInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildMemberInfo::GetMasterName, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildMemberInfo[] = {
	{"Create", bnd_LuaCreate_LC_GuildMemberInfo},
	{"GetMemberEntry", bnd_LC_GuildMemberInfo_GetMemberEntry},
	{"FindMemeberEntry", bnd_LC_GuildMemberInfo_FindMemeberEntry},
	{"GetValidMemeberCount", bnd_LC_GuildMemberInfo_GetValidMemeberCount},
	{"GetDirtyFlagRevisionID", bnd_LC_GuildMemberInfo_GetDirtyFlagRevisionID},
	{"GetMasterName", bnd_LC_GuildMemberInfo_GetMasterName},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildMemberInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildMemberInfo", 0, lib_LC_GuildMemberInfo, bnd_LuaDestroy_LC_GuildMemberInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildApplyEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildApplyEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildApplyEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildApplyEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildApplyEntry* h = (GameLogic::LC_GuildApplyEntry*) binder.CheckUserType(1, "LC_GuildApplyEntry");
		binder.CheckUserType(1, "LC_GuildApplyEntry");
		return 0;
	}
	static int bnd_LC_GuildApplyEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetWeaponType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetWeaponType, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetCareerType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetCareerType, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetApplyTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetApplyTime, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyEntry_GetBattleScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyEntry* pkAPI = (GameLogic::LC_GuildApplyEntry*)binder.CheckUserType(1, "LC_GuildApplyEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyEntry::GetBattleScore, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildApplyEntry[] = {
	{"Create", bnd_LuaCreate_LC_GuildApplyEntry},
	{"GetValid", bnd_LC_GuildApplyEntry_GetValid},
	{"GetName", bnd_LC_GuildApplyEntry_GetName},
	{"GetLevel", bnd_LC_GuildApplyEntry_GetLevel},
	{"GetCharType", bnd_LC_GuildApplyEntry_GetCharType},
	{"GetCharID", bnd_LC_GuildApplyEntry_GetCharID},
	{"GetWeaponType", bnd_LC_GuildApplyEntry_GetWeaponType},
	{"GetCareerType", bnd_LC_GuildApplyEntry_GetCareerType},
	{"GetApplyTime", bnd_LC_GuildApplyEntry_GetApplyTime},
	{"GetBattleScore", bnd_LC_GuildApplyEntry_GetBattleScore},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildApplyEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildApplyEntry", 0, lib_LC_GuildApplyEntry, bnd_LuaDestroy_LC_GuildApplyEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildApplyInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildApplyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildApplyInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildApplyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildApplyInfo* h = (GameLogic::LC_GuildApplyInfo*) binder.CheckUserType(1, "LC_GuildApplyInfo");
		binder.CheckUserType(1, "LC_GuildApplyInfo");
		return 0;
	}
	static int bnd_LC_GuildApplyInfo_GetApplyEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* pkAPI = (GameLogic::LC_GuildApplyInfo*)binder.CheckUserType(1, "LC_GuildApplyInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyInfo::GetApplyEntry, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyInfo_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* pkAPI = (GameLogic::LC_GuildApplyInfo*)binder.CheckUserType(1, "LC_GuildApplyInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyInfo::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyInfo_GetApplyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* pkAPI = (GameLogic::LC_GuildApplyInfo*)binder.CheckUserType(1, "LC_GuildApplyInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyInfo::GetApplyCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyInfo_IsAutoAdd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* pkAPI = (GameLogic::LC_GuildApplyInfo*)binder.CheckUserType(1, "LC_GuildApplyInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyInfo::IsAutoAdd, L, 2);
		return 1;
	}
	static int bnd_LC_GuildApplyInfo_SetAutoAdd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildApplyInfo* pkAPI = (GameLogic::LC_GuildApplyInfo*)binder.CheckUserType(1, "LC_GuildApplyInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildApplyInfo::SetAutoAdd, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildApplyInfo[] = {
	{"Create", bnd_LuaCreate_LC_GuildApplyInfo},
	{"GetApplyEntry", bnd_LC_GuildApplyInfo_GetApplyEntry},
	{"GetDirtyFlagRevisionID", bnd_LC_GuildApplyInfo_GetDirtyFlagRevisionID},
	{"GetApplyCount", bnd_LC_GuildApplyInfo_GetApplyCount},
	{"IsAutoAdd", bnd_LC_GuildApplyInfo_IsAutoAdd},
	{"SetAutoAdd", bnd_LC_GuildApplyInfo_SetAutoAdd},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildApplyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildApplyInfo", 0, lib_LC_GuildApplyInfo, bnd_LuaDestroy_LC_GuildApplyInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GuildSearchInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GuildSearchInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GuildSearchInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GuildSearchInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GuildSearchInfo* h = (GameLogic::LC_GuildSearchInfo*) binder.CheckUserType(1, "LC_GuildSearchInfo");
		binder.CheckUserType(1, "LC_GuildSearchInfo");
		return 0;
	}
	static int bnd_LC_GuildSearchInfo_GetGuildInfoCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetGuildInfoCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetMemberCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetMemberCount, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetHeadName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetHeadName, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetBattleScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetBattleScore, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetGuildProfitLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetGuildProfitLevel, L, 2);
		return 1;
	}
	static int bnd_LC_GuildSearchInfo_GetOfficialIdent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GuildSearchInfo* pkAPI = (GameLogic::LC_GuildSearchInfo*)binder.CheckUserType(1, "LC_GuildSearchInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GuildSearchInfo::GetOfficialIdent, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GuildSearchInfo[] = {
	{"Create", bnd_LuaCreate_LC_GuildSearchInfo},
	{"GetGuildInfoCount", bnd_LC_GuildSearchInfo_GetGuildInfoCount},
	{"GetGuildID", bnd_LC_GuildSearchInfo_GetGuildID},
	{"GetLevel", bnd_LC_GuildSearchInfo_GetLevel},
	{"GetMemberCount", bnd_LC_GuildSearchInfo_GetMemberCount},
	{"GetGuildName", bnd_LC_GuildSearchInfo_GetGuildName},
	{"GetHeadName", bnd_LC_GuildSearchInfo_GetHeadName},
	{"GetBattleScore", bnd_LC_GuildSearchInfo_GetBattleScore},
	{"GetGuildProfitLevel", bnd_LC_GuildSearchInfo_GetGuildProfitLevel},
	{"GetOfficialIdent", bnd_LC_GuildSearchInfo_GetOfficialIdent},
	{NULL, NULL}
	};
	static int luaopen_LC_GuildSearchInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GuildSearchInfo", 0, lib_LC_GuildSearchInfo, bnd_LuaDestroy_LC_GuildSearchInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TutorialEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TutorialEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TutorialEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TutorialEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TutorialEntry* h = (GameLogic::LC_TutorialEntry*) binder.CheckUserType(1, "LC_TutorialEntry");
		binder.CheckUserType(1, "LC_TutorialEntry");
		return 0;
	}
	static int bnd_LC_TutorialEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetID, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetLastStep(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetLastStep, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetNextStep(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetNextStep, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetIsRepeat(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetIsRepeat, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetPromptTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetPromptTitle, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetPromptContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetPromptContent, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetPromptType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetPromptType, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetPromptTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetPromptTime, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetUIName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetUIName, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialEntry_GetPromptIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialEntry* pkAPI = (GameLogic::LC_TutorialEntry*)binder.CheckUserType(1, "LC_TutorialEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialEntry::GetPromptIcon, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TutorialEntry[] = {
	{"Create", bnd_LuaCreate_LC_TutorialEntry},
	{"GetValid", bnd_LC_TutorialEntry_GetValid},
	{"GetID", bnd_LC_TutorialEntry_GetID},
	{"GetName", bnd_LC_TutorialEntry_GetName},
	{"GetLastStep", bnd_LC_TutorialEntry_GetLastStep},
	{"GetNextStep", bnd_LC_TutorialEntry_GetNextStep},
	{"GetIsRepeat", bnd_LC_TutorialEntry_GetIsRepeat},
	{"GetPromptTitle", bnd_LC_TutorialEntry_GetPromptTitle},
	{"GetPromptContent", bnd_LC_TutorialEntry_GetPromptContent},
	{"GetPromptType", bnd_LC_TutorialEntry_GetPromptType},
	{"GetPromptTime", bnd_LC_TutorialEntry_GetPromptTime},
	{"GetUIName", bnd_LC_TutorialEntry_GetUIName},
	{"GetPromptIcon", bnd_LC_TutorialEntry_GetPromptIcon},
	{NULL, NULL}
	};
	static int luaopen_LC_TutorialEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TutorialEntry", 0, lib_LC_TutorialEntry, bnd_LuaDestroy_LC_TutorialEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TutorialAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TutorialAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TutorialAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TutorialAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TutorialAsset* h = (GameLogic::LC_TutorialAsset*) binder.CheckUserType(1, "LC_TutorialAsset");
		binder.CheckUserType(1, "LC_TutorialAsset");
		return 0;
	}
	static int bnd_LC_TutorialAsset_GetTutorialEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetTutorialEntry, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_GetTutorialEntryByName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetTutorialEntryByName, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_GetBitVec(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetBitVec, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_SetBitVec(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::SetBitVec, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_GetDisplayFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetDisplayFlag, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_SetDisplayFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::SetDisplayFlag, L, 2);
		return 0;
	}		
	static int bnd_LC_TutorialAsset_GetTutorialInfoString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetTutorialInfoString, L, 2);
		return 1;
	}
	static int bnd_LC_TutorialAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TutorialAsset* pkAPI = (GameLogic::LC_TutorialAsset*)binder.CheckUserType(1, "LC_TutorialAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TutorialAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TutorialAsset[] = {
	{"Create", bnd_LuaCreate_LC_TutorialAsset},
	{"GetTutorialEntry", bnd_LC_TutorialAsset_GetTutorialEntry},
	{"GetTutorialEntryByName", bnd_LC_TutorialAsset_GetTutorialEntryByName},
	{"GetBitVec", bnd_LC_TutorialAsset_GetBitVec},
	{"SetBitVec", bnd_LC_TutorialAsset_SetBitVec},
	{"GetDisplayFlag", bnd_LC_TutorialAsset_GetDisplayFlag},
	{"SetDisplayFlag", bnd_LC_TutorialAsset_SetDisplayFlag},
	{"GetTutorialInfoString", bnd_LC_TutorialAsset_GetTutorialInfoString},
	{"GetDirtyFlagRevisionID", bnd_LC_TutorialAsset_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_TutorialAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TutorialAsset", 0, lib_LC_TutorialAsset, bnd_LuaDestroy_LC_TutorialAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GameEventBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GameEventBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GameEventBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GameEventBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GameEventBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GameEventBase* h = (GameLogic::LC_GameEventBase*) binder.CheckUserType(1, "LC_GameEventBase");
		binder.CheckUserType(1, "LC_GameEventBase");
		return 0;
	}
	static int bnd_LC_GameEventBase_GetEventType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GameEventBase* pkAPI = (GameLogic::LC_GameEventBase*)binder.CheckUserType(1, "LC_GameEventBase");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GameEventBase::GetEventType, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GameEventBase[] = {
	{"Create", bnd_LuaCreate_LC_GameEventBase},
	{"GetEventType", bnd_LC_GameEventBase_GetEventType},
	{NULL, NULL}
	};
	static int luaopen_LC_GameEventBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GameEventBase", 0, lib_LC_GameEventBase, bnd_LuaDestroy_LC_GameEventBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_GameEvent Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_GameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GameEvent* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_GameEvent");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_GameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_GameEvent* h = (GameLogic::LC_GameEvent*) binder.CheckUserType(1, "LC_GameEvent");
		binder.CheckUserType(1, "LC_GameEvent");
		return 0;
	}
	static int bnd_LC_GameEvent_GetEventParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GameEvent* pkAPI = (GameLogic::LC_GameEvent*)binder.CheckUserType(1, "LC_GameEvent");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GameEvent::GetEventParam, L, 2);
		return 1;
	}
	static int bnd_LC_GameEvent_GetUint64Param(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_GameEvent* pkAPI = (GameLogic::LC_GameEvent*)binder.CheckUserType(1, "LC_GameEvent");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_GameEvent::GetUint64Param, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_GameEvent[] = {
	{"Create", bnd_LuaCreate_LC_GameEvent},
	{"GetEventParam", bnd_LC_GameEvent_GetEventParam},
	{"GetUint64Param", bnd_LC_GameEvent_GetUint64Param},
	{NULL, NULL}
	};
	static int luaopen_LC_GameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_GameEvent", "LC_GameEventBase", lib_LC_GameEvent, bnd_LuaDestroy_LC_GameEvent);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEvent Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEvent* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEvent");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEvent* h = (LC_ClientGameEvent*) binder.CheckUserType(1, "LC_ClientGameEvent");
		binder.CheckUserType(1, "LC_ClientGameEvent");
		return 0;
	}
	static int bnd_LC_ClientGameEvent_GetClientEventType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEvent* pkAPI = (LC_ClientGameEvent*)binder.CheckUserType(1, "LC_ClientGameEvent");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEvent::GetClientEventType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEvent_GetUserData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEvent* pkAPI = (LC_ClientGameEvent*)binder.CheckUserType(1, "LC_ClientGameEvent");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEvent::GetUserData, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEvent[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEvent},
	{"GetClientEventType", bnd_LC_ClientGameEvent_GetClientEventType},
	{"GetUserData", bnd_LC_ClientGameEvent_GetUserData},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEvent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEvent", "LC_GameEventBase", lib_LC_ClientGameEvent, bnd_LuaDestroy_LC_ClientGameEvent);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TaskScriptImportParam Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TaskScriptImportParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskScriptImportParam* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TaskScriptImportParam");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TaskScriptImportParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TaskScriptImportParam* h = (GameLogic::LC_TaskScriptImportParam*) binder.CheckUserType(1, "LC_TaskScriptImportParam");
		binder.CheckUserType(1, "LC_TaskScriptImportParam");
		return 0;
	}
	static int bnd_LC_TaskScriptImportParam_GetParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskScriptImportParam* pkAPI = (GameLogic::LC_TaskScriptImportParam*)binder.CheckUserType(1, "LC_TaskScriptImportParam");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskScriptImportParam::GetParam, L, 2);
		return 1;
	}
	static int bnd_LC_TaskScriptImportParam_SetParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TaskScriptImportParam* pkAPI = (GameLogic::LC_TaskScriptImportParam*)binder.CheckUserType(1, "LC_TaskScriptImportParam");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TaskScriptImportParam::SetParam, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_TaskScriptImportParam[] = {
	{"Create", bnd_LuaCreate_LC_TaskScriptImportParam},
	{"GetParam", bnd_LC_TaskScriptImportParam_GetParam},
	{"SetParam", bnd_LC_TaskScriptImportParam_SetParam},
	{NULL, NULL}
	};
	static int luaopen_LC_TaskScriptImportParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TaskScriptImportParam", "MM_BaseObject", lib_LC_TaskScriptImportParam, bnd_LuaDestroy_LC_TaskScriptImportParam);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientMapTransDataEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientMapTransDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientMapTransDataEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientMapTransDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientMapTransDataEntry* h = (LC_ClientMapTransDataEntry*) binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		return 0;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetStamina(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetStamina, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetMapShowName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetMapShowName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetIcon, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetColor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetColor, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetMapLogicType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetMapLogicType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetPreMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetPreMapID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetTransferAreaID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetTransferAreaID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetTip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetLevelLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetLevelLimit, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetPreTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetPreTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetMapBossID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetMapBossID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetScoreLimit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetScoreLimit, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetShopID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetShopID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientMapTransDataEntry_GetStarTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientMapTransDataEntry* pkAPI = (LC_ClientMapTransDataEntry*)binder.CheckUserType(1, "LC_ClientMapTransDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientMapTransDataEntry::GetStarTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientMapTransDataEntry[] = {
	{"Create", bnd_LuaCreate_LC_ClientMapTransDataEntry},
	{"GetMapID", bnd_LC_ClientMapTransDataEntry_GetMapID},
	{"GetStamina", bnd_LC_ClientMapTransDataEntry_GetStamina},
	{"GetMapShowName", bnd_LC_ClientMapTransDataEntry_GetMapShowName},
	{"GetIcon", bnd_LC_ClientMapTransDataEntry_GetIcon},
	{"GetColor", bnd_LC_ClientMapTransDataEntry_GetColor},
	{"GetMapLogicType", bnd_LC_ClientMapTransDataEntry_GetMapLogicType},
	{"GetPreMapID", bnd_LC_ClientMapTransDataEntry_GetPreMapID},
	{"GetTransferAreaID", bnd_LC_ClientMapTransDataEntry_GetTransferAreaID},
	{"GetTip", bnd_LC_ClientMapTransDataEntry_GetTip},
	{"GetLevelLimit", bnd_LC_ClientMapTransDataEntry_GetLevelLimit},
	{"GetPreTaskID", bnd_LC_ClientMapTransDataEntry_GetPreTaskID},
	{"GetMapBossID", bnd_LC_ClientMapTransDataEntry_GetMapBossID},
	{"GetScoreLimit", bnd_LC_ClientMapTransDataEntry_GetScoreLimit},
	{"GetShopID", bnd_LC_ClientMapTransDataEntry_GetShopID},
	{"GetStarTime", bnd_LC_ClientMapTransDataEntry_GetStarTime},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientMapTransDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientMapTransDataEntry", 0, lib_LC_ClientMapTransDataEntry, bnd_LuaDestroy_LC_ClientMapTransDataEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientSocietyAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientSocietyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientSocietyAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientSocietyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientSocietyAsset* h = (LC_ClientSocietyAsset*) binder.CheckUserType(1, "LC_ClientSocietyAsset");
		binder.CheckUserType(1, "LC_ClientSocietyAsset");
		return 0;
	}
	static int bnd_LC_ClientSocietyAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetFriendCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetFriendInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetFriendInfo1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendInfo1, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetFriendInfoByScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendInfoByScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetSocietyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetSocietyInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetTempFriendInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetTempFriendInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetEnemy(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetEnemy, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetBlackList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetBlackList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetNearByPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetNearByPlayerInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetPositionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetPositionInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetReqAddFriendCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetReqAddFriendCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetReqAddFriendBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetReqAddFriendBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetReqAddFriendMsg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetReqAddFriendMsg, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetReqAddFriendCareer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetReqAddFriendCareer, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetReqAddFriendLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetReqAddFriendLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_DeleteReqAddFriend(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::DeleteReqAddFriend, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientSocietyAsset_GetFriendServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendServerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSocietyAsset_GetFriendCurServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientSocietyAsset* pkAPI = (LC_ClientSocietyAsset*)binder.CheckUserType(1, "LC_ClientSocietyAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientSocietyAsset::GetFriendCurServerID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientSocietyAsset[] = {
	{"Create", bnd_LuaCreate_LC_ClientSocietyAsset},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientSocietyAsset_GetDirtyFlagRevisionID},
	{"GetCount", bnd_LC_ClientSocietyAsset_GetCount},
	{"GetFriendCount", bnd_LC_ClientSocietyAsset_GetFriendCount},
	{"GetFriendInfo", bnd_LC_ClientSocietyAsset_GetFriendInfo},
	{"GetFriendInfo1", bnd_LC_ClientSocietyAsset_GetFriendInfo1},
	{"GetFriendInfoByScore", bnd_LC_ClientSocietyAsset_GetFriendInfoByScore},
	{"GetSocietyInfo", bnd_LC_ClientSocietyAsset_GetSocietyInfo},
	{"GetTempFriendInfo", bnd_LC_ClientSocietyAsset_GetTempFriendInfo},
	{"GetEnemy", bnd_LC_ClientSocietyAsset_GetEnemy},
	{"GetBlackList", bnd_LC_ClientSocietyAsset_GetBlackList},
	{"GetNearByPlayerInfo", bnd_LC_ClientSocietyAsset_GetNearByPlayerInfo},
	{"GetPositionInfo", bnd_LC_ClientSocietyAsset_GetPositionInfo},
	{"GetReqAddFriendCharName", bnd_LC_ClientSocietyAsset_GetReqAddFriendCharName},
	{"GetReqAddFriendBornCharType", bnd_LC_ClientSocietyAsset_GetReqAddFriendBornCharType},
	{"GetReqAddFriendMsg", bnd_LC_ClientSocietyAsset_GetReqAddFriendMsg},
	{"GetReqAddFriendCareer", bnd_LC_ClientSocietyAsset_GetReqAddFriendCareer},
	{"GetReqAddFriendLevel", bnd_LC_ClientSocietyAsset_GetReqAddFriendLevel},
	{"DeleteReqAddFriend", bnd_LC_ClientSocietyAsset_DeleteReqAddFriend},
	{"GetFriendServerID", bnd_LC_ClientSocietyAsset_GetFriendServerID},
	{"GetFriendCurServerID", bnd_LC_ClientSocietyAsset_GetFriendCurServerID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientSocietyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientSocietyAsset", 0, lib_LC_ClientSocietyAsset, bnd_LuaDestroy_LC_ClientSocietyAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientWorldLevelAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientWorldLevelAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientWorldLevelAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientWorldLevelAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientWorldLevelAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientWorldLevelAsset* h = (GameLogic::LC_ClientWorldLevelAsset*) binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		return 0;
	}
	static int bnd_LC_ClientWorldLevelAsset_GetTopLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientWorldLevelAsset* pkAPI = (GameLogic::LC_ClientWorldLevelAsset*)binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientWorldLevelAsset::GetTopLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientWorldLevelAsset_GetTopName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientWorldLevelAsset* pkAPI = (GameLogic::LC_ClientWorldLevelAsset*)binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientWorldLevelAsset::GetTopName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientWorldLevelAsset_IsShow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientWorldLevelAsset* pkAPI = (GameLogic::LC_ClientWorldLevelAsset*)binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientWorldLevelAsset::IsShow, L, 2);
		return 1;
	}
	static int bnd_LC_ClientWorldLevelAsset_SetShow(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientWorldLevelAsset* pkAPI = (GameLogic::LC_ClientWorldLevelAsset*)binder.CheckUserType(1, "LC_ClientWorldLevelAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientWorldLevelAsset::SetShow, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ClientWorldLevelAsset[] = {
	{"Create", bnd_LuaCreate_LC_ClientWorldLevelAsset},
	{"GetTopLevel", bnd_LC_ClientWorldLevelAsset_GetTopLevel},
	{"GetTopName", bnd_LC_ClientWorldLevelAsset_GetTopName},
	{"IsShow", bnd_LC_ClientWorldLevelAsset_IsShow},
	{"SetShow", bnd_LC_ClientWorldLevelAsset_SetShow},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientWorldLevelAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientWorldLevelAsset", 0, lib_LC_ClientWorldLevelAsset, bnd_LuaDestroy_LC_ClientWorldLevelAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SocietyBasicInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SocietyBasicInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SocietyBasicInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SocietyBasicInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SocietyBasicInfo* h = (GameLogic::LC_SocietyBasicInfo*) binder.CheckUserType(1, "LC_SocietyBasicInfo");
		binder.CheckUserType(1, "LC_SocietyBasicInfo");
		return 0;
	}
	static int bnd_LC_SocietyBasicInfo_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetStatus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetStatus, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetCharIDDetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetCharIDDetail, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetWeaponType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetWeaponType, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetDegreeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetDegreeInfo, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_GetPlatformVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::GetPlatformVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_IsPlatformYearVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::IsPlatformYearVip, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_IsPlatformVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::IsPlatformVip, L, 2);
		return 1;
	}
	static int bnd_LC_SocietyBasicInfo_IsPlatformHighVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SocietyBasicInfo* pkAPI = (GameLogic::LC_SocietyBasicInfo*)binder.CheckUserType(1, "LC_SocietyBasicInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SocietyBasicInfo::IsPlatformHighVip, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SocietyBasicInfo[] = {
	{"Create", bnd_LuaCreate_LC_SocietyBasicInfo},
	{"GetCharType", bnd_LC_SocietyBasicInfo_GetCharType},
	{"GetBornCharType", bnd_LC_SocietyBasicInfo_GetBornCharType},
	{"GetStatus", bnd_LC_SocietyBasicInfo_GetStatus},
	{"GetCharID", bnd_LC_SocietyBasicInfo_GetCharID},
	{"GetCharIDDetail", bnd_LC_SocietyBasicInfo_GetCharIDDetail},
	{"GetWeaponType", bnd_LC_SocietyBasicInfo_GetWeaponType},
	{"GetCharName", bnd_LC_SocietyBasicInfo_GetCharName},
	{"GetLevel", bnd_LC_SocietyBasicInfo_GetLevel},
	{"GetDegreeInfo", bnd_LC_SocietyBasicInfo_GetDegreeInfo},
	{"GetPlatformVipLevel", bnd_LC_SocietyBasicInfo_GetPlatformVipLevel},
	{"IsPlatformYearVip", bnd_LC_SocietyBasicInfo_IsPlatformYearVip},
	{"IsPlatformVip", bnd_LC_SocietyBasicInfo_IsPlatformVip},
	{"IsPlatformHighVip", bnd_LC_SocietyBasicInfo_IsPlatformHighVip},
	{NULL, NULL}
	};
	static int luaopen_LC_SocietyBasicInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SocietyBasicInfo", 0, lib_LC_SocietyBasicInfo, bnd_LuaDestroy_LC_SocietyBasicInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_FriendDetailInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_FriendDetailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_FriendDetailInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_FriendDetailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_FriendDetailInfo* h = (GameLogic::LC_FriendDetailInfo*) binder.CheckUserType(1, "LC_FriendDetailInfo");
		binder.CheckUserType(1, "LC_FriendDetailInfo");
		return 0;
	}
	static int bnd_LC_FriendDetailInfo_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetStatus(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetStatus, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetCharIDDetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCharIDDetail, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetCharMood(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCharMood, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetCareer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetCareer, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetMapID, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetArea(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetArea, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetWeaponType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetWeaponType, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetDegree(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetDegree, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetGroupNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetGroupNum, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetServerID, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetLastTimestamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetLastTimestamp, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetPlatformVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetPlatformVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_IsPlatformYearVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::IsPlatformYearVip, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_IsPlatformVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::IsPlatformVip, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_IsPlatformHighVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::IsPlatformHighVip, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetScore, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_GetUID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::GetUID, L, 2);
		return 1;
	}
	static int bnd_LC_FriendDetailInfo_IsFriendEachOther(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FriendDetailInfo* pkAPI = (GameLogic::LC_FriendDetailInfo*)binder.CheckUserType(1, "LC_FriendDetailInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FriendDetailInfo::IsFriendEachOther, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_FriendDetailInfo[] = {
	{"Create", bnd_LuaCreate_LC_FriendDetailInfo},
	{"GetCharType", bnd_LC_FriendDetailInfo_GetCharType},
	{"GetStatus", bnd_LC_FriendDetailInfo_GetStatus},
	{"GetBornCharType", bnd_LC_FriendDetailInfo_GetBornCharType},
	{"GetCharID", bnd_LC_FriendDetailInfo_GetCharID},
	{"GetCharIDDetail", bnd_LC_FriendDetailInfo_GetCharIDDetail},
	{"GetCharName", bnd_LC_FriendDetailInfo_GetCharName},
	{"GetCharMood", bnd_LC_FriendDetailInfo_GetCharMood},
	{"GetCareer", bnd_LC_FriendDetailInfo_GetCareer},
	{"GetMapID", bnd_LC_FriendDetailInfo_GetMapID},
	{"GetArea", bnd_LC_FriendDetailInfo_GetArea},
	{"GetWeaponType", bnd_LC_FriendDetailInfo_GetWeaponType},
	{"GetLevel", bnd_LC_FriendDetailInfo_GetLevel},
	{"GetDegree", bnd_LC_FriendDetailInfo_GetDegree},
	{"GetGroupID", bnd_LC_FriendDetailInfo_GetGroupID},
	{"GetGroupNum", bnd_LC_FriendDetailInfo_GetGroupNum},
	{"GetServerID", bnd_LC_FriendDetailInfo_GetServerID},
	{"GetLastTimestamp", bnd_LC_FriendDetailInfo_GetLastTimestamp},
	{"GetPlatformVipLevel", bnd_LC_FriendDetailInfo_GetPlatformVipLevel},
	{"IsPlatformYearVip", bnd_LC_FriendDetailInfo_IsPlatformYearVip},
	{"IsPlatformVip", bnd_LC_FriendDetailInfo_IsPlatformVip},
	{"IsPlatformHighVip", bnd_LC_FriendDetailInfo_IsPlatformHighVip},
	{"GetScore", bnd_LC_FriendDetailInfo_GetScore},
	{"GetUID", bnd_LC_FriendDetailInfo_GetUID},
	{"IsFriendEachOther", bnd_LC_FriendDetailInfo_IsFriendEachOther},
	{NULL, NULL}
	};
	static int luaopen_LC_FriendDetailInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_FriendDetailInfo", 0, lib_LC_FriendDetailInfo, bnd_LuaDestroy_LC_FriendDetailInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientFriendMsgBroadStruct Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientFriendMsgBroadStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroadStruct* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientFriendMsgBroadStruct");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientFriendMsgBroadStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientFriendMsgBroadStruct* h = (LC_ClientFriendMsgBroadStruct*) binder.CheckUserType(1, "LC_ClientFriendMsgBroadStruct");
		binder.CheckUserType(1, "LC_ClientFriendMsgBroadStruct");
		return 0;
	}
	static int bnd_LC_ClientFriendMsgBroadStruct_GetTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroadStruct* pkAPI = (LC_ClientFriendMsgBroadStruct*)binder.CheckUserType(1, "LC_ClientFriendMsgBroadStruct");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendMsgBroadStruct::GetTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientFriendMsgBroadStruct_GetTitle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroadStruct* pkAPI = (LC_ClientFriendMsgBroadStruct*)binder.CheckUserType(1, "LC_ClientFriendMsgBroadStruct");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendMsgBroadStruct::GetTitle, L, 2);
		return 1;
	}
	static int bnd_LC_ClientFriendMsgBroadStruct_GetContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroadStruct* pkAPI = (LC_ClientFriendMsgBroadStruct*)binder.CheckUserType(1, "LC_ClientFriendMsgBroadStruct");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendMsgBroadStruct::GetContent, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientFriendMsgBroadStruct[] = {
	{"Create", bnd_LuaCreate_LC_ClientFriendMsgBroadStruct},
	{"GetTime", bnd_LC_ClientFriendMsgBroadStruct_GetTime},
	{"GetTitle", bnd_LC_ClientFriendMsgBroadStruct_GetTitle},
	{"GetContent", bnd_LC_ClientFriendMsgBroadStruct_GetContent},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientFriendMsgBroadStruct(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientFriendMsgBroadStruct", 0, lib_LC_ClientFriendMsgBroadStruct, bnd_LuaDestroy_LC_ClientFriendMsgBroadStruct);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientFriendMsgBroad Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientFriendMsgBroad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroad* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientFriendMsgBroad");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientFriendMsgBroad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientFriendMsgBroad* h = (LC_ClientFriendMsgBroad*) binder.CheckUserType(1, "LC_ClientFriendMsgBroad");
		binder.CheckUserType(1, "LC_ClientFriendMsgBroad");
		return 0;
	}
	static int bnd_LC_ClientFriendMsgBroad_GetMsgCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroad* pkAPI = (LC_ClientFriendMsgBroad*)binder.CheckUserType(1, "LC_ClientFriendMsgBroad");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendMsgBroad::GetMsgCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientFriendMsgBroad_GetMsg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendMsgBroad* pkAPI = (LC_ClientFriendMsgBroad*)binder.CheckUserType(1, "LC_ClientFriendMsgBroad");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendMsgBroad::GetMsg, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientFriendMsgBroad[] = {
	{"Create", bnd_LuaCreate_LC_ClientFriendMsgBroad},
	{"GetMsgCount", bnd_LC_ClientFriendMsgBroad_GetMsgCount},
	{"GetMsg", bnd_LC_ClientFriendMsgBroad_GetMsg},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientFriendMsgBroad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientFriendMsgBroad", 0, lib_LC_ClientFriendMsgBroad, bnd_LuaDestroy_LC_ClientFriendMsgBroad);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientViewPlayerInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientViewPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientViewPlayerInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientViewPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientViewPlayerInfo* h = (GameLogic::LC_ClientViewPlayerInfo*) binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		return 0;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCharName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCharName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCareer(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCareer, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetHp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetHp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMaxHp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMaxHp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMaxMp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMaxMp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetAttack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetAttack, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetDefence(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetDefence, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetHPRecover(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetHPRecover, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMPRecover(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMPRecover, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetDogRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetDogRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCIRRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCIRRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCIRDAM(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCIRDAM, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetHPRecoverRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetHPRecoverRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMPRecoverRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMPRecoverRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMoveSpeed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMoveSpeed, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetHPCostRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetHPCostRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetMPCostRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetMPCostRate, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetCharID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetWeaponType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetWeaponType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetPackCapacity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetPackCapacity, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetBackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetBackPackEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetVehicleRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetVehicleRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetArrowRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetArrowRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientViewPlayerInfo_GetDevaEyeRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientViewPlayerInfo* pkAPI = (GameLogic::LC_ClientViewPlayerInfo*)binder.CheckUserType(1, "LC_ClientViewPlayerInfo");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientViewPlayerInfo::GetDevaEyeRank, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientViewPlayerInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientViewPlayerInfo},
	{"GetCharName", bnd_LC_ClientViewPlayerInfo_GetCharName},
	{"GetLevel", bnd_LC_ClientViewPlayerInfo_GetLevel},
	{"GetCareer", bnd_LC_ClientViewPlayerInfo_GetCareer},
	{"GetHp", bnd_LC_ClientViewPlayerInfo_GetHp},
	{"GetMaxHp", bnd_LC_ClientViewPlayerInfo_GetMaxHp},
	{"GetMp", bnd_LC_ClientViewPlayerInfo_GetMp},
	{"GetMaxMp", bnd_LC_ClientViewPlayerInfo_GetMaxMp},
	{"GetAttack", bnd_LC_ClientViewPlayerInfo_GetAttack},
	{"GetDefence", bnd_LC_ClientViewPlayerInfo_GetDefence},
	{"GetHPRecover", bnd_LC_ClientViewPlayerInfo_GetHPRecover},
	{"GetMPRecover", bnd_LC_ClientViewPlayerInfo_GetMPRecover},
	{"GetDogRate", bnd_LC_ClientViewPlayerInfo_GetDogRate},
	{"GetCIRRate", bnd_LC_ClientViewPlayerInfo_GetCIRRate},
	{"GetCIRDAM", bnd_LC_ClientViewPlayerInfo_GetCIRDAM},
	{"GetHPRecoverRate", bnd_LC_ClientViewPlayerInfo_GetHPRecoverRate},
	{"GetMPRecoverRate", bnd_LC_ClientViewPlayerInfo_GetMPRecoverRate},
	{"GetMoveSpeed", bnd_LC_ClientViewPlayerInfo_GetMoveSpeed},
	{"GetHPCostRate", bnd_LC_ClientViewPlayerInfo_GetHPCostRate},
	{"GetMPCostRate", bnd_LC_ClientViewPlayerInfo_GetMPCostRate},
	{"GetCharType", bnd_LC_ClientViewPlayerInfo_GetCharType},
	{"GetCharID", bnd_LC_ClientViewPlayerInfo_GetCharID},
	{"GetWeaponType", bnd_LC_ClientViewPlayerInfo_GetWeaponType},
	{"GetPackCapacity", bnd_LC_ClientViewPlayerInfo_GetPackCapacity},
	{"GetBackPackEntry", bnd_LC_ClientViewPlayerInfo_GetBackPackEntry},
	{"GetGuildName", bnd_LC_ClientViewPlayerInfo_GetGuildName},
	{"GetVehicleRank", bnd_LC_ClientViewPlayerInfo_GetVehicleRank},
	{"GetArrowRank", bnd_LC_ClientViewPlayerInfo_GetArrowRank},
	{"GetDevaEyeRank", bnd_LC_ClientViewPlayerInfo_GetDevaEyeRank},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientViewPlayerInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientViewPlayerInfo", 0, lib_LC_ClientViewPlayerInfo, bnd_LuaDestroy_LC_ClientViewPlayerInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientFriendNick Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendNick* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientFriendNick");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientFriendNick* h = (LC_ClientFriendNick*) binder.CheckUserType(1, "LC_ClientFriendNick");
		binder.CheckUserType(1, "LC_ClientFriendNick");
		return 0;
	}
	static int bnd_LC_ClientFriendNick_GetFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendNick* pkAPI = (LC_ClientFriendNick*)binder.CheckUserType(1, "LC_ClientFriendNick");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendNick::GetFriendNick, L, 2);
		return 1;
	}
	static int bnd_LC_ClientFriendNick_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientFriendNick* pkAPI = (LC_ClientFriendNick*)binder.CheckUserType(1, "LC_ClientFriendNick");
		Utility::LuaCall(*pkAPI, &LC_ClientFriendNick::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientFriendNick[] = {
	{"Create", bnd_LuaCreate_LC_ClientFriendNick},
	{"GetFriendNick", bnd_LC_ClientFriendNick_GetFriendNick},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientFriendNick_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientFriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientFriendNick", 0, lib_LC_ClientFriendNick, bnd_LuaDestroy_LC_ClientFriendNick);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_FriendNick Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_FriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_FriendNick* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_FriendNick");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_FriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_FriendNick* h = (LC_FriendNick*) binder.CheckUserType(1, "LC_FriendNick");
		binder.CheckUserType(1, "LC_FriendNick");
		return 0;
	}
	static int bnd_LC_FriendNick_GetNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_FriendNick* pkAPI = (LC_FriendNick*)binder.CheckUserType(1, "LC_FriendNick");
		Utility::LuaCall(*pkAPI, &LC_FriendNick::GetNick, L, 2);
		return 1;
	}
	static int bnd_LC_FriendNick_GetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_FriendNick* pkAPI = (LC_FriendNick*)binder.CheckUserType(1, "LC_FriendNick");
		Utility::LuaCall(*pkAPI, &LC_FriendNick::GetCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_FriendNick[] = {
	{"Create", bnd_LuaCreate_LC_FriendNick},
	{"GetNick", bnd_LC_FriendNick_GetNick},
	{"GetCount", bnd_LC_FriendNick_GetCount},
	{NULL, NULL}
	};
	static int luaopen_LC_FriendNick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_FriendNick", 0, lib_LC_FriendNick, bnd_LuaDestroy_LC_FriendNick);
		return 1;
	}
	///////////////////////////////////////////////
	////////TT_TextElement Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_TT_TextElement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "TT_TextElement");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_TT_TextElement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//TT_TextElement* h = (TT_TextElement*) binder.CheckUserType(1, "TT_TextElement");
		binder.CheckUserType(1, "TT_TextElement");
		return 0;
	}
	static int bnd_TT_TextElement_GetTextLifeTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetTextLifeTime, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetTextMessageType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetTextMessageType, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetLongParameter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetLongParameter, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetInt64Parameter(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetInt64Parameter, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetWildCards(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetWildCards, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetFormatWildCard(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetFormatWildCard, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetText, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetBaseText(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetBaseText, L, 2);
		return 1;
	}
	static int bnd_TT_TextElement_GetServerTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		TT_TextElement* pkAPI = (TT_TextElement*)binder.CheckUserType(1, "TT_TextElement");
		Utility::LuaCall(*pkAPI, &TT_TextElement::GetServerTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_TT_TextElement[] = {
	{"Create", bnd_LuaCreate_TT_TextElement},
	{"GetTextLifeTime", bnd_TT_TextElement_GetTextLifeTime},
	{"GetTextMessageType", bnd_TT_TextElement_GetTextMessageType},
	{"GetLongParameter", bnd_TT_TextElement_GetLongParameter},
	{"GetInt64Parameter", bnd_TT_TextElement_GetInt64Parameter},
	{"GetWildCards", bnd_TT_TextElement_GetWildCards},
	{"GetFormatWildCard", bnd_TT_TextElement_GetFormatWildCard},
	{"GetText", bnd_TT_TextElement_GetText},
	{"GetBaseText", bnd_TT_TextElement_GetBaseText},
	{"GetServerTime", bnd_TT_TextElement_GetServerTime},
	{NULL, NULL}
	};
	static int luaopen_TT_TextElement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("TT_TextElement", 0, lib_TT_TextElement, bnd_LuaDestroy_TT_TextElement);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShortcutKeyAssetEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShortcutKeyAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAssetEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShortcutKeyAssetEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShortcutKeyAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ShortcutKeyAssetEntry* h = (LC_ShortcutKeyAssetEntry*) binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		return 0;
	}
	static int bnd_LC_ShortcutKeyAssetEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAssetEntry* pkAPI = (LC_ShortcutKeyAssetEntry*)binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAssetEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAssetEntry_GetSlotID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAssetEntry* pkAPI = (LC_ShortcutKeyAssetEntry*)binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAssetEntry::GetSlotID, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAssetEntry_GetKey1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAssetEntry* pkAPI = (LC_ShortcutKeyAssetEntry*)binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAssetEntry::GetKey1, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAssetEntry_GetKey2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAssetEntry* pkAPI = (LC_ShortcutKeyAssetEntry*)binder.CheckUserType(1, "LC_ShortcutKeyAssetEntry");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAssetEntry::GetKey2, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ShortcutKeyAssetEntry[] = {
	{"Create", bnd_LuaCreate_LC_ShortcutKeyAssetEntry},
	{"GetValid", bnd_LC_ShortcutKeyAssetEntry_GetValid},
	{"GetSlotID", bnd_LC_ShortcutKeyAssetEntry_GetSlotID},
	{"GetKey1", bnd_LC_ShortcutKeyAssetEntry_GetKey1},
	{"GetKey2", bnd_LC_ShortcutKeyAssetEntry_GetKey2},
	{NULL, NULL}
	};
	static int luaopen_LC_ShortcutKeyAssetEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShortcutKeyAssetEntry", 0, lib_LC_ShortcutKeyAssetEntry, bnd_LuaDestroy_LC_ShortcutKeyAssetEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ShortcutKeyAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ShortcutKeyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ShortcutKeyAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ShortcutKeyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ShortcutKeyAsset* h = (LC_ShortcutKeyAsset*) binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		return 0;
	}
	static int bnd_LC_ShortcutKeyAsset_FindKeyDataBySlotID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::FindKeyDataBySlotID, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAsset_SetShortcutKeyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::SetShortcutKeyData, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutKeyAsset_GetShortcutKeyData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::GetShortcutKeyData, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAsset_FindSlotIDByKeyValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::FindSlotIDByKeyValue, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAsset_FindSlotIndexByKeyValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::FindSlotIndexByKeyValue, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAsset_ClearShortcutKeyValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::ClearShortcutKeyValue, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutKeyAsset_SetLoadedServerShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::SetLoadedServerShortcutKey, L, 2);
		return 0;
	}		
	static int bnd_LC_ShortcutKeyAsset_GetLoadedServerShortcutKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::GetLoadedServerShortcutKey, L, 2);
		return 1;
	}
	static int bnd_LC_ShortcutKeyAsset_ReUse(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ShortcutKeyAsset* pkAPI = (LC_ShortcutKeyAsset*)binder.CheckUserType(1, "LC_ShortcutKeyAsset");
		Utility::LuaCall(*pkAPI, &LC_ShortcutKeyAsset::ReUse, L, 2);
		return 0;
	}		
	static const luaL_reg lib_LC_ShortcutKeyAsset[] = {
	{"Create", bnd_LuaCreate_LC_ShortcutKeyAsset},
	{"FindKeyDataBySlotID", bnd_LC_ShortcutKeyAsset_FindKeyDataBySlotID},
	{"SetShortcutKeyData", bnd_LC_ShortcutKeyAsset_SetShortcutKeyData},
	{"GetShortcutKeyData", bnd_LC_ShortcutKeyAsset_GetShortcutKeyData},
	{"FindSlotIDByKeyValue", bnd_LC_ShortcutKeyAsset_FindSlotIDByKeyValue},
	{"FindSlotIndexByKeyValue", bnd_LC_ShortcutKeyAsset_FindSlotIndexByKeyValue},
	{"ClearShortcutKeyValue", bnd_LC_ShortcutKeyAsset_ClearShortcutKeyValue},
	{"SetLoadedServerShortcutKey", bnd_LC_ShortcutKeyAsset_SetLoadedServerShortcutKey},
	{"GetLoadedServerShortcutKey", bnd_LC_ShortcutKeyAsset_GetLoadedServerShortcutKey},
	{"ReUse", bnd_LC_ShortcutKeyAsset_ReUse},
	{NULL, NULL}
	};
	static int luaopen_LC_ShortcutKeyAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ShortcutKeyAsset", 0, lib_LC_ShortcutKeyAsset, bnd_LuaDestroy_LC_ShortcutKeyAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientArenaPlayerDataEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientArenaPlayerDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientArenaPlayerDataEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientArenaPlayerDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientArenaPlayerDataEntry* h = (LC_ClientArenaPlayerDataEntry*) binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		return 0;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetPlayerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetPlayerName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetPlayerInArenaState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetPlayerInArenaState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetKillNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetKillNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetDeadNum(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetDeadNum, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetGainScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetGainScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayerDataEntry_GetGainExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayerDataEntry* pkAPI = (LC_ClientArenaPlayerDataEntry*)binder.CheckUserType(1, "LC_ClientArenaPlayerDataEntry");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayerDataEntry::GetGainExp, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientArenaPlayerDataEntry[] = {
	{"Create", bnd_LuaCreate_LC_ClientArenaPlayerDataEntry},
	{"GetValid", bnd_LC_ClientArenaPlayerDataEntry_GetValid},
	{"GetID", bnd_LC_ClientArenaPlayerDataEntry_GetID},
	{"GetPlayerName", bnd_LC_ClientArenaPlayerDataEntry_GetPlayerName},
	{"GetPlayerInArenaState", bnd_LC_ClientArenaPlayerDataEntry_GetPlayerInArenaState},
	{"GetKillNum", bnd_LC_ClientArenaPlayerDataEntry_GetKillNum},
	{"GetDeadNum", bnd_LC_ClientArenaPlayerDataEntry_GetDeadNum},
	{"GetGainScore", bnd_LC_ClientArenaPlayerDataEntry_GetGainScore},
	{"GetGainExp", bnd_LC_ClientArenaPlayerDataEntry_GetGainExp},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientArenaPlayerDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientArenaPlayerDataEntry", 0, lib_LC_ClientArenaPlayerDataEntry, bnd_LuaDestroy_LC_ClientArenaPlayerDataEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientArenaManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientArenaManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* h = LC_ClientArenaManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientArenaManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientArenaManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientArenaManager* h = (LC_ClientArenaManager*) binder.CheckUserType(1, "LC_ClientArenaManager");
		binder.CheckUserType(1, "LC_ClientArenaManager");
		return 0;
	}
	static int bnd_LC_ClientArenaManager_CanRespawn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::CanRespawn, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaModeOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaModeOpen, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaModeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaModeName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaModeDescript(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaModeDescript, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetEXPNeedToArenaLevelUp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetEXPNeedToArenaLevelUp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaLevelName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaLevelName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaState, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaStage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaStage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaSignUpUserCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaSignUpUserCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetStartWaitEnterArenaTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetStartWaitEnterArenaTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetNeedWaitEnterArenaTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetNeedWaitEnterArenaTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetStartWaitFinishArenaTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetStartWaitFinishArenaTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetNeedWaitFinishArenaTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetNeedWaitFinishArenaTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaCurrentTurnLeftTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaCurrentTurnLeftTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaTurnCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaTurnCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaGroupID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaGroupID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaWinGroupType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaWinGroupType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetPlayerArenaGroupType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetPlayerArenaGroupType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaGroupScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaGroupScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetArenaGroupToken(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaGroupToken, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetPlayerDataEntryInGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetPlayerDataEntryInGroup, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_RequestSignUpArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestSignUpArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestCancelSignUpArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestCancelSignUpArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestLeaveArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestLeaveArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestArenaState(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestArenaState, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestGiveUpArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestGiveUpArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestSignUpPeakArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestSignUpPeakArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_RequestLeavePeakArena(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::RequestLeavePeakArena, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_GetLadderUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetLadderUserInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetTopLadderUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetTopLadderUserInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_GetLadderRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetLadderRankUserInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaManager_ResetPeakLadderData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::ResetPeakLadderData, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientArenaManager_GetArenaRankRewardGrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaManager* pkAPI = (LC_ClientArenaManager*)binder.CheckUserType(1, "LC_ClientArenaManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaManager::GetArenaRankRewardGrade, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientArenaManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientArenaManager},
	{"CanRespawn", bnd_LC_ClientArenaManager_CanRespawn},
	{"GetArenaModeOpen", bnd_LC_ClientArenaManager_GetArenaModeOpen},
	{"GetArenaModeName", bnd_LC_ClientArenaManager_GetArenaModeName},
	{"GetArenaModeDescript", bnd_LC_ClientArenaManager_GetArenaModeDescript},
	{"GetEXPNeedToArenaLevelUp", bnd_LC_ClientArenaManager_GetEXPNeedToArenaLevelUp},
	{"GetArenaLevelName", bnd_LC_ClientArenaManager_GetArenaLevelName},
	{"GetArenaState", bnd_LC_ClientArenaManager_GetArenaState},
	{"GetArenaStage", bnd_LC_ClientArenaManager_GetArenaStage},
	{"GetArenaType", bnd_LC_ClientArenaManager_GetArenaType},
	{"GetArenaSignUpUserCount", bnd_LC_ClientArenaManager_GetArenaSignUpUserCount},
	{"GetStartWaitEnterArenaTime", bnd_LC_ClientArenaManager_GetStartWaitEnterArenaTime},
	{"GetNeedWaitEnterArenaTime", bnd_LC_ClientArenaManager_GetNeedWaitEnterArenaTime},
	{"GetStartWaitFinishArenaTime", bnd_LC_ClientArenaManager_GetStartWaitFinishArenaTime},
	{"GetNeedWaitFinishArenaTime", bnd_LC_ClientArenaManager_GetNeedWaitFinishArenaTime},
	{"GetArenaCurrentTurnLeftTime", bnd_LC_ClientArenaManager_GetArenaCurrentTurnLeftTime},
	{"GetArenaTurnCount", bnd_LC_ClientArenaManager_GetArenaTurnCount},
	{"GetArenaGroupID", bnd_LC_ClientArenaManager_GetArenaGroupID},
	{"GetArenaWinGroupType", bnd_LC_ClientArenaManager_GetArenaWinGroupType},
	{"GetPlayerArenaGroupType", bnd_LC_ClientArenaManager_GetPlayerArenaGroupType},
	{"GetArenaGroupScore", bnd_LC_ClientArenaManager_GetArenaGroupScore},
	{"GetArenaGroupToken", bnd_LC_ClientArenaManager_GetArenaGroupToken},
	{"GetPlayerDataEntryInGroup", bnd_LC_ClientArenaManager_GetPlayerDataEntryInGroup},
	{"RequestSignUpArena", bnd_LC_ClientArenaManager_RequestSignUpArena},
	{"RequestCancelSignUpArena", bnd_LC_ClientArenaManager_RequestCancelSignUpArena},
	{"RequestLeaveArena", bnd_LC_ClientArenaManager_RequestLeaveArena},
	{"RequestArenaState", bnd_LC_ClientArenaManager_RequestArenaState},
	{"RequestGiveUpArena", bnd_LC_ClientArenaManager_RequestGiveUpArena},
	{"RequestSignUpPeakArena", bnd_LC_ClientArenaManager_RequestSignUpPeakArena},
	{"RequestLeavePeakArena", bnd_LC_ClientArenaManager_RequestLeavePeakArena},
	{"GetLadderUserInfo", bnd_LC_ClientArenaManager_GetLadderUserInfo},
	{"GetTopLadderUserInfo", bnd_LC_ClientArenaManager_GetTopLadderUserInfo},
	{"GetLadderRankUserInfo", bnd_LC_ClientArenaManager_GetLadderRankUserInfo},
	{"ResetPeakLadderData", bnd_LC_ClientArenaManager_ResetPeakLadderData},
	{"GetArenaRankRewardGrade", bnd_LC_ClientArenaManager_GetArenaRankRewardGrade},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientArenaManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientArenaManager", 0, lib_LC_ClientArenaManager, bnd_LuaDestroy_LC_ClientArenaManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ArenaEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ArenaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ArenaEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ArenaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ArenaEntry* h = (GameLogic::LC_ArenaEntry*) binder.CheckUserType(1, "LC_ArenaEntry");
		binder.CheckUserType(1, "LC_ArenaEntry");
		return 0;
	}
	static const luaL_reg lib_LC_ArenaEntry[] = {
	{"Create", bnd_LuaCreate_LC_ArenaEntry},
	{NULL, NULL}
	};
	static int luaopen_LC_ArenaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ArenaEntry", 0, lib_LC_ArenaEntry, bnd_LuaDestroy_LC_ArenaEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ArenaAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ArenaAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ArenaAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ArenaAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ArenaAsset* h = (GameLogic::LC_ArenaAsset*) binder.CheckUserType(1, "LC_ArenaAsset");
		binder.CheckUserType(1, "LC_ArenaAsset");
		return 0;
	}
	static int bnd_LC_ArenaAsset_GetArenaEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* pkAPI = (GameLogic::LC_ArenaAsset*)binder.CheckUserType(1, "LC_ArenaAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ArenaAsset::GetArenaEntry, L, 2);
		return 1;
	}
	static int bnd_LC_ArenaAsset_IsArenaSectionDraw(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* pkAPI = (GameLogic::LC_ArenaAsset*)binder.CheckUserType(1, "LC_ArenaAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ArenaAsset::IsArenaSectionDraw, L, 2);
		return 1;
	}
	static int bnd_LC_ArenaAsset_IsArenaDailyRewardDraw(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* pkAPI = (GameLogic::LC_ArenaAsset*)binder.CheckUserType(1, "LC_ArenaAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ArenaAsset::IsArenaDailyRewardDraw, L, 2);
		return 1;
	}
	static int bnd_LC_ArenaAsset_GetPeakArenaEnterTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* pkAPI = (GameLogic::LC_ArenaAsset*)binder.CheckUserType(1, "LC_ArenaAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ArenaAsset::GetPeakArenaEnterTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ArenaAsset_HasExtraEnterTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ArenaAsset* pkAPI = (GameLogic::LC_ArenaAsset*)binder.CheckUserType(1, "LC_ArenaAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ArenaAsset::HasExtraEnterTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ArenaAsset[] = {
	{"Create", bnd_LuaCreate_LC_ArenaAsset},
	{"GetArenaEntry", bnd_LC_ArenaAsset_GetArenaEntry},
	{"IsArenaSectionDraw", bnd_LC_ArenaAsset_IsArenaSectionDraw},
	{"IsArenaDailyRewardDraw", bnd_LC_ArenaAsset_IsArenaDailyRewardDraw},
	{"GetPeakArenaEnterTimes", bnd_LC_ArenaAsset_GetPeakArenaEnterTimes},
	{"HasExtraEnterTime", bnd_LC_ArenaAsset_HasExtraEnterTime},
	{NULL, NULL}
	};
	static int luaopen_LC_ArenaAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ArenaAsset", 0, lib_LC_ArenaAsset, bnd_LuaDestroy_LC_ArenaAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_VIPAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_VIPAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_VIPAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_VIPAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_VIPAsset* h = (GameLogic::LC_VIPAsset*) binder.CheckUserType(1, "LC_VIPAsset");
		binder.CheckUserType(1, "LC_VIPAsset");
		return 0;
	}
	static int bnd_LC_VIPAsset_GetVIPLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetVIPLevel, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetCredit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetCredit, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetGiftVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetGiftVip, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetGiftDaily(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetGiftDaily, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetGiftDailyByLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetGiftDailyByLevel, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_CheckGiftVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::CheckGiftVip, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_CheckGiftDailyByVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::CheckGiftDailyByVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetGiftVipByLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetGiftVipByLevel, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_IsFDLVLDrawed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::IsFDLVLDrawed, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetFDepositLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetFDepositLevel, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetProfitValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetProfitValue, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_IsFlagSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::IsFlagSet, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetPrivilegeTalkTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetPrivilegeTalkTimes, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetUpgradceCreditGrowthValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetUpgradceCreditGrowthValue, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetCreditGrowthValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetCreditGrowthValue, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetCharTypeInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetCharTypeInfo, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_IsGetTodayGift(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::IsGetTodayGift, L, 2);
		return 1;
	}
	static int bnd_LC_VIPAsset_GetMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPAsset* pkAPI = (GameLogic::LC_VIPAsset*)binder.CheckUserType(1, "LC_VIPAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPAsset::GetMaxLevel, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_VIPAsset[] = {
	{"Create", bnd_LuaCreate_LC_VIPAsset},
	{"GetVIPLevel", bnd_LC_VIPAsset_GetVIPLevel},
	{"GetCredit", bnd_LC_VIPAsset_GetCredit},
	{"GetDirtyFlagRevisionID", bnd_LC_VIPAsset_GetDirtyFlagRevisionID},
	{"GetGiftVip", bnd_LC_VIPAsset_GetGiftVip},
	{"GetGiftDaily", bnd_LC_VIPAsset_GetGiftDaily},
	{"GetGiftDailyByLevel", bnd_LC_VIPAsset_GetGiftDailyByLevel},
	{"CheckGiftVip", bnd_LC_VIPAsset_CheckGiftVip},
	{"CheckGiftDailyByVipLevel", bnd_LC_VIPAsset_CheckGiftDailyByVipLevel},
	{"GetGiftVipByLevel", bnd_LC_VIPAsset_GetGiftVipByLevel},
	{"IsFDLVLDrawed", bnd_LC_VIPAsset_IsFDLVLDrawed},
	{"GetFDepositLevel", bnd_LC_VIPAsset_GetFDepositLevel},
	{"GetProfitValue", bnd_LC_VIPAsset_GetProfitValue},
	{"IsFlagSet", bnd_LC_VIPAsset_IsFlagSet},
	{"GetPrivilegeTalkTimes", bnd_LC_VIPAsset_GetPrivilegeTalkTimes},
	{"GetUpgradceCreditGrowthValue", bnd_LC_VIPAsset_GetUpgradceCreditGrowthValue},
	{"GetCreditGrowthValue", bnd_LC_VIPAsset_GetCreditGrowthValue},
	{"GetCharTypeInfo", bnd_LC_VIPAsset_GetCharTypeInfo},
	{"IsGetTodayGift", bnd_LC_VIPAsset_IsGetTodayGift},
	{"GetMaxLevel", bnd_LC_VIPAsset_GetMaxLevel},
	{NULL, NULL}
	};
	static int luaopen_LC_VIPAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_VIPAsset", 0, lib_LC_VIPAsset, bnd_LuaDestroy_LC_VIPAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_VIPFDepositEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_VIPFDepositEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_VIPFDepositEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_VIPFDepositEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_VIPFDepositEntry* h = (GameLogic::LC_VIPFDepositEntry*) binder.CheckUserType(1, "LC_VIPFDepositEntry");
		binder.CheckUserType(1, "LC_VIPFDepositEntry");
		return 0;
	}
	static int bnd_LC_VIPFDepositEntry_GetExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetExp, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetCash, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetSP, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetItemsCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetItemsCount, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetItemIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetItemIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetItemCountByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetItemCountByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetItemDes1ByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetItemDes1ByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_VIPFDepositEntry_GetItemDes2ByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_VIPFDepositEntry* pkAPI = (GameLogic::LC_VIPFDepositEntry*)binder.CheckUserType(1, "LC_VIPFDepositEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_VIPFDepositEntry::GetItemDes2ByIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_VIPFDepositEntry[] = {
	{"Create", bnd_LuaCreate_LC_VIPFDepositEntry},
	{"GetExp", bnd_LC_VIPFDepositEntry_GetExp},
	{"GetCash", bnd_LC_VIPFDepositEntry_GetCash},
	{"GetSP", bnd_LC_VIPFDepositEntry_GetSP},
	{"GetItemsCount", bnd_LC_VIPFDepositEntry_GetItemsCount},
	{"GetItemIDByIndex", bnd_LC_VIPFDepositEntry_GetItemIDByIndex},
	{"GetItemCountByIndex", bnd_LC_VIPFDepositEntry_GetItemCountByIndex},
	{"GetItemDes1ByIndex", bnd_LC_VIPFDepositEntry_GetItemDes1ByIndex},
	{"GetItemDes2ByIndex", bnd_LC_VIPFDepositEntry_GetItemDes2ByIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_VIPFDepositEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_VIPFDepositEntry", 0, lib_LC_VIPFDepositEntry, bnd_LuaDestroy_LC_VIPFDepositEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SignInAssert Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SignInAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SignInAssert");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SignInAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SignInAssert* h = (GameLogic::LC_SignInAssert*) binder.CheckUserType(1, "LC_SignInAssert");
		binder.CheckUserType(1, "LC_SignInAssert");
		return 0;
	}
	static int bnd_LC_SignInAssert_GetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetCount, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_IsSignIn(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::IsSignIn, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_GetSignInReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetSignInReward, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_GetReSignInTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetReSignInTime, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_IsRewardVaild(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::IsRewardVaild, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_IsSignInThisMonth(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::IsSignInThisMonth, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_GetMaxReSignInTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetMaxReSignInTime, L, 2);
		return 1;
	}
	static int bnd_LC_SignInAssert_GetTotalCnt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SignInAssert* pkAPI = (GameLogic::LC_SignInAssert*)binder.CheckUserType(1, "LC_SignInAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SignInAssert::GetTotalCnt, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SignInAssert[] = {
	{"Create", bnd_LuaCreate_LC_SignInAssert},
	{"GetCount", bnd_LC_SignInAssert_GetCount},
	{"IsSignIn", bnd_LC_SignInAssert_IsSignIn},
	{"GetDirtyFlagRevisionID", bnd_LC_SignInAssert_GetDirtyFlagRevisionID},
	{"GetSignInReward", bnd_LC_SignInAssert_GetSignInReward},
	{"GetReSignInTime", bnd_LC_SignInAssert_GetReSignInTime},
	{"IsRewardVaild", bnd_LC_SignInAssert_IsRewardVaild},
	{"IsSignInThisMonth", bnd_LC_SignInAssert_IsSignInThisMonth},
	{"GetMaxReSignInTime", bnd_LC_SignInAssert_GetMaxReSignInTime},
	{"GetTotalCnt", bnd_LC_SignInAssert_GetTotalCnt},
	{NULL, NULL}
	};
	static int luaopen_LC_SignInAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SignInAssert", 0, lib_LC_SignInAssert, bnd_LuaDestroy_LC_SignInAssert);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_RaidAssert Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_RaidAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_RaidAssert* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_RaidAssert");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_RaidAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_RaidAssert* h = (GameLogic::LC_RaidAssert*) binder.CheckUserType(1, "LC_RaidAssert");
		binder.CheckUserType(1, "LC_RaidAssert");
		return 0;
	}
	static int bnd_LC_RaidAssert_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_RaidAssert* pkAPI = (GameLogic::LC_RaidAssert*)binder.CheckUserType(1, "LC_RaidAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_RaidAssert::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_RaidAssert_GetRaidStep(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_RaidAssert* pkAPI = (GameLogic::LC_RaidAssert*)binder.CheckUserType(1, "LC_RaidAssert");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_RaidAssert::GetRaidStep, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_RaidAssert[] = {
	{"Create", bnd_LuaCreate_LC_RaidAssert},
	{"GetDirtyFlagRevisionID", bnd_LC_RaidAssert_GetDirtyFlagRevisionID},
	{"GetRaidStep", bnd_LC_RaidAssert_GetRaidStep},
	{NULL, NULL}
	};
	static int luaopen_LC_RaidAssert(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_RaidAssert", 0, lib_LC_RaidAssert, bnd_LuaDestroy_LC_RaidAssert);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_OpenAbilityAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_OpenAbilityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_OpenAbilityAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_OpenAbilityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_OpenAbilityAsset* h = (GameLogic::LC_OpenAbilityAsset*) binder.CheckUserType(1, "LC_OpenAbilityAsset");
		binder.CheckUserType(1, "LC_OpenAbilityAsset");
		return 0;
	}
	static int bnd_LC_OpenAbilityAsset_GetCumTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* pkAPI = (GameLogic::LC_OpenAbilityAsset*)binder.CheckUserType(1, "LC_OpenAbilityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_OpenAbilityAsset::GetCumTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_OpenAbilityAsset_GetTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* pkAPI = (GameLogic::LC_OpenAbilityAsset*)binder.CheckUserType(1, "LC_OpenAbilityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_OpenAbilityAsset::GetTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_OpenAbilityAsset_GetTotalTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* pkAPI = (GameLogic::LC_OpenAbilityAsset*)binder.CheckUserType(1, "LC_OpenAbilityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_OpenAbilityAsset::GetTotalTime, L, 2);
		return 1;
	}
	static int bnd_LC_OpenAbilityAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* pkAPI = (GameLogic::LC_OpenAbilityAsset*)binder.CheckUserType(1, "LC_OpenAbilityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_OpenAbilityAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_OpenAbilityAsset_IsAbilityOpened(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_OpenAbilityAsset* pkAPI = (GameLogic::LC_OpenAbilityAsset*)binder.CheckUserType(1, "LC_OpenAbilityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_OpenAbilityAsset::IsAbilityOpened, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_OpenAbilityAsset[] = {
	{"Create", bnd_LuaCreate_LC_OpenAbilityAsset},
	{"GetCumTimeStamp", bnd_LC_OpenAbilityAsset_GetCumTimeStamp},
	{"GetTimeStamp", bnd_LC_OpenAbilityAsset_GetTimeStamp},
	{"GetTotalTime", bnd_LC_OpenAbilityAsset_GetTotalTime},
	{"GetDirtyFlagRevisionID", bnd_LC_OpenAbilityAsset_GetDirtyFlagRevisionID},
	{"IsAbilityOpened", bnd_LC_OpenAbilityAsset_IsAbilityOpened},
	{NULL, NULL}
	};
	static int luaopen_LC_OpenAbilityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_OpenAbilityAsset", 0, lib_LC_OpenAbilityAsset, bnd_LuaDestroy_LC_OpenAbilityAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SubordinateAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SubordinateAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SubordinateAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SubordinateAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_SubordinateAsset* h = (GameLogic::LC_SubordinateAsset*) binder.CheckUserType(1, "LC_SubordinateAsset");
		binder.CheckUserType(1, "LC_SubordinateAsset");
		return 0;
	}
	static int bnd_LC_SubordinateAsset_ChangeSetTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::ChangeSetTransform, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetSetTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetSetTransform, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetBuyTalismanExpCnt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetBuyTalismanExpCnt, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetTalismanExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetTalismanExp, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetAttributeLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetAttributeLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetAttributeMinLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetAttributeMinLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetAttributeMaxLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetAttributeMaxLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetAttributeValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetAttributeValue, L, 2);
		return 1;
	}
	static int bnd_LC_SubordinateAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_SubordinateAsset* pkAPI = (GameLogic::LC_SubordinateAsset*)binder.CheckUserType(1, "LC_SubordinateAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_SubordinateAsset::GetCombatScore, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SubordinateAsset[] = {
	{"Create", bnd_LuaCreate_LC_SubordinateAsset},
	{"ChangeSetTransform", bnd_LC_SubordinateAsset_ChangeSetTransform},
	{"GetSetTransform", bnd_LC_SubordinateAsset_GetSetTransform},
	{"GetBuyTalismanExpCnt", bnd_LC_SubordinateAsset_GetBuyTalismanExpCnt},
	{"GetTalismanExp", bnd_LC_SubordinateAsset_GetTalismanExp},
	{"GetAttributeLevel", bnd_LC_SubordinateAsset_GetAttributeLevel},
	{"GetAttributeMinLevel", bnd_LC_SubordinateAsset_GetAttributeMinLevel},
	{"GetAttributeMaxLevel", bnd_LC_SubordinateAsset_GetAttributeMaxLevel},
	{"GetAttributeValue", bnd_LC_SubordinateAsset_GetAttributeValue},
	{"GetCombatScore", bnd_LC_SubordinateAsset_GetCombatScore},
	{NULL, NULL}
	};
	static int luaopen_LC_SubordinateAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SubordinateAsset", 0, lib_LC_SubordinateAsset, bnd_LuaDestroy_LC_SubordinateAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_MeltAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_MeltAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MeltAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_MeltAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_MeltAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_MeltAsset* h = (GameLogic::LC_MeltAsset*) binder.CheckUserType(1, "LC_MeltAsset");
		binder.CheckUserType(1, "LC_MeltAsset");
		return 0;
	}
	static int bnd_LC_MeltAsset_GetMeltLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MeltAsset* pkAPI = (GameLogic::LC_MeltAsset*)binder.CheckUserType(1, "LC_MeltAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MeltAsset::GetMeltLevel, L, 2);
		return 1;
	}
	static int bnd_LC_MeltAsset_GetMeltExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MeltAsset* pkAPI = (GameLogic::LC_MeltAsset*)binder.CheckUserType(1, "LC_MeltAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MeltAsset::GetMeltExp, L, 2);
		return 1;
	}
	static int bnd_LC_MeltAsset_GetTotalCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_MeltAsset* pkAPI = (GameLogic::LC_MeltAsset*)binder.CheckUserType(1, "LC_MeltAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_MeltAsset::GetTotalCombatScore, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_MeltAsset[] = {
	{"Create", bnd_LuaCreate_LC_MeltAsset},
	{"GetMeltLevel", bnd_LC_MeltAsset_GetMeltLevel},
	{"GetMeltExp", bnd_LC_MeltAsset_GetMeltExp},
	{"GetTotalCombatScore", bnd_LC_MeltAsset_GetTotalCombatScore},
	{NULL, NULL}
	};
	static int luaopen_LC_MeltAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_MeltAsset", 0, lib_LC_MeltAsset, bnd_LuaDestroy_LC_MeltAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_BoneSoulAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_BoneSoulAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_BoneSoulAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_BoneSoulAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_BoneSoulAsset* h = (GameLogic::LC_BoneSoulAsset*) binder.CheckUserType(1, "LC_BoneSoulAsset");
		binder.CheckUserType(1, "LC_BoneSoulAsset");
		return 0;
	}
	static int bnd_LC_BoneSoulAsset_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_BoneSoulAsset_GetDayCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetDayCount, L, 2);
		return 1;
	}
	static int bnd_LC_BoneSoulAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_BoneSoulAsset_GetAttrValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetAttrValue, L, 2);
		return 1;
	}
	static int bnd_LC_BoneSoulAsset_GetSkillStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetSkillStar, L, 2);
		return 1;
	}
	static int bnd_LC_BoneSoulAsset_GetAddRate(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_BoneSoulAsset* pkAPI = (GameLogic::LC_BoneSoulAsset*)binder.CheckUserType(1, "LC_BoneSoulAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_BoneSoulAsset::GetAddRate, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_BoneSoulAsset[] = {
	{"Create", bnd_LuaCreate_LC_BoneSoulAsset},
	{"GetLevel", bnd_LC_BoneSoulAsset_GetLevel},
	{"GetDayCount", bnd_LC_BoneSoulAsset_GetDayCount},
	{"GetCombatScore", bnd_LC_BoneSoulAsset_GetCombatScore},
	{"GetAttrValue", bnd_LC_BoneSoulAsset_GetAttrValue},
	{"GetSkillStar", bnd_LC_BoneSoulAsset_GetSkillStar},
	{"GetAddRate", bnd_LC_BoneSoulAsset_GetAddRate},
	{NULL, NULL}
	};
	static int luaopen_LC_BoneSoulAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_BoneSoulAsset", 0, lib_LC_BoneSoulAsset, bnd_LuaDestroy_LC_BoneSoulAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_StarsRuneAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_StarsRuneAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_StarsRuneAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_StarsRuneAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_StarsRuneAsset* h = (GameLogic::LC_StarsRuneAsset*) binder.CheckUserType(1, "LC_StarsRuneAsset");
		binder.CheckUserType(1, "LC_StarsRuneAsset");
		return 0;
	}
	static int bnd_LC_StarsRuneAsset_GetMaxCategory(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetMaxCategory, L, 2);
		return 1;
	}
	static int bnd_LC_StarsRuneAsset_GetTotalCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetTotalCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_StarsRuneAsset_GetPrimeStarsRuneLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetPrimeStarsRuneLevel, L, 2);
		return 1;
	}
	static int bnd_LC_StarsRuneAsset_GetStarsRuneLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetStarsRuneLevel, L, 2);
		return 1;
	}
	static int bnd_LC_StarsRuneAsset_GetStarsRuneAttr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetStarsRuneAttr, L, 2);
		return 1;
	}
	static int bnd_LC_StarsRuneAsset_GetStarsRuneCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_StarsRuneAsset* pkAPI = (GameLogic::LC_StarsRuneAsset*)binder.CheckUserType(1, "LC_StarsRuneAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_StarsRuneAsset::GetStarsRuneCombatScore, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_StarsRuneAsset[] = {
	{"Create", bnd_LuaCreate_LC_StarsRuneAsset},
	{"GetMaxCategory", bnd_LC_StarsRuneAsset_GetMaxCategory},
	{"GetTotalCombatScore", bnd_LC_StarsRuneAsset_GetTotalCombatScore},
	{"GetPrimeStarsRuneLevel", bnd_LC_StarsRuneAsset_GetPrimeStarsRuneLevel},
	{"GetStarsRuneLevel", bnd_LC_StarsRuneAsset_GetStarsRuneLevel},
	{"GetStarsRuneAttr", bnd_LC_StarsRuneAsset_GetStarsRuneAttr},
	{"GetStarsRuneCombatScore", bnd_LC_StarsRuneAsset_GetStarsRuneCombatScore},
	{NULL, NULL}
	};
	static int luaopen_LC_StarsRuneAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_StarsRuneAsset", 0, lib_LC_StarsRuneAsset, bnd_LuaDestroy_LC_StarsRuneAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CommonStatRewardDataEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CommonStatRewardDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CommonStatRewardDataEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CommonStatRewardDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_CommonStatRewardDataEntry* h = (GameLogic::LC_CommonStatRewardDataEntry*) binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		return 0;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetItemsCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetItemsCount, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetItemIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetItemIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetItemCountByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetItemCountByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetItemCountString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetItemCountString, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetExp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetSp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetSp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetGold, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetCustomA(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetCustomA, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetCustomB(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetCustomB, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatRewardDataEntry_GetSaveIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatRewardDataEntry* pkAPI = (GameLogic::LC_CommonStatRewardDataEntry*)binder.CheckUserType(1, "LC_CommonStatRewardDataEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatRewardDataEntry::GetSaveIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CommonStatRewardDataEntry[] = {
	{"Create", bnd_LuaCreate_LC_CommonStatRewardDataEntry},
	{"GetItemsCount", bnd_LC_CommonStatRewardDataEntry_GetItemsCount},
	{"GetItemIDByIndex", bnd_LC_CommonStatRewardDataEntry_GetItemIDByIndex},
	{"GetItemCountByIndex", bnd_LC_CommonStatRewardDataEntry_GetItemCountByIndex},
	{"GetItemCountString", bnd_LC_CommonStatRewardDataEntry_GetItemCountString},
	{"GetExp", bnd_LC_CommonStatRewardDataEntry_GetExp},
	{"GetSp", bnd_LC_CommonStatRewardDataEntry_GetSp},
	{"GetGold", bnd_LC_CommonStatRewardDataEntry_GetGold},
	{"GetCustomA", bnd_LC_CommonStatRewardDataEntry_GetCustomA},
	{"GetCustomB", bnd_LC_CommonStatRewardDataEntry_GetCustomB},
	{"GetSaveIndex", bnd_LC_CommonStatRewardDataEntry_GetSaveIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_CommonStatRewardDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CommonStatRewardDataEntry", 0, lib_LC_CommonStatRewardDataEntry, bnd_LuaDestroy_LC_CommonStatRewardDataEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ActorOperationEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ActorOperationEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ActorOperationEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ActorOperationEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ActorOperationEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ActorOperationEntry* h = (GameLogic::LC_ActorOperationEntry*) binder.CheckUserType(1, "LC_ActorOperationEntry");
		binder.CheckUserType(1, "LC_ActorOperationEntry");
		return 0;
	}
	static const luaL_reg lib_LC_ActorOperationEntry[] = {
	{"Create", bnd_LuaCreate_LC_ActorOperationEntry},
	{NULL, NULL}
	};
	static int luaopen_LC_ActorOperationEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ActorOperationEntry", 0, lib_LC_ActorOperationEntry, bnd_LuaDestroy_LC_ActorOperationEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////GuildWareHousePack Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_GuildWareHousePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::GuildWareHousePack* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "GuildWareHousePack");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_GuildWareHousePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::GuildWareHousePack* h = (GameLogic::GuildWareHousePack*) binder.CheckUserType(1, "GuildWareHousePack");
		binder.CheckUserType(1, "GuildWareHousePack");
		return 0;
	}
	static int bnd_GuildWareHousePack_GetPackCapacity(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::GuildWareHousePack* pkAPI = (GameLogic::GuildWareHousePack*)binder.CheckUserType(1, "GuildWareHousePack");
		Utility::LuaCall(*pkAPI, &GameLogic::GuildWareHousePack::GetPackCapacity, L, 2);
		return 1;
	}
	static int bnd_GuildWareHousePack_GetPackSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::GuildWareHousePack* pkAPI = (GameLogic::GuildWareHousePack*)binder.CheckUserType(1, "GuildWareHousePack");
		Utility::LuaCall(*pkAPI, &GameLogic::GuildWareHousePack::GetPackSize, L, 2);
		return 1;
	}
	static int bnd_GuildWareHousePack_GetBackPackEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::GuildWareHousePack* pkAPI = (GameLogic::GuildWareHousePack*)binder.CheckUserType(1, "GuildWareHousePack");
		Utility::LuaCall(*pkAPI, &GameLogic::GuildWareHousePack::GetBackPackEntry, L, 2);
		return 1;
	}
	static const luaL_reg lib_GuildWareHousePack[] = {
	{"Create", bnd_LuaCreate_GuildWareHousePack},
	{"GetPackCapacity", bnd_GuildWareHousePack_GetPackCapacity},
	{"GetPackSize", bnd_GuildWareHousePack_GetPackSize},
	{"GetBackPackEntry", bnd_GuildWareHousePack_GetBackPackEntry},
	{NULL, NULL}
	};
	static int luaopen_GuildWareHousePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("GuildWareHousePack", 0, lib_GuildWareHousePack, bnd_LuaDestroy_GuildWareHousePack);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildHomeMgr Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildHomeMgr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* h = GameLogic::LC_ClientGuildHomeMgr::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildHomeMgr");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildHomeMgr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientGuildHomeMgr* h = (GameLogic::LC_ClientGuildHomeMgr*) binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		return 0;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestUpgradeNPC(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestUpgradeNPC, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestPutIntoGuildWarehouse(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestPutIntoGuildWarehouse, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestGetGuildWareHouseInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestGetGuildWareHouseInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetGuildWareHousePack(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetGuildWareHousePack, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestGetPrizeOfKillThief(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestGetPrizeOfKillThief, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestGetKillThiefInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestGetKillThiefInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_RequestOpenKillThief(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::RequestOpenKillThief, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetThiefCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetThiefCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetIsInThief(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetIsInThief, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetRecordTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetRecordTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetGuildContribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetGuildContribute, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildHomeMgr_GetEXP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientGuildHomeMgr* pkAPI = (GameLogic::LC_ClientGuildHomeMgr*)binder.CheckUserType(1, "LC_ClientGuildHomeMgr");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientGuildHomeMgr::GetEXP, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuildHomeMgr[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildHomeMgr},
	{"RequestUpgradeNPC", bnd_LC_ClientGuildHomeMgr_RequestUpgradeNPC},
	{"RequestPutIntoGuildWarehouse", bnd_LC_ClientGuildHomeMgr_RequestPutIntoGuildWarehouse},
	{"RequestGetGuildWareHouseInfo", bnd_LC_ClientGuildHomeMgr_RequestGetGuildWareHouseInfo},
	{"GetGuildWareHousePack", bnd_LC_ClientGuildHomeMgr_GetGuildWareHousePack},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientGuildHomeMgr_GetDirtyFlagRevisionID},
	{"RequestGetPrizeOfKillThief", bnd_LC_ClientGuildHomeMgr_RequestGetPrizeOfKillThief},
	{"RequestGetKillThiefInfo", bnd_LC_ClientGuildHomeMgr_RequestGetKillThiefInfo},
	{"RequestOpenKillThief", bnd_LC_ClientGuildHomeMgr_RequestOpenKillThief},
	{"GetThiefCount", bnd_LC_ClientGuildHomeMgr_GetThiefCount},
	{"GetIsInThief", bnd_LC_ClientGuildHomeMgr_GetIsInThief},
	{"GetRecordTime", bnd_LC_ClientGuildHomeMgr_GetRecordTime},
	{"GetGuildContribute", bnd_LC_ClientGuildHomeMgr_GetGuildContribute},
	{"GetEXP", bnd_LC_ClientGuildHomeMgr_GetEXP},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildHomeMgr(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildHomeMgr", 0, lib_LC_ClientGuildHomeMgr, bnd_LuaDestroy_LC_ClientGuildHomeMgr);
		return 1;
	}
	///////////////////////////////////////////////
	////////UI_UIManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_UI_UIManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* h = UI_UIManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "UI_UIManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_UI_UIManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//UI_UIManager* h = (UI_UIManager*) binder.CheckUserType(1, "UI_UIManager");
		binder.CheckUserType(1, "UI_UIManager");
		return 0;
	}
	static int bnd_UI_UIManager_GoToGameScreen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GoToGameScreen, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GoToLoginScreen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GoToLoginScreen, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GoToAnnounceScreen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GoToAnnounceScreen, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_SetUIMouseLogicType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::SetUIMouseLogicType, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GetUIMouseLogicType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetUIMouseLogicType, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_PlaySound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall<UI_UIManager, int, const char*>(*pkAPI ,&UI_UIManager::PlaySound , L , 2);
		return 1;
	}		
	static int bnd_UI_UIManager_PlayEventSound(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::PlayEventSound, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_StopAudioSource(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::StopAudioSource, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_StopAudioSourceFading(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::StopAudioSourceFading, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateAvatarTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateAvatarTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateWildPrincesBossTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateWildPrincesBossTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateTalkNpcTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateTalkNpcTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateVehicleTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateVehicleTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSkinTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSkinTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateActorVehicleTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateActorVehicleTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateArenaBattleActor(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateArenaBattleActor, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateNonpareilItemAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateNonpareilItemAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateArrowTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateArrowTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateDevaEyeTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateDevaEyeTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateVehicleFightingTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateVehicleFightingTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSpiritPetTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSpiritPetTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSpiritWeaponTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSpiritWeaponTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateHiddenWeaponTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateHiddenWeaponTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateGodWeaponTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateGodWeaponTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateFabaoTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateFabaoTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateGodWingTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateGodWingTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdatePloughTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdatePloughTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateFanTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateFanTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSuperBowTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSuperBowTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateCimeliaHookTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateCimeliaHookTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSpiritFanTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSpiritFanTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GetResolution(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetResolution, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_GetResolutionCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetResolutionCount, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_GetLoadingTip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetLoadingTip, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_SetWorldMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::SetWorldMapID, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GetWorldMapID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetWorldMapID, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_ActiveAvatarGroup(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::ActiveAvatarGroup, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_ResetUIRoot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::ResetUIRoot, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_RemoveRichInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::RemoveRichInfo, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_UpdateEscUiChar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateEscUiChar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateAvatarCameraPosition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateAvatarCameraPosition, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateRankingWholeBodyAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateRankingWholeBodyAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateHolyFlamAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateHolyFlamAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdatePlatform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdatePlatform, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateToyPet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateToyPet, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateChainSoulBoss(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateChainSoulBoss, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateTeamRaidBossTexture(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateTeamRaidBossTexture, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateSiegeMachineryAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateSiegeMachineryAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_PlayCharAnimation(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::PlayCharAnimation, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_AttachFxOnAvatarModel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::AttachFxOnAvatarModel, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_DetachFxOnAvatarModel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::DetachFxOnAvatarModel, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateGreatKungFuRemainAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateGreatKungFuRemainAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateFunctionPreviewBtnAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateFunctionPreviewBtnAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_SetWorldMapRoadLineVisible(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::SetWorldMapRoadLineVisible, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_UpdateViewInfoAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateViewInfoAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateTreasureBoxAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateTreasureBoxAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateJiangjunfuAvatar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateJiangjunfuAvatar, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateHookBot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateHookBot, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateHookBotMonster(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateHookBotMonster, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_UpdateHookBotBoxScene(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::UpdateHookBotBoxScene, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_IsEasyModel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::IsEasyModel, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_IsHookProfit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::IsHookProfit, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_ResetEasyModelTick(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::ResetEasyModelTick, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_SetEasyModeTic(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::SetEasyModeTic, L, 2);
		return 0;
	}		
	static int bnd_UI_UIManager_GetResetFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::GetResetFlag, L, 2);
		return 1;
	}
	static int bnd_UI_UIManager_IsGameScreen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		UI_UIManager* pkAPI = (UI_UIManager*)binder.CheckUserType(1, "UI_UIManager");
		Utility::LuaCall(*pkAPI, &UI_UIManager::IsGameScreen, L, 2);
		return 1;
	}
	static const luaL_reg lib_UI_UIManager[] = {
	{"Create", bnd_LuaCreate_UI_UIManager},
	{"GoToGameScreen", bnd_UI_UIManager_GoToGameScreen},
	{"GoToLoginScreen", bnd_UI_UIManager_GoToLoginScreen},
	{"GoToAnnounceScreen", bnd_UI_UIManager_GoToAnnounceScreen},
	{"SetUIMouseLogicType", bnd_UI_UIManager_SetUIMouseLogicType},
	{"GetUIMouseLogicType", bnd_UI_UIManager_GetUIMouseLogicType},
	{"PlaySound", bnd_UI_UIManager_PlaySound},
	{"PlayEventSound", bnd_UI_UIManager_PlayEventSound},
	{"StopAudioSource", bnd_UI_UIManager_StopAudioSource},
	{"StopAudioSourceFading", bnd_UI_UIManager_StopAudioSourceFading},
	{"UpdateAvatarTexture", bnd_UI_UIManager_UpdateAvatarTexture},
	{"UpdateWildPrincesBossTexture", bnd_UI_UIManager_UpdateWildPrincesBossTexture},
	{"UpdateTalkNpcTexture", bnd_UI_UIManager_UpdateTalkNpcTexture},
	{"UpdateVehicleTexture", bnd_UI_UIManager_UpdateVehicleTexture},
	{"UpdateSkinTexture", bnd_UI_UIManager_UpdateSkinTexture},
	{"UpdateActorVehicleTexture", bnd_UI_UIManager_UpdateActorVehicleTexture},
	{"UpdateArenaBattleActor", bnd_UI_UIManager_UpdateArenaBattleActor},
	{"UpdateNonpareilItemAvatar", bnd_UI_UIManager_UpdateNonpareilItemAvatar},
	{"UpdateArrowTexture", bnd_UI_UIManager_UpdateArrowTexture},
	{"UpdateDevaEyeTexture", bnd_UI_UIManager_UpdateDevaEyeTexture},
	{"UpdateVehicleFightingTexture", bnd_UI_UIManager_UpdateVehicleFightingTexture},
	{"UpdateSpiritPetTexture", bnd_UI_UIManager_UpdateSpiritPetTexture},
	{"UpdateSpiritWeaponTexture", bnd_UI_UIManager_UpdateSpiritWeaponTexture},
	{"UpdateHiddenWeaponTexture", bnd_UI_UIManager_UpdateHiddenWeaponTexture},
	{"UpdateGodWeaponTexture", bnd_UI_UIManager_UpdateGodWeaponTexture},
	{"UpdateFabaoTexture", bnd_UI_UIManager_UpdateFabaoTexture},
	{"UpdateGodWingTexture", bnd_UI_UIManager_UpdateGodWingTexture},
	{"UpdatePloughTexture", bnd_UI_UIManager_UpdatePloughTexture},
	{"UpdateFanTexture", bnd_UI_UIManager_UpdateFanTexture},
	{"UpdateSuperBowTexture", bnd_UI_UIManager_UpdateSuperBowTexture},
	{"UpdateCimeliaHookTexture", bnd_UI_UIManager_UpdateCimeliaHookTexture},
	{"UpdateSpiritFanTexture", bnd_UI_UIManager_UpdateSpiritFanTexture},
	{"GetResolution", bnd_UI_UIManager_GetResolution},
	{"GetResolutionCount", bnd_UI_UIManager_GetResolutionCount},
	{"GetLoadingTip", bnd_UI_UIManager_GetLoadingTip},
	{"SetWorldMapID", bnd_UI_UIManager_SetWorldMapID},
	{"GetWorldMapID", bnd_UI_UIManager_GetWorldMapID},
	{"ActiveAvatarGroup", bnd_UI_UIManager_ActiveAvatarGroup},
	{"ResetUIRoot", bnd_UI_UIManager_ResetUIRoot},
	{"RemoveRichInfo", bnd_UI_UIManager_RemoveRichInfo},
	{"UpdateEscUiChar", bnd_UI_UIManager_UpdateEscUiChar},
	{"UpdateAvatarCameraPosition", bnd_UI_UIManager_UpdateAvatarCameraPosition},
	{"UpdateRankingWholeBodyAvatar", bnd_UI_UIManager_UpdateRankingWholeBodyAvatar},
	{"UpdateHolyFlamAvatar", bnd_UI_UIManager_UpdateHolyFlamAvatar},
	{"UpdatePlatform", bnd_UI_UIManager_UpdatePlatform},
	{"UpdateToyPet", bnd_UI_UIManager_UpdateToyPet},
	{"UpdateChainSoulBoss", bnd_UI_UIManager_UpdateChainSoulBoss},
	{"UpdateTeamRaidBossTexture", bnd_UI_UIManager_UpdateTeamRaidBossTexture},
	{"UpdateSiegeMachineryAvatar", bnd_UI_UIManager_UpdateSiegeMachineryAvatar},
	{"PlayCharAnimation", bnd_UI_UIManager_PlayCharAnimation},
	{"AttachFxOnAvatarModel", bnd_UI_UIManager_AttachFxOnAvatarModel},
	{"DetachFxOnAvatarModel", bnd_UI_UIManager_DetachFxOnAvatarModel},
	{"UpdateGreatKungFuRemainAvatar", bnd_UI_UIManager_UpdateGreatKungFuRemainAvatar},
	{"UpdateFunctionPreviewBtnAvatar", bnd_UI_UIManager_UpdateFunctionPreviewBtnAvatar},
	{"SetWorldMapRoadLineVisible", bnd_UI_UIManager_SetWorldMapRoadLineVisible},
	{"UpdateViewInfoAvatar", bnd_UI_UIManager_UpdateViewInfoAvatar},
	{"UpdateTreasureBoxAvatar", bnd_UI_UIManager_UpdateTreasureBoxAvatar},
	{"UpdateJiangjunfuAvatar", bnd_UI_UIManager_UpdateJiangjunfuAvatar},
	{"UpdateHookBot", bnd_UI_UIManager_UpdateHookBot},
	{"UpdateHookBotMonster", bnd_UI_UIManager_UpdateHookBotMonster},
	{"UpdateHookBotBoxScene", bnd_UI_UIManager_UpdateHookBotBoxScene},
	{"IsEasyModel", bnd_UI_UIManager_IsEasyModel},
	{"IsHookProfit", bnd_UI_UIManager_IsHookProfit},
	{"ResetEasyModelTick", bnd_UI_UIManager_ResetEasyModelTick},
	{"SetEasyModeTic", bnd_UI_UIManager_SetEasyModeTic},
	{"GetResetFlag", bnd_UI_UIManager_GetResetFlag},
	{"IsGameScreen", bnd_UI_UIManager_IsGameScreen},
	{NULL, NULL}
	};
	static int luaopen_UI_UIManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("UI_UIManager", 0, lib_UI_UIManager, bnd_LuaDestroy_UI_UIManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientArenaBattleChallengeInfoAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientArenaBattleChallengeInfoAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientArenaBattleChallengeInfoAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientArenaBattleChallengeInfoAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientArenaBattleChallengeInfoAsset* h = (LC_ClientArenaBattleChallengeInfoAsset*) binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		return 0;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankInfoByUserID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetUserRankInfoByUserID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetUserRankInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaTopRankUserInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetArenaTopRankUserInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaRankUserInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetArenaRankUserInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaUserRankIndexByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetArenaUserRankIndexByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaUserSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetArenaUserSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankValueByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetUserRankValueByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetRankUserSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetRankUserSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyInfoByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetSkyArenaEnermyInfoByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyPointByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetSkyArenaEnermyPointByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaBattleChallengeInfoAsset* pkAPI = (LC_ClientArenaBattleChallengeInfoAsset*)binder.CheckUserType(1, "LC_ClientArenaBattleChallengeInfoAsset");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaBattleChallengeInfoAsset::GetSkyArenaEnermyCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientArenaBattleChallengeInfoAsset[] = {
	{"Create", bnd_LuaCreate_LC_ClientArenaBattleChallengeInfoAsset},
	{"GetUserRankInfoByUserID", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankInfoByUserID},
	{"GetUserRankInfoByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankInfoByIndex},
	{"GetArenaTopRankUserInfoByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaTopRankUserInfoByIndex},
	{"GetArenaRankUserInfoByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaRankUserInfoByIndex},
	{"GetArenaUserRankIndexByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaUserRankIndexByIndex},
	{"GetArenaUserSize", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetArenaUserSize},
	{"GetUserRankValueByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetUserRankValueByIndex},
	{"GetRankUserSize", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetRankUserSize},
	{"GetSkyArenaEnermyInfoByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyInfoByIndex},
	{"GetSkyArenaEnermyPointByIndex", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyPointByIndex},
	{"GetSkyArenaEnermyCount", bnd_LC_ClientArenaBattleChallengeInfoAsset_GetSkyArenaEnermyCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientArenaBattleChallengeInfoAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientArenaBattleChallengeInfoAsset", 0, lib_LC_ClientArenaBattleChallengeInfoAsset, bnd_LuaDestroy_LC_ClientArenaBattleChallengeInfoAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserDataBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserDataBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserDataBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserDataBase* h = (LC_ClientGameEventUserDataBase*) binder.CheckUserType(1, "LC_ClientGameEventUserDataBase");
		binder.CheckUserType(1, "LC_ClientGameEventUserDataBase");
		return 0;
	}
	static const luaL_reg lib_LC_ClientGameEventUserDataBase[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserDataBase},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserDataBase", 0, lib_LC_ClientGameEventUserDataBase, bnd_LuaDestroy_LC_ClientGameEventUserDataBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserData_RaidSettle Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserData_RaidSettle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserData_RaidSettle");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserData_RaidSettle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserData_RaidSettle* h = (LC_ClientGameEventUserData_RaidSettle*) binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setresult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->result, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getresult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->result);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setlevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->level, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getlevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->level);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setexp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->exp, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getexp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->exp);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setsp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->sp, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getsp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->sp);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setmoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->money, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getmoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->money);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setitemlen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->itemlen, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getitemlen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->itemlen);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetItem(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetItem, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetItemCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setmonsters(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->monsters, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getmonsters(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->monsters);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setdeads(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->deads, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getdeads(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->deads);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Setpasstime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->passtime, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_Getpasstime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->passtime);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetendFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->endFlag, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetendFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->endFlag);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetbuddyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->buddyCount, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetbuddyCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->buddyCount);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetBuddyId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetBuddyExp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyNewLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetBuddyNewLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyOldLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_RaidSettle::GetBuddyOldLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetstoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->storyID, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetstoryID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->storyID);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetmapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->mapResID, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetmapResID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->mapResID);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SethasBuddyDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->hasBuddyDead, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GethasBuddyDead(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->hasBuddyDead);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetpreEnd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->preEnd, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetpreEnd(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->preEnd);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_SetbFirstPass(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaSetProperty(pkAPI->bFirstPass, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_RaidSettle_GetbFirstPass(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_RaidSettle* pkAPI = (LC_ClientGameEventUserData_RaidSettle*)binder.CheckUserType(1, "LC_ClientGameEventUserData_RaidSettle");
		Utility::LuaPushValue(L, pkAPI->bFirstPass);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEventUserData_RaidSettle[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserData_RaidSettle},
	{"Getresult", bnd_LC_ClientGameEventUserData_RaidSettle_Getresult},
	{"Setresult", bnd_LC_ClientGameEventUserData_RaidSettle_Setresult},
	{"Getlevel", bnd_LC_ClientGameEventUserData_RaidSettle_Getlevel},
	{"Setlevel", bnd_LC_ClientGameEventUserData_RaidSettle_Setlevel},
	{"Getexp", bnd_LC_ClientGameEventUserData_RaidSettle_Getexp},
	{"Setexp", bnd_LC_ClientGameEventUserData_RaidSettle_Setexp},
	{"Getsp", bnd_LC_ClientGameEventUserData_RaidSettle_Getsp},
	{"Setsp", bnd_LC_ClientGameEventUserData_RaidSettle_Setsp},
	{"Getmoney", bnd_LC_ClientGameEventUserData_RaidSettle_Getmoney},
	{"Setmoney", bnd_LC_ClientGameEventUserData_RaidSettle_Setmoney},
	{"Getitemlen", bnd_LC_ClientGameEventUserData_RaidSettle_Getitemlen},
	{"Setitemlen", bnd_LC_ClientGameEventUserData_RaidSettle_Setitemlen},
	{"GetItem", bnd_LC_ClientGameEventUserData_RaidSettle_GetItem},
	{"GetItemCount", bnd_LC_ClientGameEventUserData_RaidSettle_GetItemCount},
	{"Getmonsters", bnd_LC_ClientGameEventUserData_RaidSettle_Getmonsters},
	{"Setmonsters", bnd_LC_ClientGameEventUserData_RaidSettle_Setmonsters},
	{"Getdeads", bnd_LC_ClientGameEventUserData_RaidSettle_Getdeads},
	{"Setdeads", bnd_LC_ClientGameEventUserData_RaidSettle_Setdeads},
	{"Getpasstime", bnd_LC_ClientGameEventUserData_RaidSettle_Getpasstime},
	{"Setpasstime", bnd_LC_ClientGameEventUserData_RaidSettle_Setpasstime},
	{"GetendFlag", bnd_LC_ClientGameEventUserData_RaidSettle_GetendFlag},
	{"SetendFlag", bnd_LC_ClientGameEventUserData_RaidSettle_SetendFlag},
	{"GetbuddyCount", bnd_LC_ClientGameEventUserData_RaidSettle_GetbuddyCount},
	{"SetbuddyCount", bnd_LC_ClientGameEventUserData_RaidSettle_SetbuddyCount},
	{"GetBuddyId", bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyId},
	{"GetBuddyExp", bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyExp},
	{"GetBuddyNewLevel", bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyNewLevel},
	{"GetBuddyOldLevel", bnd_LC_ClientGameEventUserData_RaidSettle_GetBuddyOldLevel},
	{"GetstoryID", bnd_LC_ClientGameEventUserData_RaidSettle_GetstoryID},
	{"SetstoryID", bnd_LC_ClientGameEventUserData_RaidSettle_SetstoryID},
	{"GetmapResID", bnd_LC_ClientGameEventUserData_RaidSettle_GetmapResID},
	{"SetmapResID", bnd_LC_ClientGameEventUserData_RaidSettle_SetmapResID},
	{"GethasBuddyDead", bnd_LC_ClientGameEventUserData_RaidSettle_GethasBuddyDead},
	{"SethasBuddyDead", bnd_LC_ClientGameEventUserData_RaidSettle_SethasBuddyDead},
	{"GetpreEnd", bnd_LC_ClientGameEventUserData_RaidSettle_GetpreEnd},
	{"SetpreEnd", bnd_LC_ClientGameEventUserData_RaidSettle_SetpreEnd},
	{"GetbFirstPass", bnd_LC_ClientGameEventUserData_RaidSettle_GetbFirstPass},
	{"SetbFirstPass", bnd_LC_ClientGameEventUserData_RaidSettle_SetbFirstPass},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserData_RaidSettle(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserData_RaidSettle", "LC_ClientGameEventUserDataBase", lib_LC_ClientGameEventUserData_RaidSettle, bnd_LuaDestroy_LC_ClientGameEventUserData_RaidSettle);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserData_String Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserData_String(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_String* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserData_String");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserData_String(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserData_String* h = (LC_ClientGameEventUserData_String*) binder.CheckUserType(1, "LC_ClientGameEventUserData_String");
		binder.CheckUserType(1, "LC_ClientGameEventUserData_String");
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_String_GetString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_String* pkAPI = (LC_ClientGameEventUserData_String*)binder.CheckUserType(1, "LC_ClientGameEventUserData_String");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_String::GetString, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEventUserData_String[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserData_String},
	{"GetString", bnd_LC_ClientGameEventUserData_String_GetString},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserData_String(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserData_String", "LC_ClientGameEventUserDataBase", lib_LC_ClientGameEventUserData_String, bnd_LuaDestroy_LC_ClientGameEventUserData_String);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientRankUserInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientRankUserInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientRankUserInfo* h = (LC_ClientRankUserInfo*) binder.CheckUserType(1, "LC_ClientRankUserInfo");
		binder.CheckUserType(1, "LC_ClientRankUserInfo");
		return 0;
	}
	static int bnd_LC_ClientRankUserInfo_GetUserID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetUserID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetServerID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetServerID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetUserName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetUserName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCommonderScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCommonderScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetActiveScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetActiveScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetAttributeValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetAttributeValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetChainAttributeValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetChainAttributeValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetIsRobot(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetIsRobot, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetGuildID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetGuildID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetBuddyRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetBuddyRankInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetPetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetPetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetPetStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetPetStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetGuildName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetGuildName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetPlatformVipLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetPlatformVipLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_IsPlatformYearVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::IsPlatformYearVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_IsPlatformVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::IsPlatformVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_IsPlatformHighVip(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::IsPlatformHighVip, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetBuddyInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetBuddyInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetAllSchemeScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetAllSchemeScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetSubInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetSubInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetBornCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetBornCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCommanderHeadFrame(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCommanderHeadFrame, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCurrentBuddyCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCurrentBuddyCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCurrentBuddyTransform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCurrentBuddyTransform, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_IsSubTransformActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::IsSubTransformActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetPetInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetPetInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetActivePetID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetActivePetID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetActiveBuddyCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetActiveBuddyCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCommanderTitleLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCommanderTitleLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetCommanderEquipInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetCommanderEquipInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetChainAttrMapScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetChainAttrMapScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetBaseAttrMapScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetBaseAttrMapScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRankUserInfo_GetRanksInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientRankUserInfo* pkAPI = (LC_ClientRankUserInfo*)binder.CheckUserType(1, "LC_ClientRankUserInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientRankUserInfo::GetRanksInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientRankUserInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientRankUserInfo},
	{"GetUserID", bnd_LC_ClientRankUserInfo_GetUserID},
	{"GetServerID", bnd_LC_ClientRankUserInfo_GetServerID},
	{"GetLevel", bnd_LC_ClientRankUserInfo_GetLevel},
	{"GetUserName", bnd_LC_ClientRankUserInfo_GetUserName},
	{"GetCommonderScore", bnd_LC_ClientRankUserInfo_GetCommonderScore},
	{"GetActiveScore", bnd_LC_ClientRankUserInfo_GetActiveScore},
	{"GetAttributeValue", bnd_LC_ClientRankUserInfo_GetAttributeValue},
	{"GetChainAttributeValue", bnd_LC_ClientRankUserInfo_GetChainAttributeValue},
	{"GetIsRobot", bnd_LC_ClientRankUserInfo_GetIsRobot},
	{"GetValue", bnd_LC_ClientRankUserInfo_GetValue},
	{"GetGuildID", bnd_LC_ClientRankUserInfo_GetGuildID},
	{"GetBuddyRankInfo", bnd_LC_ClientRankUserInfo_GetBuddyRankInfo},
	{"GetPetID", bnd_LC_ClientRankUserInfo_GetPetID},
	{"GetPetStarLevel", bnd_LC_ClientRankUserInfo_GetPetStarLevel},
	{"GetGuildName", bnd_LC_ClientRankUserInfo_GetGuildName},
	{"GetPlatformVipLevel", bnd_LC_ClientRankUserInfo_GetPlatformVipLevel},
	{"IsPlatformYearVip", bnd_LC_ClientRankUserInfo_IsPlatformYearVip},
	{"IsPlatformVip", bnd_LC_ClientRankUserInfo_IsPlatformVip},
	{"IsPlatformHighVip", bnd_LC_ClientRankUserInfo_IsPlatformHighVip},
	{"GetBuddyInfo", bnd_LC_ClientRankUserInfo_GetBuddyInfo},
	{"GetAllSchemeScore", bnd_LC_ClientRankUserInfo_GetAllSchemeScore},
	{"GetSubInfo", bnd_LC_ClientRankUserInfo_GetSubInfo},
	{"GetBornCharType", bnd_LC_ClientRankUserInfo_GetBornCharType},
	{"GetCommanderHeadFrame", bnd_LC_ClientRankUserInfo_GetCommanderHeadFrame},
	{"GetCurrentBuddyCID", bnd_LC_ClientRankUserInfo_GetCurrentBuddyCID},
	{"GetCurrentBuddyTransform", bnd_LC_ClientRankUserInfo_GetCurrentBuddyTransform},
	{"IsSubTransformActive", bnd_LC_ClientRankUserInfo_IsSubTransformActive},
	{"GetPetInfo", bnd_LC_ClientRankUserInfo_GetPetInfo},
	{"GetActivePetID", bnd_LC_ClientRankUserInfo_GetActivePetID},
	{"GetActiveBuddyCID", bnd_LC_ClientRankUserInfo_GetActiveBuddyCID},
	{"GetCommanderTitleLevel", bnd_LC_ClientRankUserInfo_GetCommanderTitleLevel},
	{"GetCommanderEquipInfo", bnd_LC_ClientRankUserInfo_GetCommanderEquipInfo},
	{"GetChainAttrMapScore", bnd_LC_ClientRankUserInfo_GetChainAttrMapScore},
	{"GetBaseAttrMapScore", bnd_LC_ClientRankUserInfo_GetBaseAttrMapScore},
	{"GetRanksInfo", bnd_LC_ClientRankUserInfo_GetRanksInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientRankUserInfo", 0, lib_LC_ClientRankUserInfo, bnd_LuaDestroy_LC_ClientRankUserInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientBattleRecordDataBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientBattleRecordDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientBattleRecordDataBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientBattleRecordDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientBattleRecordDataBase* h = (LC_ClientBattleRecordDataBase*) binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		return 0;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetUniqueID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetUniqueID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetFinalResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetFinalResult, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetFinalValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetFinalValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetLastValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetLastValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetChangeValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetChangeValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetLogTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetLogTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetUserBaseData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetUserBaseData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetRepalyIdByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetRepalyIdByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetRepalyIdValidByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetRepalyIdValidByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetBuddyCombatResult(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetBuddyCombatResult, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetBuddyBaseDataByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetBuddyBaseDataByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetReportResultByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetReportResultByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetReportGroupIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetReportGroupIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBattleRecordDataBase_GetDetailNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBattleRecordDataBase* pkAPI = (LC_ClientBattleRecordDataBase*)binder.CheckUserType(1, "LC_ClientBattleRecordDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientBattleRecordDataBase::GetDetailNumber, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientBattleRecordDataBase[] = {
	{"Create", bnd_LuaCreate_LC_ClientBattleRecordDataBase},
	{"GetUniqueID", bnd_LC_ClientBattleRecordDataBase_GetUniqueID},
	{"GetFinalResult", bnd_LC_ClientBattleRecordDataBase_GetFinalResult},
	{"GetFinalValue", bnd_LC_ClientBattleRecordDataBase_GetFinalValue},
	{"GetLastValue", bnd_LC_ClientBattleRecordDataBase_GetLastValue},
	{"GetChangeValue", bnd_LC_ClientBattleRecordDataBase_GetChangeValue},
	{"GetLogTime", bnd_LC_ClientBattleRecordDataBase_GetLogTime},
	{"GetUserBaseData", bnd_LC_ClientBattleRecordDataBase_GetUserBaseData},
	{"GetRepalyIdByIndex", bnd_LC_ClientBattleRecordDataBase_GetRepalyIdByIndex},
	{"GetRepalyIdValidByIndex", bnd_LC_ClientBattleRecordDataBase_GetRepalyIdValidByIndex},
	{"GetBuddyCombatResult", bnd_LC_ClientBattleRecordDataBase_GetBuddyCombatResult},
	{"GetBuddyBaseDataByIndex", bnd_LC_ClientBattleRecordDataBase_GetBuddyBaseDataByIndex},
	{"GetReportResultByIndex", bnd_LC_ClientBattleRecordDataBase_GetReportResultByIndex},
	{"GetReportGroupIDByIndex", bnd_LC_ClientBattleRecordDataBase_GetReportGroupIDByIndex},
	{"GetDetailNumber", bnd_LC_ClientBattleRecordDataBase_GetDetailNumber},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientBattleRecordDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientBattleRecordDataBase", 0, lib_LC_ClientBattleRecordDataBase, bnd_LuaDestroy_LC_ClientBattleRecordDataBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuessDataBase Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuessDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuessDataBase");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuessDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGuessDataBase* h = (LC_ClientGuessDataBase*) binder.CheckUserType(1, "LC_ClientGuessDataBase");
		binder.CheckUserType(1, "LC_ClientGuessDataBase");
		return 0;
	}
	static int bnd_LC_ClientGuessDataBase_GetUserBaseData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetUserBaseData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuessDataBase_GetLooked(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetLooked, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuessDataBase_GetAgainstID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetAgainstID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuessDataBase_GetSummitType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetSummitType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuessDataBase_GetChoseCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetChoseCharID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuessDataBase_GetWinerCharID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuessDataBase* pkAPI = (LC_ClientGuessDataBase*)binder.CheckUserType(1, "LC_ClientGuessDataBase");
		Utility::LuaCall(*pkAPI, &LC_ClientGuessDataBase::GetWinerCharID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuessDataBase[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuessDataBase},
	{"GetUserBaseData", bnd_LC_ClientGuessDataBase_GetUserBaseData},
	{"GetLooked", bnd_LC_ClientGuessDataBase_GetLooked},
	{"GetAgainstID", bnd_LC_ClientGuessDataBase_GetAgainstID},
	{"GetSummitType", bnd_LC_ClientGuessDataBase_GetSummitType},
	{"GetChoseCharID", bnd_LC_ClientGuessDataBase_GetChoseCharID},
	{"GetWinerCharID", bnd_LC_ClientGuessDataBase_GetWinerCharID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuessDataBase(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuessDataBase", 0, lib_LC_ClientGuessDataBase, bnd_LuaDestroy_LC_ClientGuessDataBase);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserData_ArenaBattle_BattleInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserData_ArenaBattle_BattleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserData_ArenaBattle_BattleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserData_ArenaBattle_BattleInfo* h = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*) binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Setbattlesize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaSetProperty(pkAPI->battlesize, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Getbattlesize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaPushValue(L, pkAPI->battlesize);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_SetserverFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaSetProperty(pkAPI->serverFlag, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetserverFlag(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaPushValue(L, pkAPI->serverFlag);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Settopsize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaSetProperty(pkAPI->topsize, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Gettopsize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaPushValue(L, pkAPI->topsize);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopChallengeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetTopChallengeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopChallengeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetTopChallengeName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopBeChallengeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetTopBeChallengeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopBeChallengeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetTopBeChallengeName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_TopIsSuccess(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::TopIsSuccess, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopFinalRankIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetTopFinalRankIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserChallengeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserChallengeName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserChallengeRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserBeChallengeID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserBeChallengeName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::GetUserBeChallengeRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_UserIsSuccess(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::UserIsSuccess, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_UserIsExchange(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaBattle_BattleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaBattle_BattleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaBattle_BattleInfo");
		Utility::LuaCall(*pkAPI, &LC_ClientGameEventUserData_ArenaBattle_BattleInfo::UserIsExchange, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEventUserData_ArenaBattle_BattleInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserData_ArenaBattle_BattleInfo},
	{"Getbattlesize", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Getbattlesize},
	{"Setbattlesize", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Setbattlesize},
	{"GetserverFlag", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetserverFlag},
	{"SetserverFlag", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_SetserverFlag},
	{"Gettopsize", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Gettopsize},
	{"Settopsize", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_Settopsize},
	{"GetTopChallengeID", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopChallengeID},
	{"GetTopChallengeName", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopChallengeName},
	{"GetTopBeChallengeID", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopBeChallengeID},
	{"GetTopBeChallengeName", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopBeChallengeName},
	{"TopIsSuccess", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_TopIsSuccess},
	{"GetTopFinalRankIndex", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetTopFinalRankIndex},
	{"GetUserChallengeID", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeID},
	{"GetUserChallengeName", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeName},
	{"GetUserChallengeRank", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserChallengeRank},
	{"GetUserBeChallengeID", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeID},
	{"GetUserBeChallengeName", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeName},
	{"GetUserBeChallengeRank", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_GetUserBeChallengeRank},
	{"UserIsSuccess", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_UserIsSuccess},
	{"UserIsExchange", bnd_LC_ClientGameEventUserData_ArenaBattle_BattleInfo_UserIsExchange},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserData_ArenaBattle_BattleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserData_ArenaBattle_BattleInfo", "LC_ClientGameEventUserDataBase", lib_LC_ClientGameEventUserData_ArenaBattle_BattleInfo, bnd_LuaDestroy_LC_ClientGameEventUserData_ArenaBattle_BattleInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserData_ArenaSettleInfo Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserData_ArenaSettleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserData_ArenaSettleInfo");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserData_ArenaSettleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserData_ArenaSettleInfo* h = (LC_ClientGameEventUserData_ArenaSettleInfo*) binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetiType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->iType, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetiType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->iType);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetPreIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->PreIndex, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetPreIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->PreIndex);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetCurIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->CurIndex, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetCurIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->CurIndex);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetSuccessed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->Successed, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetSuccessed(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->Successed);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->Exp, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->Exp);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->Money, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetMoney(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->Money);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->SP, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->SP);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetCourage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->Courage, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetCourage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->Courage);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetLiJin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->LiJin, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetLiJin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->LiJin);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetBeChallengerUserName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaSetProperty(pkAPI->BeChallengerUserName, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetBeChallengerUserName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_ArenaSettleInfo* pkAPI = (LC_ClientGameEventUserData_ArenaSettleInfo*)binder.CheckUserType(1, "LC_ClientGameEventUserData_ArenaSettleInfo");
		Utility::LuaPushValue(L, pkAPI->BeChallengerUserName);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEventUserData_ArenaSettleInfo[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserData_ArenaSettleInfo},
	{"GetiType", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetiType},
	{"SetiType", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetiType},
	{"GetPreIndex", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetPreIndex},
	{"SetPreIndex", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetPreIndex},
	{"GetCurIndex", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetCurIndex},
	{"SetCurIndex", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetCurIndex},
	{"GetSuccessed", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetSuccessed},
	{"SetSuccessed", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetSuccessed},
	{"GetExp", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetExp},
	{"SetExp", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetExp},
	{"GetMoney", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetMoney},
	{"SetMoney", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetMoney},
	{"GetSP", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetSP},
	{"SetSP", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetSP},
	{"GetCourage", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetCourage},
	{"SetCourage", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetCourage},
	{"GetLiJin", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetLiJin},
	{"SetLiJin", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetLiJin},
	{"GetBeChallengerUserName", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_GetBeChallengerUserName},
	{"SetBeChallengerUserName", bnd_LC_ClientGameEventUserData_ArenaSettleInfo_SetBeChallengerUserName},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserData_ArenaSettleInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserData_ArenaSettleInfo", "LC_ClientGameEventUserDataBase", lib_LC_ClientGameEventUserData_ArenaSettleInfo, bnd_LuaDestroy_LC_ClientGameEventUserData_ArenaSettleInfo);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGameEventUserData_Common Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGameEventUserData_Common(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_Common* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGameEventUserData_Common");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGameEventUserData_Common(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGameEventUserData_Common* h = (LC_ClientGameEventUserData_Common*) binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_Common_SetParam1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_Common* pkAPI = (LC_ClientGameEventUserData_Common*)binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		Utility::LuaSetProperty(pkAPI->Param1, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_Common_GetParam1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_Common* pkAPI = (LC_ClientGameEventUserData_Common*)binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		Utility::LuaPushValue(L, pkAPI->Param1);
		return 1;
	}
	static int bnd_LC_ClientGameEventUserData_Common_SetContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_Common* pkAPI = (LC_ClientGameEventUserData_Common*)binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		Utility::LuaSetProperty(pkAPI->Content, L, 2);
		return 0;
	}
	static int bnd_LC_ClientGameEventUserData_Common_GetContent(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGameEventUserData_Common* pkAPI = (LC_ClientGameEventUserData_Common*)binder.CheckUserType(1, "LC_ClientGameEventUserData_Common");
		Utility::LuaPushValue(L, pkAPI->Content);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGameEventUserData_Common[] = {
	{"Create", bnd_LuaCreate_LC_ClientGameEventUserData_Common},
	{"GetParam1", bnd_LC_ClientGameEventUserData_Common_GetParam1},
	{"SetParam1", bnd_LC_ClientGameEventUserData_Common_SetParam1},
	{"GetContent", bnd_LC_ClientGameEventUserData_Common_GetContent},
	{"SetContent", bnd_LC_ClientGameEventUserData_Common_SetContent},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGameEventUserData_Common(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGameEventUserData_Common", "LC_ClientGameEventUserDataBase", lib_LC_ClientGameEventUserData_Common, bnd_LuaDestroy_LC_ClientGameEventUserData_Common);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CommonStatAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CommonStatAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CommonStatAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CommonStatAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_CommonStatAsset* h = (GameLogic::LC_CommonStatAsset*) binder.CheckUserType(1, "LC_CommonStatAsset");
		binder.CheckUserType(1, "LC_CommonStatAsset");
		return 0;
	}
	static int bnd_LC_CommonStatAsset_GetAccuCntAll(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuCntAll, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuCntDay(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuCntDay, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuExp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuSp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuSp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuDayCnt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuDayCnt, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetCommonStatCashNeeded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetCommonStatCashNeeded, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetCommmonStatYuanBaoNeeded(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetCommmonStatYuanBaoNeeded, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetCommonStatYuanBaoNeededByTypeAndKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetCommonStatYuanBaoNeededByTypeAndKey, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuWeekCnt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuWeekCnt, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuMonthCnt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuMonthCnt, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuCurBatch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuCurBatch, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuMaxBatch(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuMaxBatch, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuKeyDayBegin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuKeyDayBegin, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsCustomReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsCustomReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetPersistTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetPersistTime, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetGameStoryCustom(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetGameStoryCustom, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetKillCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetKillCount, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetOnLineTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetOnLineTime, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetLiveness(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetLiveness, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetCharge(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetCharge, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetConsume(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetConsume, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetItemStat(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetItemStat, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetLoginDays(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetLoginDays, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetCommonStatEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetCommonStatEntry, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsFireReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsFireReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsStoryFireReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsStoryFireReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsStoryRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsStoryRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_IsBasicStatFlagSet(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::IsBasicStatFlagSet, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatAsset_GetAccuCntShunWangPlatform(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatAsset* pkAPI = (GameLogic::LC_CommonStatAsset*)binder.CheckUserType(1, "LC_CommonStatAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatAsset::GetAccuCntShunWangPlatform, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CommonStatAsset[] = {
	{"Create", bnd_LuaCreate_LC_CommonStatAsset},
	{"GetAccuCntAll", bnd_LC_CommonStatAsset_GetAccuCntAll},
	{"GetAccuCntDay", bnd_LC_CommonStatAsset_GetAccuCntDay},
	{"GetAccuExp", bnd_LC_CommonStatAsset_GetAccuExp},
	{"GetAccuSp", bnd_LC_CommonStatAsset_GetAccuSp},
	{"GetAccuDayCnt", bnd_LC_CommonStatAsset_GetAccuDayCnt},
	{"GetCommonStatCashNeeded", bnd_LC_CommonStatAsset_GetCommonStatCashNeeded},
	{"GetCommmonStatYuanBaoNeeded", bnd_LC_CommonStatAsset_GetCommmonStatYuanBaoNeeded},
	{"GetCommonStatYuanBaoNeededByTypeAndKey", bnd_LC_CommonStatAsset_GetCommonStatYuanBaoNeededByTypeAndKey},
	{"GetAccuWeekCnt", bnd_LC_CommonStatAsset_GetAccuWeekCnt},
	{"GetAccuMonthCnt", bnd_LC_CommonStatAsset_GetAccuMonthCnt},
	{"GetAccuCurBatch", bnd_LC_CommonStatAsset_GetAccuCurBatch},
	{"GetAccuMaxBatch", bnd_LC_CommonStatAsset_GetAccuMaxBatch},
	{"GetAccuKeyDayBegin", bnd_LC_CommonStatAsset_GetAccuKeyDayBegin},
	{"IsCustomReg", bnd_LC_CommonStatAsset_IsCustomReg},
	{"GetPersistTime", bnd_LC_CommonStatAsset_GetPersistTime},
	{"GetGameStoryCustom", bnd_LC_CommonStatAsset_GetGameStoryCustom},
	{"GetKillCount", bnd_LC_CommonStatAsset_GetKillCount},
	{"GetOnLineTime", bnd_LC_CommonStatAsset_GetOnLineTime},
	{"GetLiveness", bnd_LC_CommonStatAsset_GetLiveness},
	{"GetCharge", bnd_LC_CommonStatAsset_GetCharge},
	{"GetConsume", bnd_LC_CommonStatAsset_GetConsume},
	{"GetItemStat", bnd_LC_CommonStatAsset_GetItemStat},
	{"GetLoginDays", bnd_LC_CommonStatAsset_GetLoginDays},
	{"GetCommonStatEntry", bnd_LC_CommonStatAsset_GetCommonStatEntry},
	{"IsFireReg", bnd_LC_CommonStatAsset_IsFireReg},
	{"IsStoryFireReg", bnd_LC_CommonStatAsset_IsStoryFireReg},
	{"IsRewardReg", bnd_LC_CommonStatAsset_IsRewardReg},
	{"IsStoryRewardReg", bnd_LC_CommonStatAsset_IsStoryRewardReg},
	{"IsBasicStatFlagSet", bnd_LC_CommonStatAsset_IsBasicStatFlagSet},
	{"GetAccuCntShunWangPlatform", bnd_LC_CommonStatAsset_GetAccuCntShunWangPlatform},
	{NULL, NULL}
	};
	static int luaopen_LC_CommonStatAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CommonStatAsset", 0, lib_LC_CommonStatAsset, bnd_LuaDestroy_LC_CommonStatAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CommonStatEntry Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CommonStatEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CommonStatEntry");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CommonStatEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_CommonStatEntry* h = (GameLogic::LC_CommonStatEntry*) binder.CheckUserType(1, "LC_CommonStatEntry");
		binder.CheckUserType(1, "LC_CommonStatEntry");
		return 0;
	}
	static int bnd_LC_CommonStatEntry_GetStatEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::GetStatEntry, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsCustomReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsCustomReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsFireReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsFireReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsStoryFireReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsStoryFireReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsStoryRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsStoryRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_IsEnabled(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::IsEnabled, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_ResolveExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::ResolveExp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_ResolveSP(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::ResolveSP, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatEntry_ResolveGold(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatEntry* pkAPI = (GameLogic::LC_CommonStatEntry*)binder.CheckUserType(1, "LC_CommonStatEntry");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatEntry::ResolveGold, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CommonStatEntry[] = {
	{"Create", bnd_LuaCreate_LC_CommonStatEntry},
	{"GetStatEntry", bnd_LC_CommonStatEntry_GetStatEntry},
	{"IsCustomReg", bnd_LC_CommonStatEntry_IsCustomReg},
	{"IsFireReg", bnd_LC_CommonStatEntry_IsFireReg},
	{"IsStoryFireReg", bnd_LC_CommonStatEntry_IsStoryFireReg},
	{"IsRewardReg", bnd_LC_CommonStatEntry_IsRewardReg},
	{"IsStoryRewardReg", bnd_LC_CommonStatEntry_IsStoryRewardReg},
	{"IsEnabled", bnd_LC_CommonStatEntry_IsEnabled},
	{"ResolveExp", bnd_LC_CommonStatEntry_ResolveExp},
	{"ResolveSP", bnd_LC_CommonStatEntry_ResolveSP},
	{"ResolveGold", bnd_LC_CommonStatEntry_ResolveGold},
	{NULL, NULL}
	};
	static int luaopen_LC_CommonStatEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CommonStatEntry", 0, lib_LC_CommonStatEntry, bnd_LuaDestroy_LC_CommonStatEntry);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_TreasureChestsAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_TreasureChestsAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_TreasureChestsAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_TreasureChestsAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_TreasureChestsAsset* h = (GameLogic::LC_TreasureChestsAsset*) binder.CheckUserType(1, "LC_TreasureChestsAsset");
		binder.CheckUserType(1, "LC_TreasureChestsAsset");
		return 0;
	}
	static int bnd_LC_TreasureChestsAsset_GetTreasureChestPersonalLogCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* pkAPI = (GameLogic::LC_TreasureChestsAsset*)binder.CheckUserType(1, "LC_TreasureChestsAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TreasureChestsAsset::GetTreasureChestPersonalLogCount, L, 2);
		return 1;
	}
	static int bnd_LC_TreasureChestsAsset_GetItemIdByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* pkAPI = (GameLogic::LC_TreasureChestsAsset*)binder.CheckUserType(1, "LC_TreasureChestsAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TreasureChestsAsset::GetItemIdByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TreasureChestsAsset_GetItemCountByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* pkAPI = (GameLogic::LC_TreasureChestsAsset*)binder.CheckUserType(1, "LC_TreasureChestsAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TreasureChestsAsset::GetItemCountByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TreasureChestsAsset_GetTimeStampByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* pkAPI = (GameLogic::LC_TreasureChestsAsset*)binder.CheckUserType(1, "LC_TreasureChestsAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TreasureChestsAsset::GetTimeStampByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_TreasureChestsAsset_GetCashDeriveCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_TreasureChestsAsset* pkAPI = (GameLogic::LC_TreasureChestsAsset*)binder.CheckUserType(1, "LC_TreasureChestsAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_TreasureChestsAsset::GetCashDeriveCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_TreasureChestsAsset[] = {
	{"Create", bnd_LuaCreate_LC_TreasureChestsAsset},
	{"GetTreasureChestPersonalLogCount", bnd_LC_TreasureChestsAsset_GetTreasureChestPersonalLogCount},
	{"GetItemIdByIndex", bnd_LC_TreasureChestsAsset_GetItemIdByIndex},
	{"GetItemCountByIndex", bnd_LC_TreasureChestsAsset_GetItemCountByIndex},
	{"GetTimeStampByIndex", bnd_LC_TreasureChestsAsset_GetTimeStampByIndex},
	{"GetCashDeriveCount", bnd_LC_TreasureChestsAsset_GetCashDeriveCount},
	{NULL, NULL}
	};
	static int luaopen_LC_TreasureChestsAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_TreasureChestsAsset", 0, lib_LC_TreasureChestsAsset, bnd_LuaDestroy_LC_TreasureChestsAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////ACT_SecretTreasureAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_ACT_SecretTreasureAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "ACT_SecretTreasureAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_ACT_SecretTreasureAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//ACT_SecretTreasureAsset* h = (ACT_SecretTreasureAsset*) binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		return 0;
	}
	static int bnd_ACT_SecretTreasureAsset_GetScoreByClusterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::GetScoreByClusterID, L, 2);
		return 1;
	}
	static int bnd_ACT_SecretTreasureAsset_GetTimesByClusterID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::GetTimesByClusterID, L, 2);
		return 1;
	}
	static int bnd_ACT_SecretTreasureAsset_GetCatogoryTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::GetCatogoryTimes, L, 2);
		return 1;
	}
	static int bnd_ACT_SecretTreasureAsset_CheckTreasureShop(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::CheckTreasureShop, L, 2);
		return 1;
	}
	static int bnd_ACT_SecretTreasureAsset_GetLogs(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::GetLogs, L, 2);
		return 1;
	}
	static int bnd_ACT_SecretTreasureAsset_GetChestEntryTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		ACT_SecretTreasureAsset* pkAPI = (ACT_SecretTreasureAsset*)binder.CheckUserType(1, "ACT_SecretTreasureAsset");
		Utility::LuaCall(*pkAPI, &ACT_SecretTreasureAsset::GetChestEntryTime, L, 2);
		return 1;
	}
	static const luaL_reg lib_ACT_SecretTreasureAsset[] = {
	{"Create", bnd_LuaCreate_ACT_SecretTreasureAsset},
	{"GetScoreByClusterID", bnd_ACT_SecretTreasureAsset_GetScoreByClusterID},
	{"GetTimesByClusterID", bnd_ACT_SecretTreasureAsset_GetTimesByClusterID},
	{"GetCatogoryTimes", bnd_ACT_SecretTreasureAsset_GetCatogoryTimes},
	{"CheckTreasureShop", bnd_ACT_SecretTreasureAsset_CheckTreasureShop},
	{"GetLogs", bnd_ACT_SecretTreasureAsset_GetLogs},
	{"GetChestEntryTime", bnd_ACT_SecretTreasureAsset_GetChestEntryTime},
	{NULL, NULL}
	};
	static int luaopen_ACT_SecretTreasureAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("ACT_SecretTreasureAsset", 0, lib_ACT_SecretTreasureAsset, bnd_LuaDestroy_ACT_SecretTreasureAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_SkillBookAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_SkillBookAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_SkillBookAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_SkillBookAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_SkillBookAsset* h = (LC_SkillBookAsset*) binder.CheckUserType(1, "LC_SkillBookAsset");
		binder.CheckUserType(1, "LC_SkillBookAsset");
		return 0;
	}
	static int bnd_LC_SkillBookAsset_GetLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* pkAPI = (LC_SkillBookAsset*)binder.CheckUserType(1, "LC_SkillBookAsset");
		Utility::LuaCall(*pkAPI, &LC_SkillBookAsset::GetLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillBookAsset_GetNodeLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* pkAPI = (LC_SkillBookAsset*)binder.CheckUserType(1, "LC_SkillBookAsset");
		Utility::LuaCall(*pkAPI, &LC_SkillBookAsset::GetNodeLevel, L, 2);
		return 1;
	}
	static int bnd_LC_SkillBookAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* pkAPI = (LC_SkillBookAsset*)binder.CheckUserType(1, "LC_SkillBookAsset");
		Utility::LuaCall(*pkAPI, &LC_SkillBookAsset::GetCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_SkillBookAsset_IsOpen(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* pkAPI = (LC_SkillBookAsset*)binder.CheckUserType(1, "LC_SkillBookAsset");
		Utility::LuaCall(*pkAPI, &LC_SkillBookAsset::IsOpen, L, 2);
		return 1;
	}
	static int bnd_LC_SkillBookAsset_GetBuddyIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_SkillBookAsset* pkAPI = (LC_SkillBookAsset*)binder.CheckUserType(1, "LC_SkillBookAsset");
		Utility::LuaCall(*pkAPI, &LC_SkillBookAsset::GetBuddyIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_SkillBookAsset[] = {
	{"Create", bnd_LuaCreate_LC_SkillBookAsset},
	{"GetLevel", bnd_LC_SkillBookAsset_GetLevel},
	{"GetNodeLevel", bnd_LC_SkillBookAsset_GetNodeLevel},
	{"GetCombatScore", bnd_LC_SkillBookAsset_GetCombatScore},
	{"IsOpen", bnd_LC_SkillBookAsset_IsOpen},
	{"GetBuddyIndex", bnd_LC_SkillBookAsset_GetBuddyIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_SkillBookAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_SkillBookAsset", 0, lib_LC_SkillBookAsset, bnd_LuaDestroy_LC_SkillBookAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_CommonStatManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_CommonStatManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* h = GameLogic::LC_CommonStatManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_CommonStatManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_CommonStatManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_CommonStatManager* h = (GameLogic::LC_CommonStatManager*) binder.CheckUserType(1, "LC_CommonStatManager");
		binder.CheckUserType(1, "LC_CommonStatManager");
		return 0;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatMaxTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatMaxTimes, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardSp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardSp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardExp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardExp, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardCash(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardCash, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetSacrificeRewardSizeByRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetSacrificeRewardSizeByRank, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetSacrificeRewardNumByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetSacrificeRewardNumByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetSacrificeRewardItemByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetSacrificeRewardItemByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatResetVipID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatResetVipID, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetComRewardDataInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetComRewardDataInfo, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetComRewardDataInfoEx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetComRewardDataInfoEx, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardItems(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardItems, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetComRewardDataMaxKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetComRewardDataMaxKey, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardLiJin(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardLiJin, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCommonStatRewardYuanbao(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCommonStatRewardYuanbao, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetMaxCustomSettingParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetMaxCustomSettingParam, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCustomSettingParam(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCustomSettingParam, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_IsCommonStatValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::IsCommonStatValid, L, 2);
		return 1;
	}
	static int bnd_LC_CommonStatManager_GetCmnRewardDataEntry(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_CommonStatManager* pkAPI = (GameLogic::LC_CommonStatManager*)binder.CheckUserType(1, "LC_CommonStatManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_CommonStatManager::GetCmnRewardDataEntry, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_CommonStatManager[] = {
	{"Create", bnd_LuaCreate_LC_CommonStatManager},
	{"GetCommonStatMaxTimes", bnd_LC_CommonStatManager_GetCommonStatMaxTimes},
	{"GetCommonStatRewardSp", bnd_LC_CommonStatManager_GetCommonStatRewardSp},
	{"GetCommonStatRewardExp", bnd_LC_CommonStatManager_GetCommonStatRewardExp},
	{"GetCommonStatRewardCash", bnd_LC_CommonStatManager_GetCommonStatRewardCash},
	{"GetSacrificeRewardSizeByRank", bnd_LC_CommonStatManager_GetSacrificeRewardSizeByRank},
	{"GetSacrificeRewardNumByIndex", bnd_LC_CommonStatManager_GetSacrificeRewardNumByIndex},
	{"GetSacrificeRewardItemByIndex", bnd_LC_CommonStatManager_GetSacrificeRewardItemByIndex},
	{"GetCommonStatResetVipID", bnd_LC_CommonStatManager_GetCommonStatResetVipID},
	{"GetComRewardDataInfo", bnd_LC_CommonStatManager_GetComRewardDataInfo},
	{"GetComRewardDataInfoEx", bnd_LC_CommonStatManager_GetComRewardDataInfoEx},
	{"GetCommonStatRewardItems", bnd_LC_CommonStatManager_GetCommonStatRewardItems},
	{"GetComRewardDataMaxKey", bnd_LC_CommonStatManager_GetComRewardDataMaxKey},
	{"GetCommonStatRewardLiJin", bnd_LC_CommonStatManager_GetCommonStatRewardLiJin},
	{"GetCommonStatRewardYuanbao", bnd_LC_CommonStatManager_GetCommonStatRewardYuanbao},
	{"GetMaxCustomSettingParam", bnd_LC_CommonStatManager_GetMaxCustomSettingParam},
	{"GetCustomSettingParam", bnd_LC_CommonStatManager_GetCustomSettingParam},
	{"IsCommonStatValid", bnd_LC_CommonStatManager_IsCommonStatValid},
	{"GetCmnRewardDataEntry", bnd_LC_CommonStatManager_GetCmnRewardDataEntry},
	{NULL, NULL}
	};
	static int luaopen_LC_CommonStatManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_CommonStatManager", 0, lib_LC_CommonStatManager, bnd_LuaDestroy_LC_CommonStatManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientSoulRefineAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientSoulRefineAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientSoulRefineAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientSoulRefineAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientSoulRefineAsset* h = (GameLogic::LC_ClientSoulRefineAsset*) binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		return 0;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetCurrentStatNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetCurrentStatNumber, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetStarCurrentStatNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetStarCurrentStatNumber, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetAttributeMapMonsterStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetAttributeMapMonsterStar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetAttributeMapPage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetAttributeMapPage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetSoulLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetSoulLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetSoulNumber(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetSoulNumber, L, 2);
		return 1;
	}
	static int bnd_LC_ClientSoulRefineAsset_GetDirtyFlagReversionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientSoulRefineAsset* pkAPI = (GameLogic::LC_ClientSoulRefineAsset*)binder.CheckUserType(1, "LC_ClientSoulRefineAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientSoulRefineAsset::GetDirtyFlagReversionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientSoulRefineAsset[] = {
	{"Create", bnd_LuaCreate_LC_ClientSoulRefineAsset},
	{"GetCombatScore", bnd_LC_ClientSoulRefineAsset_GetCombatScore},
	{"GetCurrentStatNumber", bnd_LC_ClientSoulRefineAsset_GetCurrentStatNumber},
	{"GetStarCurrentStatNumber", bnd_LC_ClientSoulRefineAsset_GetStarCurrentStatNumber},
	{"GetAttributeMapMonsterStar", bnd_LC_ClientSoulRefineAsset_GetAttributeMapMonsterStar},
	{"GetAttributeMapPage", bnd_LC_ClientSoulRefineAsset_GetAttributeMapPage},
	{"GetSoulLevel", bnd_LC_ClientSoulRefineAsset_GetSoulLevel},
	{"GetSoulNumber", bnd_LC_ClientSoulRefineAsset_GetSoulNumber},
	{"GetDirtyFlagReversionID", bnd_LC_ClientSoulRefineAsset_GetDirtyFlagReversionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientSoulRefineAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientSoulRefineAsset", 0, lib_LC_ClientSoulRefineAsset, bnd_LuaDestroy_LC_ClientSoulRefineAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientShotActivityManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientShotActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* h = GameLogic::LC_ClientShotActivityManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientShotActivityManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientShotActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientShotActivityManager* h = (GameLogic::LC_ClientShotActivityManager*) binder.CheckUserType(1, "LC_ClientShotActivityManager");
		binder.CheckUserType(1, "LC_ClientShotActivityManager");
		return 0;
	}
	static int bnd_LC_ClientShotActivityManager_GetRankTopPlayerScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetRankTopPlayerScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetRankTopPlayerName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetRankTopPlayerName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_SetBeginIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::SetBeginIndex, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShotActivityManager_GetRankKeys(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetRankKeys, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetShotActivityEntryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetShotActivityEntryInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetShotAcitvityEntryIDByRankID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetShotAcitvityEntryIDByRankID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetShotActivityBaseEntryInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetShotActivityBaseEntryInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetMyRankIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetMyRankIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetShotActivityRankInfoByRankTypeAndIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetShotActivityRankInfoByRankTypeAndIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetRankTotalSize(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetRankTotalSize, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_DecreaseShotActivityCountInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::DecreaseShotActivityCountInfo, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientShotActivityManager_GetTopDetailRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetTopDetailRankUserInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientShotActivityManager_GetGlobalTopDetailRankUserInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientShotActivityManager* pkAPI = (GameLogic::LC_ClientShotActivityManager*)binder.CheckUserType(1, "LC_ClientShotActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientShotActivityManager::GetGlobalTopDetailRankUserInfo, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientShotActivityManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientShotActivityManager},
	{"GetRankTopPlayerScore", bnd_LC_ClientShotActivityManager_GetRankTopPlayerScore},
	{"GetRankTopPlayerName", bnd_LC_ClientShotActivityManager_GetRankTopPlayerName},
	{"SetBeginIndex", bnd_LC_ClientShotActivityManager_SetBeginIndex},
	{"GetRankKeys", bnd_LC_ClientShotActivityManager_GetRankKeys},
	{"GetShotActivityEntryInfo", bnd_LC_ClientShotActivityManager_GetShotActivityEntryInfo},
	{"GetShotAcitvityEntryIDByRankID", bnd_LC_ClientShotActivityManager_GetShotAcitvityEntryIDByRankID},
	{"GetShotActivityBaseEntryInfo", bnd_LC_ClientShotActivityManager_GetShotActivityBaseEntryInfo},
	{"GetMyRankIndex", bnd_LC_ClientShotActivityManager_GetMyRankIndex},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientShotActivityManager_GetDirtyFlagRevisionID},
	{"GetShotActivityRankInfoByRankTypeAndIndex", bnd_LC_ClientShotActivityManager_GetShotActivityRankInfoByRankTypeAndIndex},
	{"GetRankTotalSize", bnd_LC_ClientShotActivityManager_GetRankTotalSize},
	{"DecreaseShotActivityCountInfo", bnd_LC_ClientShotActivityManager_DecreaseShotActivityCountInfo},
	{"GetTopDetailRankUserInfo", bnd_LC_ClientShotActivityManager_GetTopDetailRankUserInfo},
	{"GetGlobalTopDetailRankUserInfo", bnd_LC_ClientShotActivityManager_GetGlobalTopDetailRankUserInfo},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientShotActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientShotActivityManager", 0, lib_LC_ClientShotActivityManager, bnd_LuaDestroy_LC_ClientShotActivityManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_FashionBagAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_FashionBagAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_FashionBagAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_FashionBagAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_FashionBagAsset* h = (GameLogic::LC_FashionBagAsset*) binder.CheckUserType(1, "LC_FashionBagAsset");
		binder.CheckUserType(1, "LC_FashionBagAsset");
		return 0;
	}
	static int bnd_LC_FashionBagAsset_IsHoldFashion(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::IsHoldFashion, L, 2);
		return 1;
	}
	static int bnd_LC_FashionBagAsset_GetShowFashion(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::GetShowFashion, L, 2);
		return 1;
	}
	static int bnd_LC_FashionBagAsset_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::GetCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_FashionBagAsset_GetHoldFashionAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::GetHoldFashionAttributes, L, 2);
		return 1;
	}
	static int bnd_LC_FashionBagAsset_GetFashionCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::GetFashionCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_FashionBagAsset_GetFashionHaveSuitCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_FashionBagAsset* pkAPI = (GameLogic::LC_FashionBagAsset*)binder.CheckUserType(1, "LC_FashionBagAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_FashionBagAsset::GetFashionHaveSuitCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_FashionBagAsset[] = {
	{"Create", bnd_LuaCreate_LC_FashionBagAsset},
	{"IsHoldFashion", bnd_LC_FashionBagAsset_IsHoldFashion},
	{"GetShowFashion", bnd_LC_FashionBagAsset_GetShowFashion},
	{"GetCombatScore", bnd_LC_FashionBagAsset_GetCombatScore},
	{"GetHoldFashionAttributes", bnd_LC_FashionBagAsset_GetHoldFashionAttributes},
	{"GetFashionCombatScore", bnd_LC_FashionBagAsset_GetFashionCombatScore},
	{"GetFashionHaveSuitCount", bnd_LC_FashionBagAsset_GetFashionHaveSuitCount},
	{NULL, NULL}
	};
	static int luaopen_LC_FashionBagAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_FashionBagAsset", 0, lib_LC_FashionBagAsset, bnd_LuaDestroy_LC_FashionBagAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientRumorManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientRumorManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientRumorManager* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientRumorManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientRumorManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientRumorManager* h = (GameLogic::LC_ClientRumorManager*) binder.CheckUserType(1, "LC_ClientRumorManager");
		binder.CheckUserType(1, "LC_ClientRumorManager");
		return 0;
	}
	static int bnd_LC_ClientRumorManager_GetRumorLogString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientRumorManager* pkAPI = (GameLogic::LC_ClientRumorManager*)binder.CheckUserType(1, "LC_ClientRumorManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientRumorManager::GetRumorLogString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientRumorManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientRumorManager* pkAPI = (GameLogic::LC_ClientRumorManager*)binder.CheckUserType(1, "LC_ClientRumorManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientRumorManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientRumorManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientRumorManager},
	{"GetRumorLogString", bnd_LC_ClientRumorManager_GetRumorLogString},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientRumorManager_GetDirtyFlagRevisionID},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientRumorManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientRumorManager", 0, lib_LC_ClientRumorManager, bnd_LuaDestroy_LC_ClientRumorManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientActivityManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* h = GameLogic::LC_ClientActivityManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientActivityManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientActivityManager* h = (GameLogic::LC_ClientActivityManager*) binder.CheckUserType(1, "LC_ClientActivityManager");
		binder.CheckUserType(1, "LC_ClientActivityManager");
		return 0;
	}
	static int bnd_LC_ClientActivityManager_GetActiveSchedule(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetActiveSchedule, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetActiveScheduleAlways(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetActiveScheduleAlways, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetScheduleList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetScheduleList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetRewardMaxKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetRewardMaxKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetRewardKeyIDsInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetRewardKeyIDsInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetRewardKeyIDsInfoEx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetRewardKeyIDsInfoEx, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetRewardKeyIDsWithUIRank(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetRewardKeyIDsWithUIRank, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetRewardChoiceIDsInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetRewardChoiceIDsInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetScheduleBeginTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetScheduleBeginTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetScheduleEndTimes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetScheduleEndTimes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetScheduleIDEventParams(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetScheduleIDEventParams, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetShopPriceInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetShopPriceInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetActScoreInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetActScoreInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_IsScheduleValid(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::IsScheduleValid, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetScheduleImage(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetScheduleImage, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_CheckActivityChoice(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::CheckActivityChoice, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubRankListCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubRankListCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubRankInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubActiveScheduleInfos(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubActiveScheduleInfos, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSelfSubRankInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSelfSubRankInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubBValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubBValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubRankFirstCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubRankFirstCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetSubRankFirstUID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetSubRankFirstUID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetLotteryRecordInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetLotteryRecordInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetTreasureHuntInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetTreasureHuntInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetLotteryDataById(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetLotteryDataById, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetChargeProfitBInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetChargeProfitBInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityManager_GetChargeProfitData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityManager* pkAPI = (GameLogic::LC_ClientActivityManager*)binder.CheckUserType(1, "LC_ClientActivityManager");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityManager::GetChargeProfitData, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientActivityManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientActivityManager},
	{"GetActiveSchedule", bnd_LC_ClientActivityManager_GetActiveSchedule},
	{"GetActiveScheduleAlways", bnd_LC_ClientActivityManager_GetActiveScheduleAlways},
	{"GetScheduleList", bnd_LC_ClientActivityManager_GetScheduleList},
	{"GetRewardMaxKey", bnd_LC_ClientActivityManager_GetRewardMaxKey},
	{"GetRewardKeyIDsInfo", bnd_LC_ClientActivityManager_GetRewardKeyIDsInfo},
	{"GetRewardKeyIDsInfoEx", bnd_LC_ClientActivityManager_GetRewardKeyIDsInfoEx},
	{"GetRewardKeyIDsWithUIRank", bnd_LC_ClientActivityManager_GetRewardKeyIDsWithUIRank},
	{"GetRewardChoiceIDsInfo", bnd_LC_ClientActivityManager_GetRewardChoiceIDsInfo},
	{"GetScheduleBeginTimes", bnd_LC_ClientActivityManager_GetScheduleBeginTimes},
	{"GetScheduleEndTimes", bnd_LC_ClientActivityManager_GetScheduleEndTimes},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientActivityManager_GetDirtyFlagRevisionID},
	{"GetScheduleIDEventParams", bnd_LC_ClientActivityManager_GetScheduleIDEventParams},
	{"GetShopPriceInfo", bnd_LC_ClientActivityManager_GetShopPriceInfo},
	{"GetActScoreInfo", bnd_LC_ClientActivityManager_GetActScoreInfo},
	{"IsScheduleValid", bnd_LC_ClientActivityManager_IsScheduleValid},
	{"GetScheduleImage", bnd_LC_ClientActivityManager_GetScheduleImage},
	{"CheckActivityChoice", bnd_LC_ClientActivityManager_CheckActivityChoice},
	{"GetSubRankListCount", bnd_LC_ClientActivityManager_GetSubRankListCount},
	{"GetSubRankInfo", bnd_LC_ClientActivityManager_GetSubRankInfo},
	{"GetSubActiveScheduleInfos", bnd_LC_ClientActivityManager_GetSubActiveScheduleInfos},
	{"GetSelfSubRankInfo", bnd_LC_ClientActivityManager_GetSelfSubRankInfo},
	{"GetSubBValue", bnd_LC_ClientActivityManager_GetSubBValue},
	{"GetSubRankFirstCID", bnd_LC_ClientActivityManager_GetSubRankFirstCID},
	{"GetSubRankFirstUID", bnd_LC_ClientActivityManager_GetSubRankFirstUID},
	{"GetLotteryRecordInfo", bnd_LC_ClientActivityManager_GetLotteryRecordInfo},
	{"GetTreasureHuntInfo", bnd_LC_ClientActivityManager_GetTreasureHuntInfo},
	{"GetLotteryDataById", bnd_LC_ClientActivityManager_GetLotteryDataById},
	{"GetChargeProfitBInfo", bnd_LC_ClientActivityManager_GetChargeProfitBInfo},
	{"GetChargeProfitData", bnd_LC_ClientActivityManager_GetChargeProfitData},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientActivityManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientActivityManager", 0, lib_LC_ClientActivityManager, bnd_LuaDestroy_LC_ClientActivityManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientActivityAsset Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientActivityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientActivityAsset");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientActivityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//GameLogic::LC_ClientActivityAsset* h = (GameLogic::LC_ClientActivityAsset*) binder.CheckUserType(1, "LC_ClientActivityAsset");
		binder.CheckUserType(1, "LC_ClientActivityAsset");
		return 0;
	}
	static int bnd_LC_ClientActivityAsset_IsFireReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::IsFireReg, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_IsFireRegStatType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::IsFireRegStatType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_IsRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::IsRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_IsFeedbackRewardReg(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::IsFeedbackRewardReg, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_IsRewardRegStatType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::IsRewardRegStatType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetDetailCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetDetailCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetTimeStamp(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetTimeStamp, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetDetailValue(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetDetailValue, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetDirtyFlagRevisionIDByActivityType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetDirtyFlagRevisionIDByActivityType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetShopInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetShopInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetShopRewardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetShopRewardInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetShopRewardName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetShopRewardName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetStarShopInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetStarShopInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetLotteryActivityButton(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetLotteryActivityButton, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetLotteryCardInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetLotteryCardInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetShopRewardiID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetShopRewardiID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetShopRewardMaxCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetShopRewardMaxCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientActivityAsset_GetPersistentVal(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		GameLogic::LC_ClientActivityAsset* pkAPI = (GameLogic::LC_ClientActivityAsset*)binder.CheckUserType(1, "LC_ClientActivityAsset");
		Utility::LuaCall(*pkAPI, &GameLogic::LC_ClientActivityAsset::GetPersistentVal, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientActivityAsset[] = {
	{"Create", bnd_LuaCreate_LC_ClientActivityAsset},
	{"IsFireReg", bnd_LC_ClientActivityAsset_IsFireReg},
	{"IsFireRegStatType", bnd_LC_ClientActivityAsset_IsFireRegStatType},
	{"IsRewardReg", bnd_LC_ClientActivityAsset_IsRewardReg},
	{"IsFeedbackRewardReg", bnd_LC_ClientActivityAsset_IsFeedbackRewardReg},
	{"IsRewardRegStatType", bnd_LC_ClientActivityAsset_IsRewardRegStatType},
	{"GetValue", bnd_LC_ClientActivityAsset_GetValue},
	{"GetCount", bnd_LC_ClientActivityAsset_GetCount},
	{"GetDetailCount", bnd_LC_ClientActivityAsset_GetDetailCount},
	{"GetTimeStamp", bnd_LC_ClientActivityAsset_GetTimeStamp},
	{"GetDetailValue", bnd_LC_ClientActivityAsset_GetDetailValue},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientActivityAsset_GetDirtyFlagRevisionID},
	{"GetDirtyFlagRevisionIDByActivityType", bnd_LC_ClientActivityAsset_GetDirtyFlagRevisionIDByActivityType},
	{"GetShopInfo", bnd_LC_ClientActivityAsset_GetShopInfo},
	{"GetShopRewardInfo", bnd_LC_ClientActivityAsset_GetShopRewardInfo},
	{"GetShopRewardName", bnd_LC_ClientActivityAsset_GetShopRewardName},
	{"GetStarShopInfo", bnd_LC_ClientActivityAsset_GetStarShopInfo},
	{"GetLotteryActivityButton", bnd_LC_ClientActivityAsset_GetLotteryActivityButton},
	{"GetLotteryCardInfo", bnd_LC_ClientActivityAsset_GetLotteryCardInfo},
	{"GetShopRewardiID", bnd_LC_ClientActivityAsset_GetShopRewardiID},
	{"GetShopRewardMaxCount", bnd_LC_ClientActivityAsset_GetShopRewardMaxCount},
	{"GetPersistentVal", bnd_LC_ClientActivityAsset_GetPersistentVal},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientActivityAsset(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientActivityAsset", 0, lib_LC_ClientActivityAsset, bnd_LuaDestroy_LC_ClientActivityAsset);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_AchievementManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_AchievementManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* h = LC_AchievementManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_AchievementManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_AchievementManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_AchievementManager* h = (LC_AchievementManager*) binder.CheckUserType(1, "LC_AchievementManager");
		binder.CheckUserType(1, "LC_AchievementManager");
		return 0;
	}
	static int bnd_LC_AchievementManager_GetTaskTraceAchievement(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetTaskTraceAchievement, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetItemReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetItemReward, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchieveName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchieveName, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchieveCharLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchieveCharLevel, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchievedetail(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchievedetail, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchievePoint(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchievePoint, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchieveProgress(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchieveProgress, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_IsFinishedAchieve(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::IsFinishedAchieve, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetItemCondition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetItemCondition, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetLinkID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetLinkID, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetSubClass(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetSubClass, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchievementTypeID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchievementTypeID, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetPreAchievementID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetPreAchievementID, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetPreTaskID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetPreTaskID, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchievePointInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchievePointInfo, L, 2);
		return 1;
	}
	static int bnd_LC_AchievementManager_GetAchieveSevenDaysTotalReward(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_AchievementManager* pkAPI = (LC_AchievementManager*)binder.CheckUserType(1, "LC_AchievementManager");
		Utility::LuaCall(*pkAPI, &LC_AchievementManager::GetAchieveSevenDaysTotalReward, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_AchievementManager[] = {
	{"Create", bnd_LuaCreate_LC_AchievementManager},
	{"GetTaskTraceAchievement", bnd_LC_AchievementManager_GetTaskTraceAchievement},
	{"GetItemReward", bnd_LC_AchievementManager_GetItemReward},
	{"GetAchieveName", bnd_LC_AchievementManager_GetAchieveName},
	{"GetAchieveCharLevel", bnd_LC_AchievementManager_GetAchieveCharLevel},
	{"GetAchievedetail", bnd_LC_AchievementManager_GetAchievedetail},
	{"GetAchievePoint", bnd_LC_AchievementManager_GetAchievePoint},
	{"GetAchieveProgress", bnd_LC_AchievementManager_GetAchieveProgress},
	{"IsFinishedAchieve", bnd_LC_AchievementManager_IsFinishedAchieve},
	{"GetItemCondition", bnd_LC_AchievementManager_GetItemCondition},
	{"GetLinkID", bnd_LC_AchievementManager_GetLinkID},
	{"GetSubClass", bnd_LC_AchievementManager_GetSubClass},
	{"GetAchievementTypeID", bnd_LC_AchievementManager_GetAchievementTypeID},
	{"GetPreAchievementID", bnd_LC_AchievementManager_GetPreAchievementID},
	{"GetPreTaskID", bnd_LC_AchievementManager_GetPreTaskID},
	{"GetAchievePointInfo", bnd_LC_AchievementManager_GetAchievePointInfo},
	{"GetAchieveSevenDaysTotalReward", bnd_LC_AchievementManager_GetAchieveSevenDaysTotalReward},
	{NULL, NULL}
	};
	static int luaopen_LC_AchievementManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_AchievementManager", 0, lib_LC_AchievementManager, bnd_LuaDestroy_LC_AchievementManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientToyPetManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientToyPetManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* h = LC_ClientToyPetManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientToyPetManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientToyPetManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientToyPetManager* h = (LC_ClientToyPetManager*) binder.CheckUserType(1, "LC_ClientToyPetManager");
		binder.CheckUserType(1, "LC_ClientToyPetManager");
		return 0;
	}
	static int bnd_LC_ClientToyPetManager_RequestStarUpgrade(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::RequestStarUpgrade, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientToyPetManager_RequestDecomposition(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::RequestDecomposition, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientToyPetManager_RequestEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::RequestEnable, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientToyPetManager_RequestDisable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::RequestDisable, L, 2);
		return 0;
	}		
	static int bnd_LC_ClientToyPetManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetEnableIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetEnableIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetTotalCombateScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetTotalCombateScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetDataMapIndexInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetDataMapIndexInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetStarUpInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetStarUpInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetDropInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetDropInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetToyPetInstance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetToyPetInstance, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetToyPetInstanceBycID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetToyPetInstanceBycID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetInitStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetInitStar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetCurToyPetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetCurToyPetCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetAllToyPetCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetAllToyPetCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetAllToyPetList(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetAllToyPetList, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_CheckPetcIDActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::CheckPetcIDActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetToyPetElementType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetToyPetElementType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetToyPetAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetToyPetAttributes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetToyPetelementAttribData(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetToyPetelementAttribData, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetTotalAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetTotalAttributes, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetManager_GetInit(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetManager* pkAPI = (LC_ClientToyPetManager*)binder.CheckUserType(1, "LC_ClientToyPetManager");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetManager::GetInit, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientToyPetManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientToyPetManager},
	{"RequestStarUpgrade", bnd_LC_ClientToyPetManager_RequestStarUpgrade},
	{"RequestDecomposition", bnd_LC_ClientToyPetManager_RequestDecomposition},
	{"RequestEnable", bnd_LC_ClientToyPetManager_RequestEnable},
	{"RequestDisable", bnd_LC_ClientToyPetManager_RequestDisable},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientToyPetManager_GetDirtyFlagRevisionID},
	{"GetEnableIndex", bnd_LC_ClientToyPetManager_GetEnableIndex},
	{"GetTotalCombateScore", bnd_LC_ClientToyPetManager_GetTotalCombateScore},
	{"GetDataMapIndexInfo", bnd_LC_ClientToyPetManager_GetDataMapIndexInfo},
	{"GetStarUpInfo", bnd_LC_ClientToyPetManager_GetStarUpInfo},
	{"GetDropInfo", bnd_LC_ClientToyPetManager_GetDropInfo},
	{"GetToyPetInstance", bnd_LC_ClientToyPetManager_GetToyPetInstance},
	{"GetToyPetInstanceBycID", bnd_LC_ClientToyPetManager_GetToyPetInstanceBycID},
	{"GetPrompt", bnd_LC_ClientToyPetManager_GetPrompt},
	{"GetInitStar", bnd_LC_ClientToyPetManager_GetInitStar},
	{"GetCurToyPetCount", bnd_LC_ClientToyPetManager_GetCurToyPetCount},
	{"GetAllToyPetCount", bnd_LC_ClientToyPetManager_GetAllToyPetCount},
	{"GetAllToyPetList", bnd_LC_ClientToyPetManager_GetAllToyPetList},
	{"CheckPetcIDActive", bnd_LC_ClientToyPetManager_CheckPetcIDActive},
	{"GetToyPetElementType", bnd_LC_ClientToyPetManager_GetToyPetElementType},
	{"GetToyPetAttributes", bnd_LC_ClientToyPetManager_GetToyPetAttributes},
	{"GetToyPetelementAttribData", bnd_LC_ClientToyPetManager_GetToyPetelementAttribData},
	{"GetTotalAttributes", bnd_LC_ClientToyPetManager_GetTotalAttributes},
	{"GetActive", bnd_LC_ClientToyPetManager_GetActive},
	{"GetInit", bnd_LC_ClientToyPetManager_GetInit},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientToyPetManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientToyPetManager", 0, lib_LC_ClientToyPetManager, bnd_LuaDestroy_LC_ClientToyPetManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientCombatRecordManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientCombatRecordManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCombatRecordManager* h = LC_ClientCombatRecordManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientCombatRecordManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientCombatRecordManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientCombatRecordManager* h = (LC_ClientCombatRecordManager*) binder.CheckUserType(1, "LC_ClientCombatRecordManager");
		binder.CheckUserType(1, "LC_ClientCombatRecordManager");
		return 0;
	}
	static int bnd_LC_ClientCombatRecordManager_GetPlayerCombatInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCombatRecordManager* pkAPI = (LC_ClientCombatRecordManager*)binder.CheckUserType(1, "LC_ClientCombatRecordManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCombatRecordManager::GetPlayerCombatInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCombatRecordManager_GetMonsterCombatInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCombatRecordManager* pkAPI = (LC_ClientCombatRecordManager*)binder.CheckUserType(1, "LC_ClientCombatRecordManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCombatRecordManager::GetMonsterCombatInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCombatRecordManager_GetSelfMvpActiveIdx(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCombatRecordManager* pkAPI = (LC_ClientCombatRecordManager*)binder.CheckUserType(1, "LC_ClientCombatRecordManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCombatRecordManager::GetSelfMvpActiveIdx, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientCombatRecordManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientCombatRecordManager},
	{"GetPlayerCombatInfo", bnd_LC_ClientCombatRecordManager_GetPlayerCombatInfo},
	{"GetMonsterCombatInfo", bnd_LC_ClientCombatRecordManager_GetMonsterCombatInfo},
	{"GetSelfMvpActiveIdx", bnd_LC_ClientCombatRecordManager_GetSelfMvpActiveIdx},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientCombatRecordManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientCombatRecordManager", 0, lib_LC_ClientCombatRecordManager, bnd_LuaDestroy_LC_ClientCombatRecordManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientGuildProfitManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientGuildProfitManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* h = LC_ClientGuildProfitManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientGuildProfitManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientGuildProfitManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientGuildProfitManager* h = (LC_ClientGuildProfitManager*) binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		return 0;
	}
	static int bnd_LC_ClientGuildProfitManager_GetProfitIDByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetProfitIDByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetItemIDByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetItemIDByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetCharNameByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetCharNameByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetPresentTypeByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetPresentTypeByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetInvaildTimeByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetInvaildTimeByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetProfitIsDrawedByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetProfitIsDrawedByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetProfitRecordByKey(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetProfitRecordByKey, L, 2);
		return 1;
	}
	static int bnd_LC_ClientGuildProfitManager_GetNoDrawedCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientGuildProfitManager* pkAPI = (LC_ClientGuildProfitManager*)binder.CheckUserType(1, "LC_ClientGuildProfitManager");
		Utility::LuaCall(*pkAPI, &LC_ClientGuildProfitManager::GetNoDrawedCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientGuildProfitManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientGuildProfitManager},
	{"GetProfitIDByKey", bnd_LC_ClientGuildProfitManager_GetProfitIDByKey},
	{"GetItemIDByKey", bnd_LC_ClientGuildProfitManager_GetItemIDByKey},
	{"GetCharNameByKey", bnd_LC_ClientGuildProfitManager_GetCharNameByKey},
	{"GetPresentTypeByKey", bnd_LC_ClientGuildProfitManager_GetPresentTypeByKey},
	{"GetInvaildTimeByKey", bnd_LC_ClientGuildProfitManager_GetInvaildTimeByKey},
	{"GetProfitIsDrawedByKey", bnd_LC_ClientGuildProfitManager_GetProfitIsDrawedByKey},
	{"GetProfitRecordByKey", bnd_LC_ClientGuildProfitManager_GetProfitRecordByKey},
	{"GetNoDrawedCount", bnd_LC_ClientGuildProfitManager_GetNoDrawedCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientGuildProfitManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientGuildProfitManager", 0, lib_LC_ClientGuildProfitManager, bnd_LuaDestroy_LC_ClientGuildProfitManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientArenaPlayBackManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientArenaPlayBackManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayBackManager* h = LC_ClientArenaPlayBackManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientArenaPlayBackManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientArenaPlayBackManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientArenaPlayBackManager* h = (LC_ClientArenaPlayBackManager*) binder.CheckUserType(1, "LC_ClientArenaPlayBackManager");
		binder.CheckUserType(1, "LC_ClientArenaPlayBackManager");
		return 0;
	}
	static int bnd_LC_ClientArenaPlayBackManager_GetPlayerCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayBackManager* pkAPI = (LC_ClientArenaPlayBackManager*)binder.CheckUserType(1, "LC_ClientArenaPlayBackManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayBackManager::GetPlayerCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientArenaPlayBackManager_GetNetPlayerBySideAndIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientArenaPlayBackManager* pkAPI = (LC_ClientArenaPlayBackManager*)binder.CheckUserType(1, "LC_ClientArenaPlayBackManager");
		Utility::LuaCall(*pkAPI, &LC_ClientArenaPlayBackManager::GetNetPlayerBySideAndIndex, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientArenaPlayBackManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientArenaPlayBackManager},
	{"GetPlayerCount", bnd_LC_ClientArenaPlayBackManager_GetPlayerCount},
	{"GetNetPlayerBySideAndIndex", bnd_LC_ClientArenaPlayBackManager_GetNetPlayerBySideAndIndex},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientArenaPlayBackManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientArenaPlayBackManager", 0, lib_LC_ClientArenaPlayBackManager, bnd_LuaDestroy_LC_ClientArenaPlayBackManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientReportManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientReportManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientReportManager* h = LC_ClientReportManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientReportManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientReportManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientReportManager* h = (LC_ClientReportManager*) binder.CheckUserType(1, "LC_ClientReportManager");
		binder.CheckUserType(1, "LC_ClientReportManager");
		return 0;
	}
	static int bnd_LC_ClientReportManager_GetOptionStateById(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientReportManager* pkAPI = (LC_ClientReportManager*)binder.CheckUserType(1, "LC_ClientReportManager");
		Utility::LuaCall(*pkAPI, &LC_ClientReportManager::GetOptionStateById, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientReportManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientReportManager},
	{"GetOptionStateById", bnd_LC_ClientReportManager_GetOptionStateById},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientReportManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientReportManager", 0, lib_LC_ClientReportManager, bnd_LuaDestroy_LC_ClientReportManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientToyPetInstance Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientToyPetInstance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* h = NULL;
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientToyPetInstance");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientToyPetInstance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientToyPetInstance* h = (LC_ClientToyPetInstance*) binder.CheckUserType(1, "LC_ClientToyPetInstance");
		binder.CheckUserType(1, "LC_ClientToyPetInstance");
		return 0;
	}
	static int bnd_LC_ClientToyPetInstance_GetResId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetResId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetStarLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetStarLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetName(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetName, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetQuality(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetQuality, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetEnable(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetEnable, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetQualityIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetQualityIcon, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetSeriesIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetSeriesIcon, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetCardIcon(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetCardIcon, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetSkillInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetSkillInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetDropInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetDropInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetCharType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetCharType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetMaxStar(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetMaxStar, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetSortId(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetSortId, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetAttribute, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetElementDamageType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetElementDamageType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetNextLevelAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetNextLevelAttribute, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetLastLevelAttribute(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetLastLevelAttribute, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetElementAttribInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetElementAttribInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetCombatScore(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetCombatScore, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetNeedItemID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetNeedItemID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientToyPetInstance_GetNeedItemCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientToyPetInstance* pkAPI = (LC_ClientToyPetInstance*)binder.CheckUserType(1, "LC_ClientToyPetInstance");
		Utility::LuaCall(*pkAPI, &LC_ClientToyPetInstance::GetNeedItemCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientToyPetInstance[] = {
	{"Create", bnd_LuaCreate_LC_ClientToyPetInstance},
	{"GetResId", bnd_LC_ClientToyPetInstance_GetResId},
	{"GetStarLevel", bnd_LC_ClientToyPetInstance_GetStarLevel},
	{"GetName", bnd_LC_ClientToyPetInstance_GetName},
	{"GetQuality", bnd_LC_ClientToyPetInstance_GetQuality},
	{"GetIndex", bnd_LC_ClientToyPetInstance_GetIndex},
	{"GetEnable", bnd_LC_ClientToyPetInstance_GetEnable},
	{"GetQualityIcon", bnd_LC_ClientToyPetInstance_GetQualityIcon},
	{"GetSeriesIcon", bnd_LC_ClientToyPetInstance_GetSeriesIcon},
	{"GetCardIcon", bnd_LC_ClientToyPetInstance_GetCardIcon},
	{"GetSkillInfo", bnd_LC_ClientToyPetInstance_GetSkillInfo},
	{"GetDropInfo", bnd_LC_ClientToyPetInstance_GetDropInfo},
	{"GetCharType", bnd_LC_ClientToyPetInstance_GetCharType},
	{"GetMaxStar", bnd_LC_ClientToyPetInstance_GetMaxStar},
	{"GetSortId", bnd_LC_ClientToyPetInstance_GetSortId},
	{"GetAttribute", bnd_LC_ClientToyPetInstance_GetAttribute},
	{"GetElementDamageType", bnd_LC_ClientToyPetInstance_GetElementDamageType},
	{"GetNextLevelAttribute", bnd_LC_ClientToyPetInstance_GetNextLevelAttribute},
	{"GetLastLevelAttribute", bnd_LC_ClientToyPetInstance_GetLastLevelAttribute},
	{"GetElementAttribInfo", bnd_LC_ClientToyPetInstance_GetElementAttribInfo},
	{"GetCombatScore", bnd_LC_ClientToyPetInstance_GetCombatScore},
	{"GetNeedItemID", bnd_LC_ClientToyPetInstance_GetNeedItemID},
	{"GetNeedItemCount", bnd_LC_ClientToyPetInstance_GetNeedItemCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientToyPetInstance(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientToyPetInstance", 0, lib_LC_ClientToyPetInstance, bnd_LuaDestroy_LC_ClientToyPetInstance);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientCollectionManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientCollectionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* h = LC_ClientCollectionManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientCollectionManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientCollectionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientCollectionManager* h = (LC_ClientCollectionManager*) binder.CheckUserType(1, "LC_ClientCollectionManager");
		binder.CheckUserType(1, "LC_ClientCollectionManager");
		return 0;
	}
	static int bnd_LC_ClientCollectionManager_IsSuitActived(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::IsSuitActived, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetActiveCollectionInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetActiveCollectionInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_CheckCanActive(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::CheckCanActive, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_CheckCanUpgrad(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::CheckCanUpgrad, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetCollectionSuitTotalLevel(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetCollectionSuitTotalLevel, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_IsCollectionFirstActived(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::IsCollectionFirstActived, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetCollectionSizeByType(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetCollectionSizeByType, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetPropertyAttriString(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetPropertyAttriString, L, 2);
		return 1;
	}
	static int bnd_LC_ClientCollectionManager_GetAllAttributes(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientCollectionManager* pkAPI = (LC_ClientCollectionManager*)binder.CheckUserType(1, "LC_ClientCollectionManager");
		Utility::LuaCall(*pkAPI, &LC_ClientCollectionManager::GetAllAttributes, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientCollectionManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientCollectionManager},
	{"IsSuitActived", bnd_LC_ClientCollectionManager_IsSuitActived},
	{"GetActiveCollectionInfo", bnd_LC_ClientCollectionManager_GetActiveCollectionInfo},
	{"CheckCanActive", bnd_LC_ClientCollectionManager_CheckCanActive},
	{"CheckCanUpgrad", bnd_LC_ClientCollectionManager_CheckCanUpgrad},
	{"GetCollectionSuitTotalLevel", bnd_LC_ClientCollectionManager_GetCollectionSuitTotalLevel},
	{"IsCollectionFirstActived", bnd_LC_ClientCollectionManager_IsCollectionFirstActived},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientCollectionManager_GetDirtyFlagRevisionID},
	{"GetCollectionSizeByType", bnd_LC_ClientCollectionManager_GetCollectionSizeByType},
	{"GetPropertyAttriString", bnd_LC_ClientCollectionManager_GetPropertyAttriString},
	{"GetAllAttributes", bnd_LC_ClientCollectionManager_GetAllAttributes},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientCollectionManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientCollectionManager", 0, lib_LC_ClientCollectionManager, bnd_LuaDestroy_LC_ClientCollectionManager);
		return 1;
	}
	///////////////////////////////////////////////
	////////LC_ClientBotManager Lua Export////////////////////
	///////////////////////////////////////////////
	static int bnd_LuaCreate_LC_ClientBotManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* h = LC_ClientBotManager::GetSingletonPtr();
		if( h == NULL )
		{
			GfxWriteLog(LOG_WARNING_FILELINE, LOG_SWITCH_WARNING, "全局类%s的对象还没有创建就试图在Lua脚本中调用，请检查初始化时序！！", "LC_ClientBotManager");
			return 0;
		}
		binder.PushUserType(h, h->GetRTTIName());
		return 1;
	}
	static int bnd_LuaDestroy_LC_ClientBotManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		//LC_ClientBotManager* h = (LC_ClientBotManager*) binder.CheckUserType(1, "LC_ClientBotManager");
		binder.CheckUserType(1, "LC_ClientBotManager");
		return 0;
	}
	static int bnd_LC_ClientBotManager_GetBotInfoByCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetBotInfoByCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetAllBotInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetAllBotInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetLevelUpBotInfoByCID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetLevelUpBotInfoByCID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetProfitInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetProfitInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTarentInfo(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTarentInfo, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetBeginTime(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetBeginTime, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTotalReward1(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTotalReward1, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTotalReward2(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTotalReward2, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTotalReward3(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTotalReward3, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetDirtyFlagRevisionID(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetDirtyFlagRevisionID, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTotalRewardByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTotalRewardByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetRewardItemIDByIndex(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetRewardItemIDByIndex, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetPrompt(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetPrompt, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetTotalCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetTotalCount, L, 2);
		return 1;
	}
	static int bnd_LC_ClientBotManager_GetActiveCount(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		LC_ClientBotManager* pkAPI = (LC_ClientBotManager*)binder.CheckUserType(1, "LC_ClientBotManager");
		Utility::LuaCall(*pkAPI, &LC_ClientBotManager::GetActiveCount, L, 2);
		return 1;
	}
	static const luaL_reg lib_LC_ClientBotManager[] = {
	{"Create", bnd_LuaCreate_LC_ClientBotManager},
	{"GetBotInfoByCID", bnd_LC_ClientBotManager_GetBotInfoByCID},
	{"GetAllBotInfo", bnd_LC_ClientBotManager_GetAllBotInfo},
	{"GetLevelUpBotInfoByCID", bnd_LC_ClientBotManager_GetLevelUpBotInfoByCID},
	{"GetProfitInfo", bnd_LC_ClientBotManager_GetProfitInfo},
	{"GetTarentInfo", bnd_LC_ClientBotManager_GetTarentInfo},
	{"GetBeginTime", bnd_LC_ClientBotManager_GetBeginTime},
	{"GetTotalReward1", bnd_LC_ClientBotManager_GetTotalReward1},
	{"GetTotalReward2", bnd_LC_ClientBotManager_GetTotalReward2},
	{"GetTotalReward3", bnd_LC_ClientBotManager_GetTotalReward3},
	{"GetDirtyFlagRevisionID", bnd_LC_ClientBotManager_GetDirtyFlagRevisionID},
	{"GetTotalRewardByIndex", bnd_LC_ClientBotManager_GetTotalRewardByIndex},
	{"GetRewardItemIDByIndex", bnd_LC_ClientBotManager_GetRewardItemIDByIndex},
	{"GetPrompt", bnd_LC_ClientBotManager_GetPrompt},
	{"GetTotalCount", bnd_LC_ClientBotManager_GetTotalCount},
	{"GetActiveCount", bnd_LC_ClientBotManager_GetActiveCount},
	{NULL, NULL}
	};
	static int luaopen_LC_ClientBotManager(lua_State* L)
	{
		Utility::LuaBinder binder(L);
		binder.Init("LC_ClientBotManager", 0, lib_LC_ClientBotManager, bnd_LuaDestroy_LC_ClientBotManager);
		return 1;
	}
